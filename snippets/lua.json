{
	"AddFOWViewer":
	{
		"body":"AddFOWViewer(${nTeamID}, ${vLocation}, ${flRadius}, ${flDuration}, ${bObstructedVision})",
		"description":"AddFOWViewer:\nAdd temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)\nreturn void",
		"prefix":"AddFOWViewer"
	},
	"AngleDiff":
	{
		"body":"AngleDiff(${float_1}, ${float_2})",
		"description":"AngleDiff:\nReturns the number of degrees difference between two yaw angles\nreturn float",
		"prefix":"AngleDiff"
	},
	"AppendToLogFile":
	{
		"body":"AppendToLogFile(${string_1}, ${string_2})",
		"description":"AppendToLogFile:\nAppends a string to a log file on the server\nreturn void",
		"prefix":"AppendToLogFile"
	},
	"ApplyDamage":
	{
		"body":"ApplyDamage(${handle_1})",
		"description":"ApplyDamage:\nDamage an npc.\nreturn float",
		"prefix":"ApplyDamage"
	},
	"AxisAngleToQuaternion":
	{
		"body":"AxisAngleToQuaternion(${vector}, ${float})",
		"description":"AxisAngleToQuaternion:\n(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis\nreturn Quaternion",
		"prefix":"AxisAngleToQuaternion"
	},
	"CalcClosestPointOnEntityOBB":
	{
		"body":"CalcClosestPointOnEntityOBB(${handle_1}, ${Vector_2})",
		"description":"CalcClosestPointOnEntityOBB:\nCompute the closest point on the OBB of an entity.\nreturn Vector",
		"prefix":"CalcClosestPointOnEntityOBB"
	},
	"CalcDistanceBetweenEntityOBB":
	{
		"body":"CalcDistanceBetweenEntityOBB(${handle_1}, ${handle_2})",
		"description":"CalcDistanceBetweenEntityOBB:\nCompute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping.\nreturn float",
		"prefix":"CalcDistanceBetweenEntityOBB"
	},
	"CalcDistanceToLineSegment2D":
	{
		"body":"CalcDistanceToLineSegment2D(${Vector_1}, ${Vector_2}, ${Vector_3})",
		"description":"CalcDistanceToLineSegment2D:\n\nreturn float",
		"prefix":"CalcDistanceToLineSegment2D"
	},
	"CancelEntityIOEvents":
	{
		"body":"CancelEntityIOEvents(${ehandle_1})",
		"description":"CancelEntityIOEvents:\nCreate all I/O events for a particular entity\nreturn void",
		"prefix":"CancelEntityIOEvents"
	},
	"ClearTeamCustomHealthbarColor":
	{
		"body":"ClearTeamCustomHealthbarColor(${teamNumber})",
		"description":"ClearTeamCustomHealthbarColor:\n( teamNumber )\nreturn void",
		"prefix":"ClearTeamCustomHealthbarColor"
	},
	"CreateDamageInfo":
	{
		"body":"CreateDamageInfo(${hInflictor}, ${hAttacker}, ${flDamage}, ${Vector_4}, ${float_5}, ${int_6})",
		"description":"CreateDamageInfo:\n(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object.\nreturn handle",
		"prefix":"CreateDamageInfo"
	},
	"CreateEffect":
	{
		"body":"CreateEffect(${handle_1})",
		"description":"CreateEffect:\nPass table - Inputs: entity, effect\nreturn bool",
		"prefix":"CreateEffect"
	},
	"CreateHTTPRequest":
	{
		"body":"CreateHTTPRequest(${string_1}, ${string_2})",
		"description":"CreateHTTPRequest:\nCreate an HTTP request.\nreturn handle",
		"prefix":"CreateHTTPRequest"
	},
	"CreateHTTPRequestScriptVM":
	{
		"body":"CreateHTTPRequestScriptVM(${string_1}, ${string_2})",
		"description":"CreateHTTPRequestScriptVM:\nCreate an HTTP request.\nreturn handle",
		"prefix":"CreateHTTPRequestScriptVM"
	},
	"CreateHeroForPlayer":
	{
		"body":"CreateHeroForPlayer(${string_1}, ${handle_2})",
		"description":"CreateHeroForPlayer:\nCreates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero\nreturn handle",
		"prefix":"CreateHeroForPlayer"
	},
	"CreateItem":
	{
		"body":"CreateItem(${string_1}, ${handle_2}, ${handle_3})",
		"description":"CreateItem:\nCreate a DOTA item\nreturn handle",
		"prefix":"CreateItem"
	},
	"CreateItemOnPositionForLaunch":
	{
		"body":"CreateItemOnPositionForLaunch(${butdoesn'tclearaspace}, ${handle_2})",
		"description":"CreateItemOnPositionForLaunch:\nCreate a physical item at a given location, can start in air (but doesn't clear a space)\nreturn handle",
		"prefix":"CreateItemOnPositionForLaunch"
	},
	"CreateItemOnPositionSync":
	{
		"body":"CreateItemOnPositionSync(${Vector_1}, ${handle_2})",
		"description":"CreateItemOnPositionSync:\nCreate a physical item at a given location\nreturn handle",
		"prefix":"CreateItemOnPositionSync"
	},
	"CreateModifierThinker":
	{
		"body":"CreateModifierThinker(${hCaster}, ${hAbility}, ${modifierName}, ${paramTable}, ${vOrigin}, ${nTeamNumber}, ${bPhantomBlocker})",
		"description":"CreateModifierThinker:\nCreate a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )\nreturn handle",
		"prefix":"CreateModifierThinker"
	},
	"CreateSceneEntity":
	{
		"body":"CreateSceneEntity(${string_1})",
		"description":"CreateSceneEntity:\nCreate a scene entity to play the specified scene.\nreturn handle",
		"prefix":"CreateSceneEntity"
	},
	"CreateTempTree":
	{
		"body":"CreateTempTree(${vLocation}, ${flDuration})",
		"description":"CreateTempTree:\nCreate a temporary tree, uses a default tree model. (vLocation, flDuration).\nreturn handle",
		"prefix":"CreateTempTree"
	},
	"CreateTempTreeWithModel":
	{
		"body":"CreateTempTreeWithModel(${vLocation}, ${flDuration}, ${szModelName})",
		"description":"CreateTempTreeWithModel:\nCreate a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName).\nreturn handle",
		"prefix":"CreateTempTreeWithModel"
	},
	"CreateTrigger":
	{
		"body":"CreateTrigger(${vecMin}, ${vecMax}, ${Vector_3})",
		"description":"CreateTrigger:\nCreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger\nreturn handle",
		"prefix":"CreateTrigger"
	},
	"CreateTriggerRadiusApproximate":
	{
		"body":"CreateTriggerRadiusApproximate(${vecOrigin}, ${flRadius})",
		"description":"CreateTriggerRadiusApproximate:\nCreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided\nreturn handle",
		"prefix":"CreateTriggerRadiusApproximate"
	},
	"CreateUnitByName":
	{
		"body":"CreateUnitByName(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6})",
		"description":"CreateUnitByName:\nCreates a DOTA unit by its dota_npc_units.txt name\nreturn handle",
		"prefix":"CreateUnitByName"
	},
	"CreateUnitByNameAsync":
	{
		"body":"CreateUnitByNameAsync(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6}, ${handle_7})",
		"description":"CreateUnitByNameAsync:\nCreates a DOTA unit by its dota_npc_units.txt name\nreturn int",
		"prefix":"CreateUnitByNameAsync"
	},
	"CreateUnitFromTable":
	{
		"body":"CreateUnitFromTable(${handle_1}, ${Vector_2})",
		"description":"CreateUnitFromTable:\nCreates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at.\nreturn handle",
		"prefix":"CreateUnitFromTable"
	},
	"CrossVectors":
	{
		"body":"CrossVectors(${vector}, ${vector})",
		"description":"CrossVectors:\n(vector,vector) cross product between two vectors\nreturn Vector",
		"prefix":"CrossVectors"
	},
	"DebugBreak":
	{
		"body":"DebugBreak()",
		"description":"DebugBreak:\nBreaks in the debugger\nreturn void",
		"prefix":"DebugBreak"
	},
	"DebugDrawBox":
	{
		"body":"DebugDrawBox(${origin}, ${mins}, ${maxs}, ${forward}, ${r}, ${g}, ${b}, ${a})",
		"description":"DebugDrawBox:\nDraw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )\nreturn void",
		"prefix":"DebugDrawBox"
	},
	"DebugDrawBoxDirection":
	{
		"body":"DebugDrawBoxDirection(${cent}, ${min}, ${max}, ${forward}, ${vRgb}, ${a}, ${duration})",
		"description":"DebugDrawBoxDirection:\nDraw a debug forward box (cent, min, max, forward, vRgb, a, duration)\nreturn void",
		"prefix":"DebugDrawBoxDirection"
	},
	"DebugDrawCircle":
	{
		"body":"DebugDrawCircle(${center}, ${vRgb}, ${a}, ${rad}, ${ztest}, ${duration})",
		"description":"DebugDrawCircle:\nDraw a debug circle (center, vRgb, a, rad, ztest, duration)\nreturn void",
		"prefix":"DebugDrawCircle"
	},
	"DebugDrawClear":
	{
		"body":"DebugDrawClear()",
		"description":"DebugDrawClear:\nTry to clear all the debug overlay info\nreturn void",
		"prefix":"DebugDrawClear"
	},
	"DebugDrawLine":
	{
		"body":"DebugDrawLine(${origin}, ${target}, ${r}, ${g}, ${b}, ${ztest}, ${duration})",
		"description":"DebugDrawLine:\nDraw a debug overlay line (origin, target, r, g, b, ztest, duration)\nreturn void",
		"prefix":"DebugDrawLine"
	},
	"DebugDrawLine_vCol":
	{
		"body":"DebugDrawLine_vCol(${start}, ${end}, ${vRgb}, ${a}, ${ztest})",
		"description":"DebugDrawLine_vCol:\nDraw a debug line using color vec (start, end, vRgb, a, ztest, duration)\nreturn void",
		"prefix":"DebugDrawLine_vCol"
	},
	"DebugDrawScreenTextLine":
	{
		"body":"DebugDrawScreenTextLine(${x}, ${y}, ${lineOffset}, ${text}, ${r}, ${g}, ${b}, ${a}, ${duration})",
		"description":"DebugDrawScreenTextLine:\nDraw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)\nreturn void",
		"prefix":"DebugDrawScreenTextLine"
	},
	"DebugDrawSphere":
	{
		"body":"DebugDrawSphere(${center}, ${vRgb}, ${a}, ${rad}, ${ztest}, ${duration})",
		"description":"DebugDrawSphere:\nDraw a debug sphere (center, vRgb, a, rad, ztest, duration)\nreturn void",
		"prefix":"DebugDrawSphere"
	},
	"DebugDrawText":
	{
		"body":"DebugDrawText(${origin}, ${text}, ${bViewCheck}, ${duration})",
		"description":"DebugDrawText:\nDraw text in 3d (origin, text, bViewCheck, duration)\nreturn void",
		"prefix":"DebugDrawText"
	},
	"DebugScreenTextPretty":
	{
		"body":"DebugScreenTextPretty(${x}, ${y}, ${lineOffset}, ${text}, ${r}, ${g}, ${b}, ${a}, ${duration}, ${font}, ${size}, ${bBold})",
		"description":"DebugScreenTextPretty:\nDraw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)\nreturn void",
		"prefix":"DebugScreenTextPretty"
	},
	"DestroyDamageInfo":
	{
		"body":"DestroyDamageInfo(${handle_1})",
		"description":"DestroyDamageInfo:\nFree a damageinfo object that was created with CreateDamageInfo().\nreturn void",
		"prefix":"DestroyDamageInfo"
	},
	"DoCleaveAttack":
	{
		"body":"DoCleaveAttack(${hAttacker}, ${hTarget}, ${hAbility}, ${fDamage}, ${fRadius}, ${effectName}, ${float_7}, ${string_8})",
		"description":"DoCleaveAttack:\n(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)\nreturn int",
		"prefix":"DoCleaveAttack"
	},
	"DoEntFire":
	{
		"body":"DoEntFire(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})",
		"description":"DoEntFire:\n#EntFire:Generate and entity i/o event\nreturn void",
		"prefix":"DoEntFire"
	},
	"DoEntFireByInstanceHandle":
	{
		"body":"DoEntFireByInstanceHandle(${handle_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})",
		"description":"DoEntFireByInstanceHandle:\n#EntFireByHandle:Generate and entity i/o event\nreturn void",
		"prefix":"DoEntFireByInstanceHandle"
	},
	"DoIncludeScript":
	{
		"body":"DoIncludeScript(${internal}, ${handle_2})",
		"description":"DoIncludeScript:\nExecute a script (internal)\nreturn bool",
		"prefix":"DoIncludeScript"
	},
	"DoScriptAssert":
	{
		"body":"DoScriptAssert(${bool_1}, ${string_2})",
		"description":"DoScriptAssert:\n#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.\nreturn void",
		"prefix":"DoScriptAssert"
	},
	"DoUniqueString":
	{
		"body":"DoUniqueString(${string_1})",
		"description":"DoUniqueString:\n#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.\nreturn string",
		"prefix":"DoUniqueString"
	},
	"DotProduct":
	{
		"body":"DotProduct(${Vector_1}, ${Vector_2})",
		"description":"DotProduct:\n\nreturn float",
		"prefix":"DotProduct"
	},
	"EmitAnnouncerSound":
	{
		"body":"EmitAnnouncerSound(${string_1})",
		"description":"EmitAnnouncerSound:\nEmit an announcer sound for all players.\nreturn void",
		"prefix":"EmitAnnouncerSound"
	},
	"EmitAnnouncerSoundForPlayer":
	{
		"body":"EmitAnnouncerSoundForPlayer(${string_1}, ${int_2})",
		"description":"EmitAnnouncerSoundForPlayer:\nEmit an announcer sound for a player.\nreturn void",
		"prefix":"EmitAnnouncerSoundForPlayer"
	},
	"EmitAnnouncerSoundForTeam":
	{
		"body":"EmitAnnouncerSoundForTeam(${string_1}, ${int_2})",
		"description":"EmitAnnouncerSoundForTeam:\nEmit an announcer sound for a team.\nreturn void",
		"prefix":"EmitAnnouncerSoundForTeam"
	},
	"EmitAnnouncerSoundForTeamOnLocation":
	{
		"body":"EmitAnnouncerSoundForTeamOnLocation(${string_1}, ${int_2}, ${Vector_3})",
		"description":"EmitAnnouncerSoundForTeamOnLocation:\nEmit an announcer sound for a team at a specific location.\nreturn void",
		"prefix":"EmitAnnouncerSoundForTeamOnLocation"
	},
	"EmitGlobalSound":
	{
		"body":"EmitGlobalSound(${string_1})",
		"description":"EmitGlobalSound:\nPlay named sound for all players\nreturn void",
		"prefix":"EmitGlobalSound"
	},
	"EmitSoundOn":
	{
		"body":"EmitSoundOn(${string_1}, ${handle_2})",
		"description":"EmitSoundOn:\nPlay named sound on Entity\nreturn void",
		"prefix":"EmitSoundOn"
	},
	"EmitSoundOnClient":
	{
		"body":"EmitSoundOnClient(${string_1}, ${handle_2})",
		"description":"EmitSoundOnClient:\nPlay named sound only on the client for the passed in player\nreturn void",
		"prefix":"EmitSoundOnClient"
	},
	"EmitSoundOnLocationForAllies":
	{
		"body":"EmitSoundOnLocationForAllies(${Vector_1}, ${string_2}, ${handle_3})",
		"description":"EmitSoundOnLocationForAllies:\nEmit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster\nreturn void",
		"prefix":"EmitSoundOnLocationForAllies"
	},
	"EmitSoundOnLocationWithCaster":
	{
		"body":"EmitSoundOnLocationWithCaster(${vLocation}, ${soundName}, ${hCaster})",
		"description":"EmitSoundOnLocationWithCaster:\nEmit a sound on a location from a unit. (vLocation, soundName, hCaster).\nreturn void",
		"prefix":"EmitSoundOnLocationWithCaster"
	},
	"EntIndexToHScript":
	{
		"body":"EntIndexToHScript(${int_1})",
		"description":"EntIndexToHScript:\nTurn an entity index integer to an HScript representing that entity's script instance.\nreturn handle",
		"prefix":"EntIndexToHScript"
	},
	"ExecuteOrderFromTable":
	{
		"body":"ExecuteOrderFromTable(${handle_1})",
		"description":"ExecuteOrderFromTable:\nIssue an order from a script table\nreturn void",
		"prefix":"ExecuteOrderFromTable"
	},
	"ExponentialDecay":
	{
		"body":"ExponentialDecay(${float_1}, ${float_2}, ${float_3})",
		"description":"ExponentialDecay:\nSmooth curve decreasing slower as it approaches zero\nreturn float",
		"prefix":"ExponentialDecay"
	},
	"FindClearRandomPositionAroundUnit":
	{
		"body":"FindClearRandomPositionAroundUnit(${handle_1}, ${handle_2}, ${int_3})",
		"description":"FindClearRandomPositionAroundUnit:\nFinds a clear random position around a given target unit, using the target unit's padded collision radius.\nreturn bool",
		"prefix":"FindClearRandomPositionAroundUnit"
	},
	"FindClearSpaceForUnit":
	{
		"body":"FindClearSpaceForUnit(${handle_1}, ${Vector_2}, ${bool_3})",
		"description":"FindClearSpaceForUnit:\nPlace a unit somewhere not already occupied.\nreturn bool",
		"prefix":"FindClearSpaceForUnit"
	},
	"FindUnitsInLine":
	{
		"body":"FindUnitsInLine(${int_1}, ${Vector_2}, ${Vector_3}, ${handle_4}, ${float_5}, ${int_6}, ${int_7}, ${int_8})",
		"description":"FindUnitsInLine:\nFind units that intersect the given line with the given flags.\nreturn table",
		"prefix":"FindUnitsInLine"
	},
	"FindUnitsInRadius":
	{
		"body":"FindUnitsInRadius(${int_1}, ${Vector_2}, ${handle_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9})",
		"description":"FindUnitsInRadius:\nFinds the units in a given radius with the given flags.\nreturn table",
		"prefix":"FindUnitsInRadius"
	},
	"FireEntityIOInputNameOnly":
	{
		"body":"FireEntityIOInputNameOnly(${ehandle_1}, ${string_2})",
		"description":"FireEntityIOInputNameOnly:\nFire Entity's Action Input w/no data\nreturn void",
		"prefix":"FireEntityIOInputNameOnly"
	},
	"FireEntityIOInputString":
	{
		"body":"FireEntityIOInputString(${ehandle_1}, ${string_2}, ${string_3})",
		"description":"FireEntityIOInputString:\nFire Entity's Action Input with passed String - you own the memory\nreturn void",
		"prefix":"FireEntityIOInputString"
	},
	"FireEntityIOInputVec":
	{
		"body":"FireEntityIOInputVec(${ehandle_1}, ${string_2}, ${Vector_3})",
		"description":"FireEntityIOInputVec:\nFire Entity's Action Input with passed Vector - you own the memory\nreturn void",
		"prefix":"FireEntityIOInputVec"
	},
	"FireGameEvent":
	{
		"body":"FireGameEvent(${string_1}, ${handle_2})",
		"description":"FireGameEvent:\nFire a game event.\nreturn void",
		"prefix":"FireGameEvent"
	},
	"FireGameEventLocal":
	{
		"body":"FireGameEventLocal(${string_1}, ${handle_2})",
		"description":"FireGameEventLocal:\nFire a game event without broadcasting to the client.\nreturn void",
		"prefix":"FireGameEventLocal"
	},
	"FrameTime":
	{
		"body":"FrameTime()",
		"description":"FrameTime:\nGet the time spent on the server in the last frame\nreturn float",
		"prefix":"FrameTime"
	},
	"GetDedicatedServerKey":
	{
		"body":"GetDedicatedServerKey(${version})",
		"description":"GetDedicatedServerKey:\n( version )\nreturn string",
		"prefix":"GetDedicatedServerKey"
	},
	"GetEntityIndexForTreeId":
	{
		"body":"GetEntityIndexForTreeId(${unsigned_1})",
		"description":"GetEntityIndexForTreeId:\nGet the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE.\nreturn <unknown>",
		"prefix":"GetEntityIndexForTreeId"
	},
	"GetFrameCount":
	{
		"body":"GetFrameCount()",
		"description":"GetFrameCount:\nReturns the engines current frame count\nreturn int",
		"prefix":"GetFrameCount"
	},
	"GetGroundHeight":
	{
		"body":"GetGroundHeight(${Vector_1}, ${handle_2})",
		"description":"GetGroundHeight:\n\nreturn float",
		"prefix":"GetGroundHeight"
	},
	"GetGroundPosition":
	{
		"body":"GetGroundPosition(${Vector_1}, ${handle_2})",
		"description":"GetGroundPosition:\nReturns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.\nreturn Vector",
		"prefix":"GetGroundPosition"
	},
	"GetItemCost":
	{
		"body":"GetItemCost(${string_1})",
		"description":"GetItemCost:\nGet the cost of an item by name.\nreturn int",
		"prefix":"GetItemCost"
	},
	"GetItemDefOwnedCount":
	{
		"body":"GetItemDefOwnedCount(${int_1}, ${int_2})",
		"description":"GetItemDefOwnedCount:\n\nreturn int",
		"prefix":"GetItemDefOwnedCount"
	},
	"GetItemDefQuantity":
	{
		"body":"GetItemDefQuantity(${int_1}, ${int_2})",
		"description":"GetItemDefQuantity:\n\nreturn int",
		"prefix":"GetItemDefQuantity"
	},
	"GetListenServerHost":
	{
		"body":"GetListenServerHost()",
		"description":"GetListenServerHost:\nGet the local player on a listen server.\nreturn handle",
		"prefix":"GetListenServerHost"
	},
	"GetLobbyEventGameDetails":
	{
		"body":"GetLobbyEventGameDetails()",
		"description":"GetLobbyEventGameDetails:\n( )\nreturn table",
		"prefix":"GetLobbyEventGameDetails"
	},
	"GetMapName":
	{
		"body":"GetMapName()",
		"description":"GetMapName:\nGet the name of the map.\nreturn string",
		"prefix":"GetMapName"
	},
	"GetMaxOutputDelay":
	{
		"body":"GetMaxOutputDelay(${ehandle_1}, ${string_2})",
		"description":"GetMaxOutputDelay:\nGet the longest delay for all events attached to an output\nreturn float",
		"prefix":"GetMaxOutputDelay"
	},
	"GetPhysAngularVelocity":
	{
		"body":"GetPhysAngularVelocity(${handle_1})",
		"description":"GetPhysAngularVelocity:\nGet Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second.\nreturn Vector",
		"prefix":"GetPhysAngularVelocity"
	},
	"GetPhysVelocity":
	{
		"body":"GetPhysVelocity(${handle_1})",
		"description":"GetPhysVelocity:\nGet Velocity for VPHYS or normal object\nreturn Vector",
		"prefix":"GetPhysVelocity"
	},
	"GetSystemDate":
	{
		"body":"GetSystemDate()",
		"description":"GetSystemDate:\nGet the current real world date\nreturn string",
		"prefix":"GetSystemDate"
	},
	"GetSystemTime":
	{
		"body":"GetSystemTime()",
		"description":"GetSystemTime:\nGet the current real world time\nreturn string",
		"prefix":"GetSystemTime"
	},
	"GetTargetAOELocation":
	{
		"body":"GetTargetAOELocation(${int_1}, ${int_2}, ${int_3}, ${Vector_4}, ${int_5}, ${int_6}, ${int_7})",
		"description":"GetTargetAOELocation:\n\nreturn Vector",
		"prefix":"GetTargetAOELocation"
	},
	"GetTargetLinearLocation":
	{
		"body":"GetTargetLinearLocation(${int_1}, ${int_2}, ${int_3}, ${Vector_4}, ${int_5}, ${int_6}, ${int_7})",
		"description":"GetTargetLinearLocation:\n\nreturn Vector",
		"prefix":"GetTargetLinearLocation"
	},
	"GetTeamHeroKills":
	{
		"body":"GetTeamHeroKills(${intteamID})",
		"description":"GetTeamHeroKills:\n( int teamID )\nreturn int",
		"prefix":"GetTeamHeroKills"
	},
	"GetTeamName":
	{
		"body":"GetTeamName(${intteamID})",
		"description":"GetTeamName:\n( int teamID )\nreturn string",
		"prefix":"GetTeamName"
	},
	"GetTreeIdForEntityIndex":
	{
		"body":"GetTreeIdForEntityIndex(${int_1})",
		"description":"GetTreeIdForEntityIndex:\nGiven and entity index of a tree, get the tree id for use for use with with unit orders.\nreturn int",
		"prefix":"GetTreeIdForEntityIndex"
	},
	"GetWorldMaxX":
	{
		"body":"GetWorldMaxX()",
		"description":"GetWorldMaxX:\nGets the world's maximum X position.\nreturn float",
		"prefix":"GetWorldMaxX"
	},
	"GetWorldMaxY":
	{
		"body":"GetWorldMaxY()",
		"description":"GetWorldMaxY:\nGets the world's maximum Y position.\nreturn float",
		"prefix":"GetWorldMaxY"
	},
	"GetWorldMinX":
	{
		"body":"GetWorldMinX()",
		"description":"GetWorldMinX:\nGets the world's minimum X position.\nreturn float",
		"prefix":"GetWorldMinX"
	},
	"GetWorldMinY":
	{
		"body":"GetWorldMinY()",
		"description":"GetWorldMinY:\nGets the world's minimum Y position.\nreturn float",
		"prefix":"GetWorldMinY"
	},
	"InitLogFile":
	{
		"body":"InitLogFile(${string_1}, ${string_2})",
		"description":"InitLogFile:\nIf the given file doesn't exist, creates it with the given contents; does nothing if it exists\nreturn void",
		"prefix":"InitLogFile"
	},
	"IsClient":
	{
		"body":"IsClient()",
		"description":"IsClient:\nReturns true if this is lua running from the client.dll.\nreturn bool",
		"prefix":"IsClient"
	},
	"IsDedicatedServer":
	{
		"body":"IsDedicatedServer()",
		"description":"IsDedicatedServer:\nReturns true if this server is a dedicated server.\nreturn bool",
		"prefix":"IsDedicatedServer"
	},
	"IsInToolsMode":
	{
		"body":"IsInToolsMode()",
		"description":"IsInToolsMode:\nReturns true if this is lua running within tools mode.\nreturn bool",
		"prefix":"IsInToolsMode"
	},
	"IsLocationVisible":
	{
		"body":"IsLocationVisible(${nTeamNumber}, ${vLocation})",
		"description":"IsLocationVisible:\nAsk fog of war if a location is visible to a certain team (nTeamNumber, vLocation).\nreturn bool",
		"prefix":"IsLocationVisible"
	},
	"IsMarkedForDeletion":
	{
		"body":"IsMarkedForDeletion(${handle_1})",
		"description":"IsMarkedForDeletion:\nReturns true if the entity is valid and marked for deletion.\nreturn bool",
		"prefix":"IsMarkedForDeletion"
	},
	"IsServer":
	{
		"body":"IsServer()",
		"description":"IsServer:\nReturns true if this is lua running from the server.dll.\nreturn bool",
		"prefix":"IsServer"
	},
	"IsValidEntity":
	{
		"body":"IsValidEntity(${handle_1})",
		"description":"IsValidEntity:\nChecks to see if the given hScript is a valid entity\nreturn bool",
		"prefix":"IsValidEntity"
	},
	"LerpVectors":
	{
		"body":"LerpVectors(${vector}, ${vector}, ${float})",
		"description":"LerpVectors:\n(vector,vector,float) lerp between two vectors by a float factor returning new vector\nreturn Vector",
		"prefix":"LerpVectors"
	},
	"LimitPathingSearchDepth":
	{
		"body":"LimitPathingSearchDepth(${float_1})",
		"description":"LimitPathingSearchDepth:\nSet the limit on the pathfinding search space.\nreturn void",
		"prefix":"LimitPathingSearchDepth"
	},
	"LinkLuaModifier":
	{
		"body":"LinkLuaModifier(${className}, ${fileName}, ${LuaModifierType})",
		"description":"LinkLuaModifier:\nLink a lua-defined modifier with the associated class ( className, fileName, LuaModifierType).\nreturn void",
		"prefix":"LinkLuaModifier"
	},
	"ListenToGameEvent":
	{
		"body":"ListenToGameEvent(${string_1}, ${handle_2}, ${handle_3})",
		"description":"ListenToGameEvent:\nRegister as a listener for a game event from script.\nreturn int",
		"prefix":"ListenToGameEvent"
	},
	"LoadKeyValues":
	{
		"body":"LoadKeyValues(${string_1})",
		"description":"LoadKeyValues:\nCreates a table from the specified keyvalues text file\nreturn table",
		"prefix":"LoadKeyValues"
	},
	"LoadKeyValuesFromString":
	{
		"body":"LoadKeyValuesFromString(${string_1})",
		"description":"LoadKeyValuesFromString:\nCreates a table from the specified keyvalues string\nreturn table",
		"prefix":"LoadKeyValuesFromString"
	},
	"LocalTime":
	{
		"body":"LocalTime()",
		"description":"LocalTime:\nGet the current local time\nreturn table",
		"prefix":"LocalTime"
	},
	"MakeStringToken":
	{
		"body":"MakeStringToken(${string_1})",
		"description":"MakeStringToken:\nChecks to see if the given hScript is a valid entity\nreturn int",
		"prefix":"MakeStringToken"
	},
	"MinimapEvent":
	{
		"body":"MinimapEvent(${nTeamID}, ${hEntity}, ${nXCoord}, ${nYCoord}, ${nEventType}, ${nEventDuration})",
		"description":"MinimapEvent:\nStart a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration).\nreturn void",
		"prefix":"MinimapEvent"
	},
	"Msg":
	{
		"body":"Msg(${string_1})",
		"description":"Msg:\nPrint a message\nreturn void",
		"prefix":"Msg"
	},
	"PauseGame":
	{
		"body":"PauseGame(${bool_1})",
		"description":"PauseGame:\nPause or unpause the game.\nreturn void",
		"prefix":"PauseGame"
	},
	"PlayerInstanceFromIndex":
	{
		"body":"PlayerInstanceFromIndex(${int_1})",
		"description":"PlayerInstanceFromIndex:\nGet a script instance of a player by index.\nreturn handle",
		"prefix":"PlayerInstanceFromIndex"
	},
	"PrecacheEntityFromTable":
	{
		"body":"PrecacheEntityFromTable(${string_1}, ${handle_2}, ${handle_3})",
		"description":"PrecacheEntityFromTable:\nPrecache an entity from KeyValues in table\nreturn void",
		"prefix":"PrecacheEntityFromTable"
	},
	"PrecacheEntityListFromTable":
	{
		"body":"PrecacheEntityListFromTable(${handle_1}, ${handle_2})",
		"description":"PrecacheEntityListFromTable:\nPrecache a list of entity KeyValues tables\nreturn void",
		"prefix":"PrecacheEntityListFromTable"
	},
	"PrecacheItemByNameAsync":
	{
		"body":"PrecacheItemByNameAsync(${string_1}, ${handle_2})",
		"description":"PrecacheItemByNameAsync:\nAsynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished.\nreturn void",
		"prefix":"PrecacheItemByNameAsync"
	},
	"PrecacheItemByNameSync":
	{
		"body":"PrecacheItemByNameSync(${string_1}, ${handle_2})",
		"description":"PrecacheItemByNameSync:\nPrecaches a DOTA item by its dota_npc_items.txt name\nreturn void",
		"prefix":"PrecacheItemByNameSync"
	},
	"PrecacheModel":
	{
		"body":"PrecacheModel(${modelName}, ${context})",
		"description":"PrecacheModel:\n( modelName, context ) - Manually precache a single model\nreturn void",
		"prefix":"PrecacheModel"
	},
	"PrecacheResource":
	{
		"body":"PrecacheResource(${string_1}, ${string_2}, ${handle_3})",
		"description":"PrecacheResource:\nManually precache a single resource\nreturn void",
		"prefix":"PrecacheResource"
	},
	"PrecacheUnitByNameAsync":
	{
		"body":"PrecacheUnitByNameAsync(${string_1}, ${handle_2}, ${int_3})",
		"description":"PrecacheUnitByNameAsync:\nAsynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished.\nreturn void",
		"prefix":"PrecacheUnitByNameAsync"
	},
	"PrecacheUnitByNameSync":
	{
		"body":"PrecacheUnitByNameSync(${string_1}, ${handle_2}, ${int_3})",
		"description":"PrecacheUnitByNameSync:\nPrecaches a DOTA unit by its dota_npc_units.txt name\nreturn void",
		"prefix":"PrecacheUnitByNameSync"
	},
	"PrecacheUnitFromTableAsync":
	{
		"body":"PrecacheUnitFromTableAsync(${handle_1}, ${handle_2})",
		"description":"PrecacheUnitFromTableAsync:\nPrecaches a DOTA unit from a table of entity key values.\nreturn void",
		"prefix":"PrecacheUnitFromTableAsync"
	},
	"PrecacheUnitFromTableSync":
	{
		"body":"PrecacheUnitFromTableSync(${handle_1}, ${handle_2})",
		"description":"PrecacheUnitFromTableSync:\nPrecaches a DOTA unit from a table of entity key values.\nreturn void",
		"prefix":"PrecacheUnitFromTableSync"
	},
	"PrintLinkedConsoleMessage":
	{
		"body":"PrintLinkedConsoleMessage(${string_1}, ${string_2})",
		"description":"PrintLinkedConsoleMessage:\nPrint a console message with a linked console command\nreturn void",
		"prefix":"PrintLinkedConsoleMessage"
	},
	"RandomFloat":
	{
		"body":"RandomFloat(${float_1}, ${float_2})",
		"description":"RandomFloat:\nGet a random float within a range\nreturn float",
		"prefix":"RandomFloat"
	},
	"RandomInt":
	{
		"body":"RandomInt(${int_1}, ${int_2})",
		"description":"RandomInt:\nGet a random int within a range\nreturn int",
		"prefix":"RandomInt"
	},
	"RandomVector":
	{
		"body":"RandomVector(${float_1})",
		"description":"RandomVector:\nGet a random 2D vector of the given length.\nreturn Vector",
		"prefix":"RandomVector"
	},
	"RegisterCustomAnimationScriptForModel":
	{
		"body":"RegisterCustomAnimationScriptForModel(${string_1}, ${string_2})",
		"description":"RegisterCustomAnimationScriptForModel:\nRegister a custom animation script to run when a model loads\nreturn void",
		"prefix":"RegisterCustomAnimationScriptForModel"
	},
	"RegisterSpawnGroupFilterProxy":
	{
		"body":"RegisterSpawnGroupFilterProxy(${string_1})",
		"description":"RegisterSpawnGroupFilterProxy:\nCreate a C proxy for a script-based spawn group filter\nreturn void",
		"prefix":"RegisterSpawnGroupFilterProxy"
	},
	"ReloadMOTD":
	{
		"body":"ReloadMOTD()",
		"description":"ReloadMOTD:\nReloads the MotD file\nreturn void",
		"prefix":"ReloadMOTD"
	},
	"RemoveSpawnGroupFilterProxy":
	{
		"body":"RemoveSpawnGroupFilterProxy(${string_1})",
		"description":"RemoveSpawnGroupFilterProxy:\nRemove the C proxy for a script-based spawn group filter\nreturn void",
		"prefix":"RemoveSpawnGroupFilterProxy"
	},
	"ResolveNPCPositions":
	{
		"body":"ResolveNPCPositions(${Vector_1}, ${float_2})",
		"description":"ResolveNPCPositions:\nCheck and fix units that have been assigned a position inside collision radius of other NPCs.\nreturn void",
		"prefix":"ResolveNPCPositions"
	},
	"RollPercentage":
	{
		"body":"RollPercentage(${intnPct})",
		"description":"RollPercentage:\n(int nPct)\nreturn bool",
		"prefix":"RollPercentage"
	},
	"RotateOrientation":
	{
		"body":"RotateOrientation(${QAngle_1}, ${QAngle_2})",
		"description":"RotateOrientation:\nRotate a QAngle by another QAngle.\nreturn QAngle",
		"prefix":"RotateOrientation"
	},
	"RotatePosition":
	{
		"body":"RotatePosition(${Vector_1}, ${QAngle_2}, ${Vector_3})",
		"description":"RotatePosition:\nRotate a Vector around a point.\nreturn Vector",
		"prefix":"RotatePosition"
	},
	"RotateQuaternionByAxisAngle":
	{
		"body":"RotateQuaternionByAxisAngle(${quaternion}, ${vector}, ${float})",
		"description":"RotateQuaternionByAxisAngle:\n(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis\nreturn Quaternion",
		"prefix":"RotateQuaternionByAxisAngle"
	},
	"RotationDelta":
	{
		"body":"RotationDelta(${QAngle_1}, ${QAngle_2})",
		"description":"RotationDelta:\nFind the delta between two QAngles.\nreturn QAngle",
		"prefix":"RotationDelta"
	},
	"RotationDeltaAsAngularVelocity":
	{
		"body":"RotationDeltaAsAngularVelocity(${QAngle_1}, ${QAngle_2})",
		"description":"RotationDeltaAsAngularVelocity:\nconverts delta QAngle to an angular velocity Vector\nreturn Vector",
		"prefix":"RotationDeltaAsAngularVelocity"
	},
	"Say":
	{
		"body":"Say(${handle_1}, ${string_2}, ${bool_3})",
		"description":"Say:\nHave Entity say string, and teamOnly or not\nreturn void",
		"prefix":"Say"
	},
	"ScreenShake":
	{
		"body":"ScreenShake(${SHAKE_START=0}, ${SHAKE_STOP=1}, ${float_3}, ${float_4}, ${float_5}, ${int_6}, ${bool_7})",
		"description":"ScreenShake:\nStart a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake\nreturn void",
		"prefix":"ScreenShake"
	},
	"SendOverheadEventMessage":
	{
		"body":"SendOverheadEventMessage(${DOTAPlayersendToPlayer}, ${intiMessageType}, ${EntitytargetEntity}, ${intiValue}, ${DOTAPlayersourcePlayer})",
		"description":"SendOverheadEventMessage:\n( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*\nreturn void",
		"prefix":"SendOverheadEventMessage"
	},
	"SendToConsole":
	{
		"body":"SendToConsole(${string_1})",
		"description":"SendToConsole:\nSend a string to the console as a client command\nreturn void",
		"prefix":"SendToConsole"
	},
	"SendToServerConsole":
	{
		"body":"SendToServerConsole(${string_1})",
		"description":"SendToServerConsole:\nSend a string to the console as a server command\nreturn void",
		"prefix":"SendToServerConsole"
	},
	"SetOpvarFloatAll":
	{
		"body":"SetOpvarFloatAll(${string_1}, ${string_2}, ${string_3}, ${float_4})",
		"description":"SetOpvarFloatAll:\nSets an opvar value for all players\nreturn void",
		"prefix":"SetOpvarFloatAll"
	},
	"SetOpvarFloatPlayer":
	{
		"body":"SetOpvarFloatPlayer(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5})",
		"description":"SetOpvarFloatPlayer:\nSets an opvar value for a single player\nreturn void",
		"prefix":"SetOpvarFloatPlayer"
	},
	"SetPhysAngularVelocity":
	{
		"body":"SetPhysAngularVelocity(${handle_1}, ${Vector_2})",
		"description":"SetPhysAngularVelocity:\nSet Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.\nreturn void",
		"prefix":"SetPhysAngularVelocity"
	},
	"SetQuestName":
	{
		"body":"SetQuestName(${string_1})",
		"description":"SetQuestName:\nSet the current quest name.\nreturn void",
		"prefix":"SetQuestName"
	},
	"SetQuestPhase":
	{
		"body":"SetQuestPhase(${int_1})",
		"description":"SetQuestPhase:\nSet the current quest phase.\nreturn void",
		"prefix":"SetQuestPhase"
	},
	"SetRenderingEnabled":
	{
		"body":"SetRenderingEnabled(${ehandle_1}, ${bool_2})",
		"description":"SetRenderingEnabled:\nSet rendering on/off for an ehandle\nreturn void",
		"prefix":"SetRenderingEnabled"
	},
	"SetTeamCustomHealthbarColor":
	{
		"body":"SetTeamCustomHealthbarColor(${teamNumber}, ${r}, ${g}, ${b})",
		"description":"SetTeamCustomHealthbarColor:\n( teamNumber, r, g, b )\nreturn void",
		"prefix":"SetTeamCustomHealthbarColor"
	},
	"ShowCustomHeaderMessage":
	{
		"body":"ShowCustomHeaderMessage(${constchar*pszMessage}, ${intnPlayerID}, ${intnValue}, ${floatflTime})",
		"description":"ShowCustomHeaderMessage:\n( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName\nreturn void",
		"prefix":"ShowCustomHeaderMessage"
	},
	"ShowGenericPopup":
	{
		"body":"ShowGenericPopup(${string_1}, ${string_2}, ${string_3}, ${string_4}, ${int_5})",
		"description":"ShowGenericPopup:\nShow a generic popup dialog for all players.\nreturn void",
		"prefix":"ShowGenericPopup"
	},
	"ShowGenericPopupToPlayer":
	{
		"body":"ShowGenericPopupToPlayer(${handle_1}, ${string_2}, ${string_3}, ${string_4}, ${string_5}, ${int_6})",
		"description":"ShowGenericPopupToPlayer:\nShow a generic popup dialog to a specific player.\nreturn void",
		"prefix":"ShowGenericPopupToPlayer"
	},
	"ShowMessage":
	{
		"body":"ShowMessage(${string_1})",
		"description":"ShowMessage:\nPrint a hud message on all clients\nreturn void",
		"prefix":"ShowMessage"
	},
	"SpawnDOTAShopTriggerRadiusApproximate":
	{
		"body":"SpawnDOTAShopTriggerRadiusApproximate(${VectorvOrigin}, ${floatflRadius})",
		"description":"SpawnDOTAShopTriggerRadiusApproximate:\n(Vector vOrigin, float flRadius )\nreturn handle",
		"prefix":"SpawnDOTAShopTriggerRadiusApproximate"
	},
	"SpawnEntityFromTableSynchronous":
	{
		"body":"SpawnEntityFromTableSynchronous(${string_1}, ${handle_2})",
		"description":"SpawnEntityFromTableSynchronous:\nSynchronously spawns a single entity from a table\nreturn handle",
		"prefix":"SpawnEntityFromTableSynchronous"
	},
	"SpawnEntityGroupFromTable":
	{
		"body":"SpawnEntityGroupFromTable(${handle_1}, ${bool_2}, ${handle_3})",
		"description":"SpawnEntityGroupFromTable:\nHierarchically spawn an entity group from a set of spawn tables.\nreturn bool",
		"prefix":"SpawnEntityGroupFromTable"
	},
	"SpawnEntityListFromTableAsynchronous":
	{
		"body":"SpawnEntityListFromTableAsynchronous(${handle_1}, ${handle_2})",
		"description":"SpawnEntityListFromTableAsynchronous:\nAsynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete\nreturn int",
		"prefix":"SpawnEntityListFromTableAsynchronous"
	},
	"SpawnEntityListFromTableSynchronous":
	{
		"body":"SpawnEntityListFromTableSynchronous(${handle_1})",
		"description":"SpawnEntityListFromTableSynchronous:\nSynchronously spawn an entity group from a list of spawn tables.\nreturn handle",
		"prefix":"SpawnEntityListFromTableSynchronous"
	},
	"SplineQuaternions":
	{
		"body":"SplineQuaternions(${quaternion}, ${quaternion}, ${float})",
		"description":"SplineQuaternions:\n(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]\nreturn Quaternion",
		"prefix":"SplineQuaternions"
	},
	"SplineVectors":
	{
		"body":"SplineVectors(${vector}, ${vector}, ${float})",
		"description":"SplineVectors:\n(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]\nreturn Vector",
		"prefix":"SplineVectors"
	},
	"StartSoundEvent":
	{
		"body":"StartSoundEvent(${string_1}, ${handle_2})",
		"description":"StartSoundEvent:\nStart a sound event\nreturn void",
		"prefix":"StartSoundEvent"
	},
	"StartSoundEventFromPosition":
	{
		"body":"StartSoundEventFromPosition(${string_1}, ${Vector_2})",
		"description":"StartSoundEventFromPosition:\nStart a sound event from position\nreturn void",
		"prefix":"StartSoundEventFromPosition"
	},
	"StartSoundEventFromPositionReliable":
	{
		"body":"StartSoundEventFromPositionReliable(${string_1}, ${Vector_2})",
		"description":"StartSoundEventFromPositionReliable:\nStart a sound event from position with reliable delivery\nreturn void",
		"prefix":"StartSoundEventFromPositionReliable"
	},
	"StartSoundEventFromPositionUnreliable":
	{
		"body":"StartSoundEventFromPositionUnreliable(${string_1}, ${Vector_2})",
		"description":"StartSoundEventFromPositionUnreliable:\nStart a sound event from position with optional delivery\nreturn void",
		"prefix":"StartSoundEventFromPositionUnreliable"
	},
	"StartSoundEventReliable":
	{
		"body":"StartSoundEventReliable(${string_1}, ${handle_2})",
		"description":"StartSoundEventReliable:\nStart a sound event with reliable delivery\nreturn void",
		"prefix":"StartSoundEventReliable"
	},
	"StartSoundEventUnreliable":
	{
		"body":"StartSoundEventUnreliable(${string_1}, ${handle_2})",
		"description":"StartSoundEventUnreliable:\nStart a sound event with optional delivery\nreturn void",
		"prefix":"StartSoundEventUnreliable"
	},
	"StopEffect":
	{
		"body":"StopEffect(${handle_1}, ${string_2})",
		"description":"StopEffect:\nPass entity and effect name\nreturn void",
		"prefix":"StopEffect"
	},
	"StopGlobalSound":
	{
		"body":"StopGlobalSound(${string_1})",
		"description":"StopGlobalSound:\nStop named sound for all players\nreturn void",
		"prefix":"StopGlobalSound"
	},
	"StopListeningToAllGameEvents":
	{
		"body":"StopListeningToAllGameEvents(${handle_1})",
		"description":"StopListeningToAllGameEvents:\nStop listening to all game events within a specific context.\nreturn void",
		"prefix":"StopListeningToAllGameEvents"
	},
	"StopListeningToGameEvent":
	{
		"body":"StopListeningToGameEvent(${int_1})",
		"description":"StopListeningToGameEvent:\nStop listening to a particular game event.\nreturn bool",
		"prefix":"StopListeningToGameEvent"
	},
	"StopSoundEvent":
	{
		"body":"StopSoundEvent(${string_1}, ${handle_2})",
		"description":"StopSoundEvent:\nStops a sound event with optional delivery\nreturn void",
		"prefix":"StopSoundEvent"
	},
	"StopSoundOn":
	{
		"body":"StopSoundOn(${string_1}, ${handle_2})",
		"description":"StopSoundOn:\nStop named sound on Entity\nreturn void",
		"prefix":"StopSoundOn"
	},
	"Time":
	{
		"body":"Time()",
		"description":"Time:\nGet the current server time\nreturn float",
		"prefix":"Time"
	},
	"TraceCollideable":
	{
		"body":"TraceCollideable(${optionalmins})",
		"description":"TraceCollideable:\nPass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal\nreturn bool",
		"prefix":"TraceCollideable"
	},
	"TraceHull":
	{
		"body":"TraceHull(${handle_1})",
		"description":"TraceHull:\nPass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid\nreturn bool",
		"prefix":"TraceHull"
	},
	"TraceLine":
	{
		"body":"TraceLine(${handle_1})",
		"description":"TraceLine:\nPass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid\nreturn bool",
		"prefix":"TraceLine"
	},
	"UTIL_AngleDiff":
	{
		"body":"UTIL_AngleDiff(${float_1}, ${float_2})",
		"description":"UTIL_AngleDiff:\nReturns the number of degrees difference between two yaw angles\nreturn float",
		"prefix":"UTIL_AngleDiff"
	},
	"UTIL_MessageText":
	{
		"body":"UTIL_MessageText(${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6})",
		"description":"UTIL_MessageText:\nSends colored text to one client.\nreturn void",
		"prefix":"UTIL_MessageText"
	},
	"UTIL_MessageTextAll":
	{
		"body":"UTIL_MessageTextAll(${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})",
		"description":"UTIL_MessageTextAll:\nSends colored text to all clients.\nreturn void",
		"prefix":"UTIL_MessageTextAll"
	},
	"UTIL_MessageTextAll_WithContext":
	{
		"body":"UTIL_MessageTextAll_WithContext(${Validcontextkeys:player_id}, ${value}, ${team_id}, ${int_4}, ${int_5}, ${handle_6})",
		"description":"UTIL_MessageTextAll_WithContext:\nSends colored text to all clients. (Valid context keys: player_id, value, team_id)\nreturn void",
		"prefix":"UTIL_MessageTextAll_WithContext"
	},
	"UTIL_MessageText_WithContext":
	{
		"body":"UTIL_MessageText_WithContext(${Validcontextkeys:player_id}, ${value}, ${team_id}, ${int_4}, ${int_5}, ${int_6}, ${handle_7})",
		"description":"UTIL_MessageText_WithContext:\nSends colored text to one client. (Valid context keys: player_id, value, team_id)\nreturn void",
		"prefix":"UTIL_MessageText_WithContext"
	},
	"UTIL_Remove":
	{
		"body":"UTIL_Remove(${handle_1})",
		"description":"UTIL_Remove:\nRemoves the specified entity\nreturn void",
		"prefix":"UTIL_Remove"
	},
	"UTIL_RemoveImmediate":
	{
		"body":"UTIL_RemoveImmediate(${handle_1})",
		"description":"UTIL_RemoveImmediate:\nImmediately removes the specified entity\nreturn void",
		"prefix":"UTIL_RemoveImmediate"
	},
	"UTIL_ResetMessageText":
	{
		"body":"UTIL_ResetMessageText(${int_1})",
		"description":"UTIL_ResetMessageText:\nClear all message text on one client.\nreturn void",
		"prefix":"UTIL_ResetMessageText"
	},
	"UTIL_ResetMessageTextAll":
	{
		"body":"UTIL_ResetMessageTextAll()",
		"description":"UTIL_ResetMessageTextAll:\nClear all message text from all clients.\nreturn void",
		"prefix":"UTIL_ResetMessageTextAll"
	},
	"UnitFilter":
	{
		"body":"UnitFilter(${handle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})",
		"description":"UnitFilter:\nCheck if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam\nreturn int",
		"prefix":"UnitFilter"
	},
	"UnloadSpawnGroup":
	{
		"body":"UnloadSpawnGroup(${string_1})",
		"description":"UnloadSpawnGroup:\nUnload a spawn group by name\nreturn void",
		"prefix":"UnloadSpawnGroup"
	},
	"UnloadSpawnGroupByHandle":
	{
		"body":"UnloadSpawnGroupByHandle(${int_1})",
		"description":"UnloadSpawnGroupByHandle:\nUnload a spawn group by handle\nreturn void",
		"prefix":"UnloadSpawnGroupByHandle"
	},
	"UpdateEventPoints":
	{
		"body":"UpdateEventPoints(${hEventPointData})",
		"description":"UpdateEventPoints:\n( hEventPointData )\nreturn void",
		"prefix":"UpdateEventPoints"
	},
	"VectorAngles":
	{
		"body":"VectorAngles(${Vector_1})",
		"description":"VectorAngles:\n\nreturn QAngle",
		"prefix":"VectorAngles"
	},
	"VectorToAngles":
	{
		"body":"VectorToAngles(${withnoroll})",
		"description":"VectorToAngles:\nGet Qangles (with no roll) for a Vector.\nreturn QAngle",
		"prefix":"VectorToAngles"
	},
	"Warning":
	{
		"body":"Warning(${string_1})",
		"description":"Warning:\nPrint a warning\nreturn void",
		"prefix":"Warning"
	},
	"cvar_getf":
	{
		"body":"cvar_getf(${string_1})",
		"description":"cvar_getf:\nGets the value of the given cvar, as a float.\nreturn float",
		"prefix":"cvar_getf"
	},
	"cvar_setf":
	{
		"body":"cvar_setf(${string_1}, ${float_2})",
		"description":"cvar_setf:\nSets the value of the given cvar, as a float.\nreturn bool",
		"prefix":"cvar_setf"
	},
	"rr_AddDecisionRule":
	{
		"body":"rr_AddDecisionRule(${handle_1})",
		"description":"rr_AddDecisionRule:\nAdd a rule to the decision database.\nreturn bool",
		"prefix":"rr_AddDecisionRule"
	},
	"rr_CommitAIResponse":
	{
		"body":"rr_CommitAIResponse(${entity}, ${airesponse})",
		"description":"rr_CommitAIResponse:\nCommit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)\nreturn bool",
		"prefix":"rr_CommitAIResponse"
	},
	"rr_GetResponseTargets":
	{
		"body":"rr_GetResponseTargets()",
		"description":"rr_GetResponseTargets:\nRetrieve a table of all available expresser targets, in the form { name : handle, name: handle }.\nreturn handle",
		"prefix":"rr_GetResponseTargets"
	},
	"rr_QueryBestResponse":
	{
		"body":"rr_QueryBestResponse(${entity}, ${query}, ${handle_3})",
		"description":"rr_QueryBestResponse:\nParams: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found).\nreturn bool",
		"prefix":"rr_QueryBestResponse"
	},
	"ABILITY_TYPE_ATTRIBUTES":{"body":"ABILITY_TYPE_ATTRIBUTES", "description":"", "prefix": "ABILITY_TYPE_ATTRIBUTES"},
	"ABILITY_TYPE_BASIC":{"body":"ABILITY_TYPE_BASIC", "description":"", "prefix": "ABILITY_TYPE_BASIC"},
	"ABILITY_TYPE_HIDDEN":{"body":"ABILITY_TYPE_HIDDEN", "description":"", "prefix": "ABILITY_TYPE_HIDDEN"},
	"ABILITY_TYPE_ULTIMATE":{"body":"ABILITY_TYPE_ULTIMATE", "description":"", "prefix": "ABILITY_TYPE_ULTIMATE"},
	"ABILITY_CANNOT_BE_UPGRADED_AT_MAX":{"body":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX", "description":"", "prefix": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX"},
	"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE":{"body":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE", "description":"", "prefix": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"},
	"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL":{"body":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL", "description":"", "prefix": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"},
	"ABILITY_CAN_BE_UPGRADED":{"body":"ABILITY_CAN_BE_UPGRADED", "description":"", "prefix": "ABILITY_CAN_BE_UPGRADED"},
	"ABILITY_NOT_LEARNABLE":{"body":"ABILITY_NOT_LEARNABLE", "description":"", "prefix": "ABILITY_NOT_LEARNABLE"},
	"DOTA_ATTRIBUTE_AGILITY_ARMOR":{"body":"DOTA_ATTRIBUTE_AGILITY_ARMOR", "description":"", "prefix": "DOTA_ATTRIBUTE_AGILITY_ARMOR"},
	"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED":{"body":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED", "description":"", "prefix": "DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED"},
	"DOTA_ATTRIBUTE_AGILITY_DAMAGE":{"body":"DOTA_ATTRIBUTE_AGILITY_DAMAGE", "description":"", "prefix": "DOTA_ATTRIBUTE_AGILITY_DAMAGE"},
	"DOTA_ATTRIBUTE_AGILITY_MOVE_SPEED_PERCENT":{"body":"DOTA_ATTRIBUTE_AGILITY_MOVE_SPEED_PERCENT", "description":"", "prefix": "DOTA_ATTRIBUTE_AGILITY_MOVE_SPEED_PERCENT"},
	"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE":{"body":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE"},
	"DOTA_ATTRIBUTE_INTELLIGENCE_MAGIC_RESISTANCE_PERCENT":{"body":"DOTA_ATTRIBUTE_INTELLIGENCE_MAGIC_RESISTANCE_PERCENT", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLIGENCE_MAGIC_RESISTANCE_PERCENT"},
	"DOTA_ATTRIBUTE_INTELLIGENCE_MANA":{"body":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA"},
	"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN":{"body":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN"},
	"DOTA_ATTRIBUTE_INTELLIGENCE_SPELL_AMP_PERCENT":{"body":"DOTA_ATTRIBUTE_INTELLIGENCE_SPELL_AMP_PERCENT", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLIGENCE_SPELL_AMP_PERCENT"},
	"DOTA_ATTRIBUTE_STRENGTH_DAMAGE":{"body":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH_DAMAGE"},
	"DOTA_ATTRIBUTE_STRENGTH_HP":{"body":"DOTA_ATTRIBUTE_STRENGTH_HP", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH_HP"},
	"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN":{"body":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH_HP_REGEN"},
	"DOTA_ATTRIBUTE_STRENGTH_MAGIC_RESISTANCE_PERCENT":{"body":"DOTA_ATTRIBUTE_STRENGTH_MAGIC_RESISTANCE_PERCENT", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH_MAGIC_RESISTANCE_PERCENT"},
	"DOTA_ATTRIBUTE_STRENGTH_STATUS_RESISTANCE_PERCENT":{"body":"DOTA_ATTRIBUTE_STRENGTH_STATUS_RESISTANCE_PERCENT", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH_STATUS_RESISTANCE_PERCENT"},
	"DOTA_ATTRIBUTE_AGILITY":{"body":"DOTA_ATTRIBUTE_AGILITY", "description":"", "prefix": "DOTA_ATTRIBUTE_AGILITY"},
	"DOTA_ATTRIBUTE_INTELLECT":{"body":"DOTA_ATTRIBUTE_INTELLECT", "description":"", "prefix": "DOTA_ATTRIBUTE_INTELLECT"},
	"DOTA_ATTRIBUTE_INVALID":{"body":"DOTA_ATTRIBUTE_INVALID", "description":"", "prefix": "DOTA_ATTRIBUTE_INVALID"},
	"DOTA_ATTRIBUTE_MAX":{"body":"DOTA_ATTRIBUTE_MAX", "description":"", "prefix": "DOTA_ATTRIBUTE_MAX"},
	"DOTA_ATTRIBUTE_STRENGTH":{"body":"DOTA_ATTRIBUTE_STRENGTH", "description":"", "prefix": "DOTA_ATTRIBUTE_STRENGTH"},
	"DAMAGE_TYPE_ALL":{"body":"DAMAGE_TYPE_ALL", "description":"", "prefix": "DAMAGE_TYPE_ALL"},
	"DAMAGE_TYPE_HP_REMOVAL":{"body":"DAMAGE_TYPE_HP_REMOVAL", "description":"", "prefix": "DAMAGE_TYPE_HP_REMOVAL"},
	"DAMAGE_TYPE_MAGICAL":{"body":"DAMAGE_TYPE_MAGICAL", "description":"", "prefix": "DAMAGE_TYPE_MAGICAL"},
	"DAMAGE_TYPE_NONE":{"body":"DAMAGE_TYPE_NONE", "description":"", "prefix": "DAMAGE_TYPE_NONE"},
	"DAMAGE_TYPE_PHYSICAL":{"body":"DAMAGE_TYPE_PHYSICAL", "description":"", "prefix": "DAMAGE_TYPE_PHYSICAL"},
	"DAMAGE_TYPE_PURE":{"body":"DAMAGE_TYPE_PURE", "description":"", "prefix": "DAMAGE_TYPE_PURE"},
	"DOTA_ABILITY_SPEAK_CAST":{"body":"DOTA_ABILITY_SPEAK_CAST", "description":"", "prefix": "DOTA_ABILITY_SPEAK_CAST"},
	"DOTA_ABILITY_SPEAK_START_ACTION_PHASE":{"body":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE", "description":"", "prefix": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE"},
	"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK", "description":"", "prefix": "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK"},
	"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY", "description":"", "prefix": "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY"},
	"DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN":{"body":"DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN", "description":"", "prefix": "DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN"},
	"DOTA_DAMAGE_FLAG_HPLOSS":{"body":"DOTA_DAMAGE_FLAG_HPLOSS", "description":"", "prefix": "DOTA_DAMAGE_FLAG_HPLOSS"},
	"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR", "description":"", "prefix": "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR"},
	"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR", "description":"", "prefix": "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR"},
	"DOTA_DAMAGE_FLAG_NONE":{"body":"DOTA_DAMAGE_FLAG_NONE", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NONE"},
	"DOTA_DAMAGE_FLAG_NON_LETHAL":{"body":"DOTA_DAMAGE_FLAG_NON_LETHAL", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NON_LETHAL"},
	"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS":{"body":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS"},
	"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT":{"body":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT"},
	"DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION":{"body":"DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION"},
	"DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL":{"body":"DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL", "description":"", "prefix": "DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL"},
	"DOTA_DAMAGE_FLAG_PROPERTY_FIRE":{"body":"DOTA_DAMAGE_FLAG_PROPERTY_FIRE", "description":"", "prefix": "DOTA_DAMAGE_FLAG_PROPERTY_FIRE"},
	"DOTA_DAMAGE_FLAG_REFLECTION":{"body":"DOTA_DAMAGE_FLAG_REFLECTION", "description":"", "prefix": "DOTA_DAMAGE_FLAG_REFLECTION"},
	"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY":{"body":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY", "description":"", "prefix": "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY"},
	"DOTA_HUD_VISIBILITY_ACTION_MINIMAP":{"body":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP", "description":"", "prefix": "DOTA_HUD_VISIBILITY_ACTION_MINIMAP"},
	"DOTA_HUD_VISIBILITY_ACTION_PANEL":{"body":"DOTA_HUD_VISIBILITY_ACTION_PANEL", "description":"", "prefix": "DOTA_HUD_VISIBILITY_ACTION_PANEL"},
	"DOTA_HUD_VISIBILITY_COUNT":{"body":"DOTA_HUD_VISIBILITY_COUNT", "description":"", "prefix": "DOTA_HUD_VISIBILITY_COUNT"},
	"DOTA_HUD_VISIBILITY_ENDGAME":{"body":"DOTA_HUD_VISIBILITY_ENDGAME", "description":"", "prefix": "DOTA_HUD_VISIBILITY_ENDGAME"},
	"DOTA_HUD_VISIBILITY_ENDGAME_CHAT":{"body":"DOTA_HUD_VISIBILITY_ENDGAME_CHAT", "description":"", "prefix": "DOTA_HUD_VISIBILITY_ENDGAME_CHAT"},
	"DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK":{"body":"DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK", "description":"", "prefix": "DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK"},
	"DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME":{"body":"DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME", "description":"", "prefix": "DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME"},
	"DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS":{"body":"DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS", "description":"", "prefix": "DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS"},
	"DOTA_HUD_VISIBILITY_INVALID":{"body":"DOTA_HUD_VISIBILITY_INVALID", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVALID"},
	"DOTA_HUD_VISIBILITY_INVENTORY_COURIER":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_COURIER"},
	"DOTA_HUD_VISIBILITY_INVENTORY_GOLD":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_GOLD"},
	"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS"},
	"DOTA_HUD_VISIBILITY_INVENTORY_PANEL":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_PANEL"},
	"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT"},
	"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY"},
	"DOTA_HUD_VISIBILITY_INVENTORY_SHOP":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP", "description":"", "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_SHOP"},
	"DOTA_HUD_VISIBILITY_KILLCAM":{"body":"DOTA_HUD_VISIBILITY_KILLCAM", "description":"", "prefix": "DOTA_HUD_VISIBILITY_KILLCAM"},
	"DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI":{"body":"DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI", "description":"", "prefix": "DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI"},
	"DOTA_HUD_VISIBILITY_QUICK_STATS":{"body":"DOTA_HUD_VISIBILITY_QUICK_STATS", "description":"", "prefix": "DOTA_HUD_VISIBILITY_QUICK_STATS"},
	"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS":{"body":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS", "description":"", "prefix": "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS"},
	"DOTA_HUD_VISIBILITY_TOP_BAR":{"body":"DOTA_HUD_VISIBILITY_TOP_BAR", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_BAR"},
	"DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND":{"body":"DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND"},
	"DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM":{"body":"DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM"},
	"DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM":{"body":"DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM"},
	"DOTA_HUD_VISIBILITY_TOP_BAR_SCORE":{"body":"DOTA_HUD_VISIBILITY_TOP_BAR_SCORE", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_BAR_SCORE"},
	"DOTA_HUD_VISIBILITY_TOP_HEROES":{"body":"DOTA_HUD_VISIBILITY_TOP_HEROES", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_HEROES"},
	"DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS":{"body":"DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS"},
	"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD":{"body":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD"},
	"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY":{"body":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY", "description":"", "prefix": "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY"},
	"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN":{"body":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN", "description":"", "prefix": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"},
	"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND", "description":"", "prefix": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"},
	"DOTA_INVENTORY_ALLOW_MAIN":{"body":"DOTA_INVENTORY_ALLOW_MAIN", "description":"", "prefix": "DOTA_INVENTORY_ALLOW_MAIN"},
	"DOTA_INVENTORY_ALLOW_NONE":{"body":"DOTA_INVENTORY_ALLOW_NONE", "description":"", "prefix": "DOTA_INVENTORY_ALLOW_NONE"},
	"DOTA_INVENTORY_ALLOW_STASH":{"body":"DOTA_INVENTORY_ALLOW_STASH", "description":"", "prefix": "DOTA_INVENTORY_ALLOW_STASH"},
	"DOTA_INVENTORY_ALL_ACCESS":{"body":"DOTA_INVENTORY_ALL_ACCESS", "description":"", "prefix": "DOTA_INVENTORY_ALL_ACCESS"},
	"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND", "description":"", "prefix": "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND"},
	"DOTA_DEFAULT_MAX_TEAM":{"body":"DOTA_DEFAULT_MAX_TEAM", "description":"Default number of players per team.", "prefix": "DOTA_DEFAULT_MAX_TEAM"},
	"DOTA_DEFAULT_MAX_TEAM_PLAYERS":{"body":"DOTA_DEFAULT_MAX_TEAM_PLAYERS", "description":"Default number of non-spectator players supported.", "prefix": "DOTA_DEFAULT_MAX_TEAM_PLAYERS"},
	"DOTA_MAX_PLAYERS":{"body":"DOTA_MAX_PLAYERS", "description":"Max number of players connected to the server including spectators.", "prefix": "DOTA_MAX_PLAYERS"},
	"DOTA_MAX_PLAYER_TEAMS":{"body":"DOTA_MAX_PLAYER_TEAMS", "description":"Max number of player teams supported.", "prefix": "DOTA_MAX_PLAYER_TEAMS"},
	"DOTA_MAX_SPECTATOR_LOBBY_SIZE":{"body":"DOTA_MAX_SPECTATOR_LOBBY_SIZE", "description":"Max number of viewers in a spectator lobby.", "prefix": "DOTA_MAX_SPECTATOR_LOBBY_SIZE"},
	"DOTA_MAX_SPECTATOR_TEAM_SIZE":{"body":"DOTA_MAX_SPECTATOR_TEAM_SIZE", "description":"How many spectators can watch.", "prefix": "DOTA_MAX_SPECTATOR_TEAM_SIZE"},
	"DOTA_MAX_TEAM":{"body":"DOTA_MAX_TEAM", "description":"Max number of players per team.", "prefix": "DOTA_MAX_TEAM"},
	"DOTA_MAX_TEAM_PLAYERS":{"body":"DOTA_MAX_TEAM_PLAYERS", "description":"Max number of non-spectator players supported.", "prefix": "DOTA_MAX_TEAM_PLAYERS"},
	"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK", "description":"", "prefix": "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK"},
	"DOTA_MINIMAP_EVENT_BASE_GLYPHED":{"body":"DOTA_MINIMAP_EVENT_BASE_GLYPHED", "description":"", "prefix": "DOTA_MINIMAP_EVENT_BASE_GLYPHED"},
	"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK", "description":"", "prefix": "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK"},
	"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING", "description":"", "prefix": "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING"},
	"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING", "description":"", "prefix": "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING"},
	"DOTA_MINIMAP_EVENT_HINT_LOCATION":{"body":"DOTA_MINIMAP_EVENT_HINT_LOCATION", "description":"", "prefix": "DOTA_MINIMAP_EVENT_HINT_LOCATION"},
	"DOTA_MINIMAP_EVENT_RADAR":{"body":"DOTA_MINIMAP_EVENT_RADAR", "description":"", "prefix": "DOTA_MINIMAP_EVENT_RADAR"},
	"DOTA_MINIMAP_EVENT_RADAR_TARGET":{"body":"DOTA_MINIMAP_EVENT_RADAR_TARGET", "description":"", "prefix": "DOTA_MINIMAP_EVENT_RADAR_TARGET"},
	"DOTA_MINIMAP_EVENT_TEAMMATE_DIED":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED", "description":"", "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_DIED"},
	"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING", "description":"", "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING"},
	"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK", "description":"", "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK"},
	"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE", "description":"", "prefix": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE"},
	"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED", "description":"", "prefix": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED"},
	"MODIFIER_ATTRIBUTE_AURA_PRIORITY":{"body":"MODIFIER_ATTRIBUTE_AURA_PRIORITY", "description":"", "prefix": "MODIFIER_ATTRIBUTE_AURA_PRIORITY"},
	"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE":{"body":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE", "description":"", "prefix": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"},
	"MODIFIER_ATTRIBUTE_MULTIPLE":{"body":"MODIFIER_ATTRIBUTE_MULTIPLE", "description":"", "prefix": "MODIFIER_ATTRIBUTE_MULTIPLE"},
	"MODIFIER_ATTRIBUTE_NONE":{"body":"MODIFIER_ATTRIBUTE_NONE", "description":"", "prefix": "MODIFIER_ATTRIBUTE_NONE"},
	"MODIFIER_ATTRIBUTE_PERMANENT":{"body":"MODIFIER_ATTRIBUTE_PERMANENT", "description":"", "prefix": "MODIFIER_ATTRIBUTE_PERMANENT"},
	"DOTA_MUSIC_STATUS_BATTLE":{"body":"DOTA_MUSIC_STATUS_BATTLE", "description":"", "prefix": "DOTA_MUSIC_STATUS_BATTLE"},
	"DOTA_MUSIC_STATUS_DEAD":{"body":"DOTA_MUSIC_STATUS_DEAD", "description":"", "prefix": "DOTA_MUSIC_STATUS_DEAD"},
	"DOTA_MUSIC_STATUS_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_EXPLORATION", "description":"", "prefix": "DOTA_MUSIC_STATUS_EXPLORATION"},
	"DOTA_MUSIC_STATUS_LAST":{"body":"DOTA_MUSIC_STATUS_LAST", "description":"", "prefix": "DOTA_MUSIC_STATUS_LAST"},
	"DOTA_MUSIC_STATUS_NONE":{"body":"DOTA_MUSIC_STATUS_NONE", "description":"", "prefix": "DOTA_MUSIC_STATUS_NONE"},
	"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION", "description":"", "prefix": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"},
	"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1":{"body":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_1"},
	"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2":{"body":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_2"},
	"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3":{"body":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_3"},
	"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4":{"body":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_4"},
	"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION":{"body":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_HITLOCATION"},
	"DOTA_PROJECTILE_ATTACHMENT_LAST":{"body":"DOTA_PROJECTILE_ATTACHMENT_LAST", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_LAST"},
	"DOTA_PROJECTILE_ATTACHMENT_NONE":{"body":"DOTA_PROJECTILE_ATTACHMENT_NONE", "description":"", "prefix": "DOTA_PROJECTILE_ATTACHMENT_NONE"},
	"DOTA_ITEM_SLOT_1":{"body":"DOTA_ITEM_SLOT_1", "description":"", "prefix": "DOTA_ITEM_SLOT_1"},
	"DOTA_ITEM_SLOT_2":{"body":"DOTA_ITEM_SLOT_2", "description":"", "prefix": "DOTA_ITEM_SLOT_2"},
	"DOTA_ITEM_SLOT_3":{"body":"DOTA_ITEM_SLOT_3", "description":"", "prefix": "DOTA_ITEM_SLOT_3"},
	"DOTA_ITEM_SLOT_4":{"body":"DOTA_ITEM_SLOT_4", "description":"", "prefix": "DOTA_ITEM_SLOT_4"},
	"DOTA_ITEM_SLOT_5":{"body":"DOTA_ITEM_SLOT_5", "description":"", "prefix": "DOTA_ITEM_SLOT_5"},
	"DOTA_ITEM_SLOT_6":{"body":"DOTA_ITEM_SLOT_6", "description":"", "prefix": "DOTA_ITEM_SLOT_6"},
	"DOTA_ITEM_SLOT_7":{"body":"DOTA_ITEM_SLOT_7", "description":"", "prefix": "DOTA_ITEM_SLOT_7"},
	"DOTA_ITEM_SLOT_8":{"body":"DOTA_ITEM_SLOT_8", "description":"", "prefix": "DOTA_ITEM_SLOT_8"},
	"DOTA_ITEM_SLOT_9":{"body":"DOTA_ITEM_SLOT_9", "description":"", "prefix": "DOTA_ITEM_SLOT_9"},
	"DOTA_STASH_SLOT_1":{"body":"DOTA_STASH_SLOT_1", "description":"", "prefix": "DOTA_STASH_SLOT_1"},
	"DOTA_STASH_SLOT_2":{"body":"DOTA_STASH_SLOT_2", "description":"", "prefix": "DOTA_STASH_SLOT_2"},
	"DOTA_STASH_SLOT_3":{"body":"DOTA_STASH_SLOT_3", "description":"", "prefix": "DOTA_STASH_SLOT_3"},
	"DOTA_STASH_SLOT_4":{"body":"DOTA_STASH_SLOT_4", "description":"", "prefix": "DOTA_STASH_SLOT_4"},
	"DOTA_STASH_SLOT_5":{"body":"DOTA_STASH_SLOT_5", "description":"", "prefix": "DOTA_STASH_SLOT_5"},
	"DOTA_STASH_SLOT_6":{"body":"DOTA_STASH_SLOT_6", "description":"", "prefix": "DOTA_STASH_SLOT_6"},
	"DOTA_LOADOUT_TYPE_ABILITY1":{"body":"DOTA_LOADOUT_TYPE_ABILITY1", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY1"},
	"DOTA_LOADOUT_TYPE_ABILITY2":{"body":"DOTA_LOADOUT_TYPE_ABILITY2", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY2"},
	"DOTA_LOADOUT_TYPE_ABILITY3":{"body":"DOTA_LOADOUT_TYPE_ABILITY3", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY3"},
	"DOTA_LOADOUT_TYPE_ABILITY4":{"body":"DOTA_LOADOUT_TYPE_ABILITY4", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY4"},
	"DOTA_LOADOUT_TYPE_ABILITY_ATTACK":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK"},
	"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE"},
	"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS":{"body":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS"},
	"DOTA_LOADOUT_TYPE_ANNOUNCER":{"body":"DOTA_LOADOUT_TYPE_ANNOUNCER", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ANNOUNCER"},
	"DOTA_LOADOUT_TYPE_ARMOR":{"body":"DOTA_LOADOUT_TYPE_ARMOR", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ARMOR"},
	"DOTA_LOADOUT_TYPE_ARMS":{"body":"DOTA_LOADOUT_TYPE_ARMS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_ARMS"},
	"DOTA_LOADOUT_TYPE_BACK":{"body":"DOTA_LOADOUT_TYPE_BACK", "description":"", "prefix": "DOTA_LOADOUT_TYPE_BACK"},
	"DOTA_LOADOUT_TYPE_BELT":{"body":"DOTA_LOADOUT_TYPE_BELT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_BELT"},
	"DOTA_LOADOUT_TYPE_BLINK_EFFECT":{"body":"DOTA_LOADOUT_TYPE_BLINK_EFFECT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_BLINK_EFFECT"},
	"DOTA_LOADOUT_TYPE_BODY_HEAD":{"body":"DOTA_LOADOUT_TYPE_BODY_HEAD", "description":"", "prefix": "DOTA_LOADOUT_TYPE_BODY_HEAD"},
	"DOTA_LOADOUT_TYPE_COUNT":{"body":"DOTA_LOADOUT_TYPE_COUNT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_COUNT"},
	"DOTA_LOADOUT_TYPE_COURIER":{"body":"DOTA_LOADOUT_TYPE_COURIER", "description":"", "prefix": "DOTA_LOADOUT_TYPE_COURIER"},
	"DOTA_LOADOUT_TYPE_CURSOR_PACK":{"body":"DOTA_LOADOUT_TYPE_CURSOR_PACK", "description":"", "prefix": "DOTA_LOADOUT_TYPE_CURSOR_PACK"},
	"DOTA_LOADOUT_TYPE_DIRE_CREEPS":{"body":"DOTA_LOADOUT_TYPE_DIRE_CREEPS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_DIRE_CREEPS"},
	"DOTA_LOADOUT_TYPE_EMBLEM":{"body":"DOTA_LOADOUT_TYPE_EMBLEM", "description":"", "prefix": "DOTA_LOADOUT_TYPE_EMBLEM"},
	"DOTA_LOADOUT_TYPE_GLOVES":{"body":"DOTA_LOADOUT_TYPE_GLOVES", "description":"", "prefix": "DOTA_LOADOUT_TYPE_GLOVES"},
	"DOTA_LOADOUT_TYPE_HEAD":{"body":"DOTA_LOADOUT_TYPE_HEAD", "description":"", "prefix": "DOTA_LOADOUT_TYPE_HEAD"},
	"DOTA_LOADOUT_TYPE_HEROIC_STATUE":{"body":"DOTA_LOADOUT_TYPE_HEROIC_STATUE", "description":"", "prefix": "DOTA_LOADOUT_TYPE_HEROIC_STATUE"},
	"DOTA_LOADOUT_TYPE_HUD_SKIN":{"body":"DOTA_LOADOUT_TYPE_HUD_SKIN", "description":"", "prefix": "DOTA_LOADOUT_TYPE_HUD_SKIN"},
	"DOTA_LOADOUT_TYPE_INVALID":{"body":"DOTA_LOADOUT_TYPE_INVALID", "description":"", "prefix": "DOTA_LOADOUT_TYPE_INVALID"},
	"DOTA_LOADOUT_TYPE_LEGS":{"body":"DOTA_LOADOUT_TYPE_LEGS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_LEGS"},
	"DOTA_LOADOUT_TYPE_LOADING_SCREEN":{"body":"DOTA_LOADOUT_TYPE_LOADING_SCREEN", "description":"", "prefix": "DOTA_LOADOUT_TYPE_LOADING_SCREEN"},
	"DOTA_LOADOUT_TYPE_MEGA_KILLS":{"body":"DOTA_LOADOUT_TYPE_MEGA_KILLS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_MEGA_KILLS"},
	"DOTA_LOADOUT_TYPE_MISC":{"body":"DOTA_LOADOUT_TYPE_MISC", "description":"", "prefix": "DOTA_LOADOUT_TYPE_MISC"},
	"DOTA_LOADOUT_TYPE_MOUNT":{"body":"DOTA_LOADOUT_TYPE_MOUNT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_MOUNT"},
	"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER":{"body":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER", "description":"", "prefix": "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER"},
	"DOTA_LOADOUT_TYPE_MUSIC":{"body":"DOTA_LOADOUT_TYPE_MUSIC", "description":"", "prefix": "DOTA_LOADOUT_TYPE_MUSIC"},
	"DOTA_LOADOUT_TYPE_NECK":{"body":"DOTA_LOADOUT_TYPE_NECK", "description":"", "prefix": "DOTA_LOADOUT_TYPE_NECK"},
	"DOTA_LOADOUT_TYPE_NONE":{"body":"DOTA_LOADOUT_TYPE_NONE", "description":"", "prefix": "DOTA_LOADOUT_TYPE_NONE"},
	"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON", "description":"", "prefix": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON"},
	"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2", "description":"", "prefix": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2"},
	"DOTA_LOADOUT_TYPE_RADIANT_CREEPS":{"body":"DOTA_LOADOUT_TYPE_RADIANT_CREEPS", "description":"", "prefix": "DOTA_LOADOUT_TYPE_RADIANT_CREEPS"},
	"DOTA_LOADOUT_TYPE_SHAPESHIFT":{"body":"DOTA_LOADOUT_TYPE_SHAPESHIFT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_SHAPESHIFT"},
	"DOTA_LOADOUT_TYPE_SHOULDER":{"body":"DOTA_LOADOUT_TYPE_SHOULDER", "description":"", "prefix": "DOTA_LOADOUT_TYPE_SHOULDER"},
	"DOTA_LOADOUT_TYPE_SUMMON":{"body":"DOTA_LOADOUT_TYPE_SUMMON", "description":"", "prefix": "DOTA_LOADOUT_TYPE_SUMMON"},
	"DOTA_LOADOUT_TYPE_TAIL":{"body":"DOTA_LOADOUT_TYPE_TAIL", "description":"", "prefix": "DOTA_LOADOUT_TYPE_TAIL"},
	"DOTA_LOADOUT_TYPE_TAUNT":{"body":"DOTA_LOADOUT_TYPE_TAUNT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_TAUNT"},
	"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT":{"body":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT", "description":"", "prefix": "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT"},
	"DOTA_LOADOUT_TYPE_TERRAIN":{"body":"DOTA_LOADOUT_TYPE_TERRAIN", "description":"", "prefix": "DOTA_LOADOUT_TYPE_TERRAIN"},
	"DOTA_LOADOUT_TYPE_VOICE":{"body":"DOTA_LOADOUT_TYPE_VOICE", "description":"", "prefix": "DOTA_LOADOUT_TYPE_VOICE"},
	"DOTA_LOADOUT_TYPE_WARD":{"body":"DOTA_LOADOUT_TYPE_WARD", "description":"", "prefix": "DOTA_LOADOUT_TYPE_WARD"},
	"DOTA_LOADOUT_TYPE_WEAPON":{"body":"DOTA_LOADOUT_TYPE_WEAPON", "description":"", "prefix": "DOTA_LOADOUT_TYPE_WEAPON"},
	"DOTA_LOADOUT_TYPE_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_WEAPON2", "description":"", "prefix": "DOTA_LOADOUT_TYPE_WEAPON2"},
	"DOTA_LOADOUT_TYPE_WEATHER":{"body":"DOTA_LOADOUT_TYPE_WEATHER", "description":"", "prefix": "DOTA_LOADOUT_TYPE_WEATHER"},
	"DOTA_PLAYER_LOADOUT_END":{"body":"DOTA_PLAYER_LOADOUT_END", "description":"", "prefix": "DOTA_PLAYER_LOADOUT_END"},
	"DOTA_PLAYER_LOADOUT_START":{"body":"DOTA_PLAYER_LOADOUT_START", "description":"", "prefix": "DOTA_PLAYER_LOADOUT_START"},
	"DOTA_SPEECH_BAD_TEAM":{"body":"DOTA_SPEECH_BAD_TEAM", "description":"", "prefix": "DOTA_SPEECH_BAD_TEAM"},
	"DOTA_SPEECH_GOOD_TEAM":{"body":"DOTA_SPEECH_GOOD_TEAM", "description":"", "prefix": "DOTA_SPEECH_GOOD_TEAM"},
	"DOTA_SPEECH_RECIPIENT_TYPE_MAX":{"body":"DOTA_SPEECH_RECIPIENT_TYPE_MAX", "description":"", "prefix": "DOTA_SPEECH_RECIPIENT_TYPE_MAX"},
	"DOTA_SPEECH_SPECTATOR":{"body":"DOTA_SPEECH_SPECTATOR", "description":"", "prefix": "DOTA_SPEECH_SPECTATOR"},
	"DOTA_SPEECH_USER_ALL":{"body":"DOTA_SPEECH_USER_ALL", "description":"", "prefix": "DOTA_SPEECH_USER_ALL"},
	"DOTA_SPEECH_USER_INVALID":{"body":"DOTA_SPEECH_USER_INVALID", "description":"", "prefix": "DOTA_SPEECH_USER_INVALID"},
	"DOTA_SPEECH_USER_NEARBY":{"body":"DOTA_SPEECH_USER_NEARBY", "description":"", "prefix": "DOTA_SPEECH_USER_NEARBY"},
	"DOTA_SPEECH_USER_SINGLE":{"body":"DOTA_SPEECH_USER_SINGLE", "description":"", "prefix": "DOTA_SPEECH_USER_SINGLE"},
	"DOTA_SPEECH_USER_TEAM":{"body":"DOTA_SPEECH_USER_TEAM", "description":"", "prefix": "DOTA_SPEECH_USER_TEAM"},
	"DOTA_SPEECH_USER_TEAM_NEARBY":{"body":"DOTA_SPEECH_USER_TEAM_NEARBY", "description":"", "prefix": "DOTA_SPEECH_USER_TEAM_NEARBY"},
	"DOTA_TEAM_BADGUYS":{"body":"DOTA_TEAM_BADGUYS", "description":"", "prefix": "DOTA_TEAM_BADGUYS"},
	"DOTA_TEAM_COUNT":{"body":"DOTA_TEAM_COUNT", "description":"", "prefix": "DOTA_TEAM_COUNT"},
	"DOTA_TEAM_CUSTOM_1":{"body":"DOTA_TEAM_CUSTOM_1", "description":"", "prefix": "DOTA_TEAM_CUSTOM_1"},
	"DOTA_TEAM_CUSTOM_2":{"body":"DOTA_TEAM_CUSTOM_2", "description":"", "prefix": "DOTA_TEAM_CUSTOM_2"},
	"DOTA_TEAM_CUSTOM_3":{"body":"DOTA_TEAM_CUSTOM_3", "description":"", "prefix": "DOTA_TEAM_CUSTOM_3"},
	"DOTA_TEAM_CUSTOM_4":{"body":"DOTA_TEAM_CUSTOM_4", "description":"", "prefix": "DOTA_TEAM_CUSTOM_4"},
	"DOTA_TEAM_CUSTOM_5":{"body":"DOTA_TEAM_CUSTOM_5", "description":"", "prefix": "DOTA_TEAM_CUSTOM_5"},
	"DOTA_TEAM_CUSTOM_6":{"body":"DOTA_TEAM_CUSTOM_6", "description":"", "prefix": "DOTA_TEAM_CUSTOM_6"},
	"DOTA_TEAM_CUSTOM_7":{"body":"DOTA_TEAM_CUSTOM_7", "description":"", "prefix": "DOTA_TEAM_CUSTOM_7"},
	"DOTA_TEAM_CUSTOM_8":{"body":"DOTA_TEAM_CUSTOM_8", "description":"", "prefix": "DOTA_TEAM_CUSTOM_8"},
	"DOTA_TEAM_CUSTOM_COUNT":{"body":"DOTA_TEAM_CUSTOM_COUNT", "description":"", "prefix": "DOTA_TEAM_CUSTOM_COUNT"},
	"DOTA_TEAM_CUSTOM_MAX":{"body":"DOTA_TEAM_CUSTOM_MAX", "description":"", "prefix": "DOTA_TEAM_CUSTOM_MAX"},
	"DOTA_TEAM_CUSTOM_MIN":{"body":"DOTA_TEAM_CUSTOM_MIN", "description":"", "prefix": "DOTA_TEAM_CUSTOM_MIN"},
	"DOTA_TEAM_FIRST":{"body":"DOTA_TEAM_FIRST", "description":"", "prefix": "DOTA_TEAM_FIRST"},
	"DOTA_TEAM_GOODGUYS":{"body":"DOTA_TEAM_GOODGUYS", "description":"", "prefix": "DOTA_TEAM_GOODGUYS"},
	"DOTA_TEAM_NEUTRALS":{"body":"DOTA_TEAM_NEUTRALS", "description":"", "prefix": "DOTA_TEAM_NEUTRALS"},
	"DOTA_TEAM_NOTEAM":{"body":"DOTA_TEAM_NOTEAM", "description":"", "prefix": "DOTA_TEAM_NOTEAM"},
	"DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT":{"body":"DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT", "description":"", "prefix": "DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT"},
	"DOTA_UNIT_CAP_MELEE_ATTACK":{"body":"DOTA_UNIT_CAP_MELEE_ATTACK", "description":"", "prefix": "DOTA_UNIT_CAP_MELEE_ATTACK"},
	"DOTA_UNIT_CAP_NO_ATTACK":{"body":"DOTA_UNIT_CAP_NO_ATTACK", "description":"", "prefix": "DOTA_UNIT_CAP_NO_ATTACK"},
	"DOTA_UNIT_CAP_RANGED_ATTACK":{"body":"DOTA_UNIT_CAP_RANGED_ATTACK", "description":"", "prefix": "DOTA_UNIT_CAP_RANGED_ATTACK"},
	"DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL":{"body":"DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL", "description":"", "prefix": "DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL"},
	"DOTA_UNIT_CAP_MOVE_FLY":{"body":"DOTA_UNIT_CAP_MOVE_FLY", "description":"", "prefix": "DOTA_UNIT_CAP_MOVE_FLY"},
	"DOTA_UNIT_CAP_MOVE_GROUND":{"body":"DOTA_UNIT_CAP_MOVE_GROUND", "description":"", "prefix": "DOTA_UNIT_CAP_MOVE_GROUND"},
	"DOTA_UNIT_CAP_MOVE_NONE":{"body":"DOTA_UNIT_CAP_MOVE_NONE", "description":"", "prefix": "DOTA_UNIT_CAP_MOVE_NONE"},
	"DOTA_ABILITY_BEHAVIOR_AOE":{"body":"DOTA_ABILITY_BEHAVIOR_AOE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_AOE"},
	"DOTA_ABILITY_BEHAVIOR_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_ATTACK", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_ATTACK"},
	"DOTA_ABILITY_BEHAVIOR_AURA":{"body":"DOTA_ABILITY_BEHAVIOR_AURA", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_AURA"},
	"DOTA_ABILITY_BEHAVIOR_AUTOCAST":{"body":"DOTA_ABILITY_BEHAVIOR_AUTOCAST", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_AUTOCAST"},
	"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST":{"body":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST"},
	"DOTA_ABILITY_BEHAVIOR_CHANNELLED":{"body":"DOTA_ABILITY_BEHAVIOR_CHANNELLED", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_CHANNELLED"},
	"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL":{"body":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"},
	"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"},
	"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"},
	"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"},
	"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"},
	"DOTA_ABILITY_BEHAVIOR_HIDDEN":{"body":"DOTA_ABILITY_BEHAVIOR_HIDDEN", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_HIDDEN"},
	"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"},
	"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"},
	"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"},
	"DOTA_ABILITY_BEHAVIOR_IMMEDIATE":{"body":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE"},
	"DOTA_ABILITY_BEHAVIOR_ITEM":{"body":"DOTA_ABILITY_BEHAVIOR_ITEM", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_ITEM"},
	"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT"},
	"DOTA_ABILITY_BEHAVIOR_NONE":{"body":"DOTA_ABILITY_BEHAVIOR_NONE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_NONE"},
	"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN":{"body":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"},
	"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE":{"body":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"},
	"DOTA_ABILITY_BEHAVIOR_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_NO_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_NO_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"},
	"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_PASSIVE":{"body":"DOTA_ABILITY_BEHAVIOR_PASSIVE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_PASSIVE"},
	"DOTA_ABILITY_BEHAVIOR_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_POINT", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_POINT"},
	"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES":{"body":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"},
	"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES":{"body":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"},
	"DOTA_ABILITY_BEHAVIOR_TOGGLE":{"body":"DOTA_ABILITY_BEHAVIOR_TOGGLE", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_TOGGLE"},
	"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"},
	"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED":{"body":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"},
	"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING":{"body":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING", "description":"", "prefix": "DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"},
	"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":{"body":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP", "description":"", "prefix": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP"},
	"DOTA_GAMERULES_STATE_DISCONNECT":{"body":"DOTA_GAMERULES_STATE_DISCONNECT", "description":"", "prefix": "DOTA_GAMERULES_STATE_DISCONNECT"},
	"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":{"body":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS", "description":"", "prefix": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"},
	"DOTA_GAMERULES_STATE_HERO_SELECTION":{"body":"DOTA_GAMERULES_STATE_HERO_SELECTION", "description":"", "prefix": "DOTA_GAMERULES_STATE_HERO_SELECTION"},
	"DOTA_GAMERULES_STATE_INIT":{"body":"DOTA_GAMERULES_STATE_INIT", "description":"", "prefix": "DOTA_GAMERULES_STATE_INIT"},
	"DOTA_GAMERULES_STATE_POST_GAME":{"body":"DOTA_GAMERULES_STATE_POST_GAME", "description":"", "prefix": "DOTA_GAMERULES_STATE_POST_GAME"},
	"DOTA_GAMERULES_STATE_PRE_GAME":{"body":"DOTA_GAMERULES_STATE_PRE_GAME", "description":"", "prefix": "DOTA_GAMERULES_STATE_PRE_GAME"},
	"DOTA_GAMERULES_STATE_STRATEGY_TIME":{"body":"DOTA_GAMERULES_STATE_STRATEGY_TIME", "description":"", "prefix": "DOTA_GAMERULES_STATE_STRATEGY_TIME"},
	"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":{"body":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE", "description":"", "prefix": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE"},
	"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD":{"body":"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD", "description":"", "prefix": "DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD"},
	"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD":{"body":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD", "description":"", "prefix": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"},
	"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT":{"body":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"},
	"DOTA_HEROPICK_STATE_AP_SELECT":{"body":"DOTA_HEROPICK_STATE_AP_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_AP_SELECT"},
	"DOTA_HEROPICK_STATE_AR_SELECT":{"body":"DOTA_HEROPICK_STATE_AR_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_AR_SELECT"},
	"DOTA_HEROPICK_STATE_BD_SELECT":{"body":"DOTA_HEROPICK_STATE_BD_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_BD_SELECT"},
	"DOTA_HEROPICK_STATE_CD_BAN1":{"body":"DOTA_HEROPICK_STATE_CD_BAN1", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN1"},
	"DOTA_HEROPICK_STATE_CD_BAN2":{"body":"DOTA_HEROPICK_STATE_CD_BAN2", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN2"},
	"DOTA_HEROPICK_STATE_CD_BAN3":{"body":"DOTA_HEROPICK_STATE_CD_BAN3", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN3"},
	"DOTA_HEROPICK_STATE_CD_BAN4":{"body":"DOTA_HEROPICK_STATE_CD_BAN4", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN4"},
	"DOTA_HEROPICK_STATE_CD_BAN5":{"body":"DOTA_HEROPICK_STATE_CD_BAN5", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN5"},
	"DOTA_HEROPICK_STATE_CD_BAN6":{"body":"DOTA_HEROPICK_STATE_CD_BAN6", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_BAN6"},
	"DOTA_HEROPICK_STATE_CD_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK"},
	"DOTA_HEROPICK_STATE_CD_INTRO":{"body":"DOTA_HEROPICK_STATE_CD_INTRO", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_INTRO"},
	"DOTA_HEROPICK_STATE_CD_PICK":{"body":"DOTA_HEROPICK_STATE_CD_PICK", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_PICK"},
	"DOTA_HEROPICK_STATE_CD_SELECT1":{"body":"DOTA_HEROPICK_STATE_CD_SELECT1", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT1"},
	"DOTA_HEROPICK_STATE_CD_SELECT10":{"body":"DOTA_HEROPICK_STATE_CD_SELECT10", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT10"},
	"DOTA_HEROPICK_STATE_CD_SELECT2":{"body":"DOTA_HEROPICK_STATE_CD_SELECT2", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT2"},
	"DOTA_HEROPICK_STATE_CD_SELECT3":{"body":"DOTA_HEROPICK_STATE_CD_SELECT3", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT3"},
	"DOTA_HEROPICK_STATE_CD_SELECT4":{"body":"DOTA_HEROPICK_STATE_CD_SELECT4", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT4"},
	"DOTA_HEROPICK_STATE_CD_SELECT5":{"body":"DOTA_HEROPICK_STATE_CD_SELECT5", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT5"},
	"DOTA_HEROPICK_STATE_CD_SELECT6":{"body":"DOTA_HEROPICK_STATE_CD_SELECT6", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT6"},
	"DOTA_HEROPICK_STATE_CD_SELECT7":{"body":"DOTA_HEROPICK_STATE_CD_SELECT7", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT7"},
	"DOTA_HEROPICK_STATE_CD_SELECT8":{"body":"DOTA_HEROPICK_STATE_CD_SELECT8", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT8"},
	"DOTA_HEROPICK_STATE_CD_SELECT9":{"body":"DOTA_HEROPICK_STATE_CD_SELECT9", "description":"", "prefix": "DOTA_HEROPICK_STATE_CD_SELECT9"},
	"DOTA_HEROPICK_STATE_CM_BAN1":{"body":"DOTA_HEROPICK_STATE_CM_BAN1", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN1"},
	"DOTA_HEROPICK_STATE_CM_BAN10":{"body":"DOTA_HEROPICK_STATE_CM_BAN10", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN10"},
	"DOTA_HEROPICK_STATE_CM_BAN11":{"body":"DOTA_HEROPICK_STATE_CM_BAN11", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN11"},
	"DOTA_HEROPICK_STATE_CM_BAN12":{"body":"DOTA_HEROPICK_STATE_CM_BAN12", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN12"},
	"DOTA_HEROPICK_STATE_CM_BAN2":{"body":"DOTA_HEROPICK_STATE_CM_BAN2", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN2"},
	"DOTA_HEROPICK_STATE_CM_BAN3":{"body":"DOTA_HEROPICK_STATE_CM_BAN3", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN3"},
	"DOTA_HEROPICK_STATE_CM_BAN4":{"body":"DOTA_HEROPICK_STATE_CM_BAN4", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN4"},
	"DOTA_HEROPICK_STATE_CM_BAN5":{"body":"DOTA_HEROPICK_STATE_CM_BAN5", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN5"},
	"DOTA_HEROPICK_STATE_CM_BAN6":{"body":"DOTA_HEROPICK_STATE_CM_BAN6", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN6"},
	"DOTA_HEROPICK_STATE_CM_BAN7":{"body":"DOTA_HEROPICK_STATE_CM_BAN7", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN7"},
	"DOTA_HEROPICK_STATE_CM_BAN8":{"body":"DOTA_HEROPICK_STATE_CM_BAN8", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN8"},
	"DOTA_HEROPICK_STATE_CM_BAN9":{"body":"DOTA_HEROPICK_STATE_CM_BAN9", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_BAN9"},
	"DOTA_HEROPICK_STATE_CM_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK"},
	"DOTA_HEROPICK_STATE_CM_INTRO":{"body":"DOTA_HEROPICK_STATE_CM_INTRO", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_INTRO"},
	"DOTA_HEROPICK_STATE_CM_PICK":{"body":"DOTA_HEROPICK_STATE_CM_PICK", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_PICK"},
	"DOTA_HEROPICK_STATE_CM_SELECT1":{"body":"DOTA_HEROPICK_STATE_CM_SELECT1", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT1"},
	"DOTA_HEROPICK_STATE_CM_SELECT10":{"body":"DOTA_HEROPICK_STATE_CM_SELECT10", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT10"},
	"DOTA_HEROPICK_STATE_CM_SELECT2":{"body":"DOTA_HEROPICK_STATE_CM_SELECT2", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT2"},
	"DOTA_HEROPICK_STATE_CM_SELECT3":{"body":"DOTA_HEROPICK_STATE_CM_SELECT3", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT3"},
	"DOTA_HEROPICK_STATE_CM_SELECT4":{"body":"DOTA_HEROPICK_STATE_CM_SELECT4", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT4"},
	"DOTA_HEROPICK_STATE_CM_SELECT5":{"body":"DOTA_HEROPICK_STATE_CM_SELECT5", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT5"},
	"DOTA_HEROPICK_STATE_CM_SELECT6":{"body":"DOTA_HEROPICK_STATE_CM_SELECT6", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT6"},
	"DOTA_HEROPICK_STATE_CM_SELECT7":{"body":"DOTA_HEROPICK_STATE_CM_SELECT7", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT7"},
	"DOTA_HEROPICK_STATE_CM_SELECT8":{"body":"DOTA_HEROPICK_STATE_CM_SELECT8", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT8"},
	"DOTA_HEROPICK_STATE_CM_SELECT9":{"body":"DOTA_HEROPICK_STATE_CM_SELECT9", "description":"", "prefix": "DOTA_HEROPICK_STATE_CM_SELECT9"},
	"DOTA_HEROPICK_STATE_COUNT":{"body":"DOTA_HEROPICK_STATE_COUNT", "description":"", "prefix": "DOTA_HEROPICK_STATE_COUNT"},
	"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES":{"body":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES", "description":"", "prefix": "DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES"},
	"DOTA_HEROPICK_STATE_FH_SELECT":{"body":"DOTA_HEROPICK_STATE_FH_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_FH_SELECT"},
	"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED":{"body":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED", "description":"", "prefix": "DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED"},
	"DOTA_HEROPICK_STATE_MO_SELECT":{"body":"DOTA_HEROPICK_STATE_MO_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_MO_SELECT"},
	"DOTA_HEROPICK_STATE_NONE":{"body":"DOTA_HEROPICK_STATE_NONE", "description":"", "prefix": "DOTA_HEROPICK_STATE_NONE"},
	"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED":{"body":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED", "description":"", "prefix": "DOTA_HEROPICK_STATE_RD_SELECT_UNUSED"},
	"DOTA_HEROPICK_STATE_SD_SELECT":{"body":"DOTA_HEROPICK_STATE_SD_SELECT", "description":"", "prefix": "DOTA_HEROPICK_STATE_SD_SELECT"},
	"DOTA_HEROPICK_STATE_SELECT_PENALTY":{"body":"DOTA_HEROPICK_STATE_SELECT_PENALTY", "description":"", "prefix": "DOTA_HEROPICK_STATE_SELECT_PENALTY"},
	"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT":{"body":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT", "description":"", "prefix": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"},
	"DOTA_HERO_PICK_STATE_ARDM_SELECT":{"body":"DOTA_HERO_PICK_STATE_ARDM_SELECT", "description":"", "prefix": "DOTA_HERO_PICK_STATE_ARDM_SELECT"},
	"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT":{"body":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT", "description":"", "prefix": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"},
	"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH", "description":"", "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"},
	"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST", "description":"", "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"},
	"DOTA_MOTION_CONTROLLER_PRIORITY_LOW":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW", "description":"", "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW"},
	"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST", "description":"", "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"},
	"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM", "description":"", "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"},
	"DOTA_RUNE_ARCANE":{"body":"DOTA_RUNE_ARCANE", "description":"", "prefix": "DOTA_RUNE_ARCANE"},
	"DOTA_RUNE_BOUNTY":{"body":"DOTA_RUNE_BOUNTY", "description":"", "prefix": "DOTA_RUNE_BOUNTY"},
	"DOTA_RUNE_COUNT":{"body":"DOTA_RUNE_COUNT", "description":"", "prefix": "DOTA_RUNE_COUNT"},
	"DOTA_RUNE_DOUBLEDAMAGE":{"body":"DOTA_RUNE_DOUBLEDAMAGE", "description":"", "prefix": "DOTA_RUNE_DOUBLEDAMAGE"},
	"DOTA_RUNE_HASTE":{"body":"DOTA_RUNE_HASTE", "description":"", "prefix": "DOTA_RUNE_HASTE"},
	"DOTA_RUNE_ILLUSION":{"body":"DOTA_RUNE_ILLUSION", "description":"", "prefix": "DOTA_RUNE_ILLUSION"},
	"DOTA_RUNE_INVALID":{"body":"DOTA_RUNE_INVALID", "description":"", "prefix": "DOTA_RUNE_INVALID"},
	"DOTA_RUNE_INVISIBILITY":{"body":"DOTA_RUNE_INVISIBILITY", "description":"", "prefix": "DOTA_RUNE_INVISIBILITY"},
	"DOTA_RUNE_REGENERATION":{"body":"DOTA_RUNE_REGENERATION", "description":"", "prefix": "DOTA_RUNE_REGENERATION"},
	"DOTA_SHOP_CUSTOM":{"body":"DOTA_SHOP_CUSTOM", "description":"", "prefix": "DOTA_SHOP_CUSTOM"},
	"DOTA_SHOP_GROUND":{"body":"DOTA_SHOP_GROUND", "description":"", "prefix": "DOTA_SHOP_GROUND"},
	"DOTA_SHOP_HOME":{"body":"DOTA_SHOP_HOME", "description":"", "prefix": "DOTA_SHOP_HOME"},
	"DOTA_SHOP_NONE":{"body":"DOTA_SHOP_NONE", "description":"", "prefix": "DOTA_SHOP_NONE"},
	"DOTA_SHOP_SECRET":{"body":"DOTA_SHOP_SECRET", "description":"", "prefix": "DOTA_SHOP_SECRET"},
	"DOTA_SHOP_SECRET2":{"body":"DOTA_SHOP_SECRET2", "description":"", "prefix": "DOTA_SHOP_SECRET2"},
	"DOTA_SHOP_SIDE":{"body":"DOTA_SHOP_SIDE", "description":"", "prefix": "DOTA_SHOP_SIDE"},
	"DOTA_SHOP_SIDE2":{"body":"DOTA_SHOP_SIDE2", "description":"", "prefix": "DOTA_SHOP_SIDE2"},
	"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP":{"body":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"},
	"DOTA_UNIT_TARGET_FLAG_DEAD":{"body":"DOTA_UNIT_TARGET_FLAG_DEAD", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_DEAD"},
	"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE":{"body":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"},
	"DOTA_UNIT_TARGET_FLAG_INVULNERABLE":{"body":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE"},
	"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"},
	"DOTA_UNIT_TARGET_FLAG_MANA_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY"},
	"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"},
	"DOTA_UNIT_TARGET_FLAG_NONE":{"body":"DOTA_UNIT_TARGET_FLAG_NONE", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NONE"},
	"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"},
	"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"},
	"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"},
	"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"},
	"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"},
	"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"},
	"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"},
	"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"},
	"DOTA_UNIT_TARGET_FLAG_NO_INVIS":{"body":"DOTA_UNIT_TARGET_FLAG_NO_INVIS", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_NO_INVIS"},
	"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD":{"body":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"},
	"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED":{"body":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"},
	"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"},
	"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"},
	"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS":{"body":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS", "description":"", "prefix": "DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS"},
	"DOTA_UNIT_TARGET_TEAM_BOTH":{"body":"DOTA_UNIT_TARGET_TEAM_BOTH", "description":"", "prefix": "DOTA_UNIT_TARGET_TEAM_BOTH"},
	"DOTA_UNIT_TARGET_TEAM_CUSTOM":{"body":"DOTA_UNIT_TARGET_TEAM_CUSTOM", "description":"", "prefix": "DOTA_UNIT_TARGET_TEAM_CUSTOM"},
	"DOTA_UNIT_TARGET_TEAM_ENEMY":{"body":"DOTA_UNIT_TARGET_TEAM_ENEMY", "description":"", "prefix": "DOTA_UNIT_TARGET_TEAM_ENEMY"},
	"DOTA_UNIT_TARGET_TEAM_FRIENDLY":{"body":"DOTA_UNIT_TARGET_TEAM_FRIENDLY", "description":"", "prefix": "DOTA_UNIT_TARGET_TEAM_FRIENDLY"},
	"DOTA_UNIT_TARGET_TEAM_NONE":{"body":"DOTA_UNIT_TARGET_TEAM_NONE", "description":"", "prefix": "DOTA_UNIT_TARGET_TEAM_NONE"},
	"DOTA_UNIT_TARGET_ALL":{"body":"DOTA_UNIT_TARGET_ALL", "description":"", "prefix": "DOTA_UNIT_TARGET_ALL"},
	"DOTA_UNIT_TARGET_BASIC":{"body":"DOTA_UNIT_TARGET_BASIC", "description":"", "prefix": "DOTA_UNIT_TARGET_BASIC"},
	"DOTA_UNIT_TARGET_BUILDING":{"body":"DOTA_UNIT_TARGET_BUILDING", "description":"", "prefix": "DOTA_UNIT_TARGET_BUILDING"},
	"DOTA_UNIT_TARGET_COURIER":{"body":"DOTA_UNIT_TARGET_COURIER", "description":"", "prefix": "DOTA_UNIT_TARGET_COURIER"},
	"DOTA_UNIT_TARGET_CREEP":{"body":"DOTA_UNIT_TARGET_CREEP", "description":"", "prefix": "DOTA_UNIT_TARGET_CREEP"},
	"DOTA_UNIT_TARGET_CUSTOM":{"body":"DOTA_UNIT_TARGET_CUSTOM", "description":"", "prefix": "DOTA_UNIT_TARGET_CUSTOM"},
	"DOTA_UNIT_TARGET_HERO":{"body":"DOTA_UNIT_TARGET_HERO", "description":"", "prefix": "DOTA_UNIT_TARGET_HERO"},
	"DOTA_UNIT_TARGET_NONE":{"body":"DOTA_UNIT_TARGET_NONE", "description":"", "prefix": "DOTA_UNIT_TARGET_NONE"},
	"DOTA_UNIT_TARGET_OTHER":{"body":"DOTA_UNIT_TARGET_OTHER", "description":"", "prefix": "DOTA_UNIT_TARGET_OTHER"},
	"DOTA_UNIT_TARGET_TREE":{"body":"DOTA_UNIT_TARGET_TREE", "description":"", "prefix": "DOTA_UNIT_TARGET_TREE"},
	"DOTA_DAMAGE_CATEGORY_ATTACK":{"body":"DOTA_DAMAGE_CATEGORY_ATTACK", "description":"", "prefix": "DOTA_DAMAGE_CATEGORY_ATTACK"},
	"DOTA_DAMAGE_CATEGORY_SPELL":{"body":"DOTA_DAMAGE_CATEGORY_SPELL", "description":"", "prefix": "DOTA_DAMAGE_CATEGORY_SPELL"},
	"DOTA_DEFAULT_UI_ACTION_MINIMAP":{"body":"DOTA_DEFAULT_UI_ACTION_MINIMAP", "description":"", "prefix": "DOTA_DEFAULT_UI_ACTION_MINIMAP"},
	"DOTA_DEFAULT_UI_ACTION_PANEL":{"body":"DOTA_DEFAULT_UI_ACTION_PANEL", "description":"", "prefix": "DOTA_DEFAULT_UI_ACTION_PANEL"},
	"DOTA_DEFAULT_UI_ELEMENT_COUNT":{"body":"DOTA_DEFAULT_UI_ELEMENT_COUNT", "description":"", "prefix": "DOTA_DEFAULT_UI_ELEMENT_COUNT"},
	"DOTA_DEFAULT_UI_ENDGAME":{"body":"DOTA_DEFAULT_UI_ENDGAME", "description":"", "prefix": "DOTA_DEFAULT_UI_ENDGAME"},
	"DOTA_DEFAULT_UI_ENDGAME_CHAT":{"body":"DOTA_DEFAULT_UI_ENDGAME_CHAT", "description":"", "prefix": "DOTA_DEFAULT_UI_ENDGAME_CHAT"},
	"DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD":{"body":"DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD", "description":"", "prefix": "DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD"},
	"DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK":{"body":"DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK", "description":"", "prefix": "DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK"},
	"DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME":{"body":"DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME", "description":"", "prefix": "DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME"},
	"DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS":{"body":"DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS", "description":"", "prefix": "DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS"},
	"DOTA_DEFAULT_UI_INVALID":{"body":"DOTA_DEFAULT_UI_INVALID", "description":"", "prefix": "DOTA_DEFAULT_UI_INVALID"},
	"DOTA_DEFAULT_UI_INVENTORY_COURIER":{"body":"DOTA_DEFAULT_UI_INVENTORY_COURIER", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_COURIER"},
	"DOTA_DEFAULT_UI_INVENTORY_GOLD":{"body":"DOTA_DEFAULT_UI_INVENTORY_GOLD", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_GOLD"},
	"DOTA_DEFAULT_UI_INVENTORY_ITEMS":{"body":"DOTA_DEFAULT_UI_INVENTORY_ITEMS", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_ITEMS"},
	"DOTA_DEFAULT_UI_INVENTORY_PANEL":{"body":"DOTA_DEFAULT_UI_INVENTORY_PANEL", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_PANEL"},
	"DOTA_DEFAULT_UI_INVENTORY_PROTECT":{"body":"DOTA_DEFAULT_UI_INVENTORY_PROTECT", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_PROTECT"},
	"DOTA_DEFAULT_UI_INVENTORY_QUICKBUY":{"body":"DOTA_DEFAULT_UI_INVENTORY_QUICKBUY", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_QUICKBUY"},
	"DOTA_DEFAULT_UI_INVENTORY_SHOP":{"body":"DOTA_DEFAULT_UI_INVENTORY_SHOP", "description":"", "prefix": "DOTA_DEFAULT_UI_INVENTORY_SHOP"},
	"DOTA_DEFAULT_UI_KILLCAM":{"body":"DOTA_DEFAULT_UI_KILLCAM", "description":"", "prefix": "DOTA_DEFAULT_UI_KILLCAM"},
	"DOTA_DEFAULT_UI_PREGAME_STRATEGYUI":{"body":"DOTA_DEFAULT_UI_PREGAME_STRATEGYUI", "description":"", "prefix": "DOTA_DEFAULT_UI_PREGAME_STRATEGYUI"},
	"DOTA_DEFAULT_UI_QUICK_STATS":{"body":"DOTA_DEFAULT_UI_QUICK_STATS", "description":"", "prefix": "DOTA_DEFAULT_UI_QUICK_STATS"},
	"DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS":{"body":"DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS", "description":"", "prefix": "DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS"},
	"DOTA_DEFAULT_UI_TOP_BAR":{"body":"DOTA_DEFAULT_UI_TOP_BAR", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_BAR"},
	"DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND":{"body":"DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND"},
	"DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM":{"body":"DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM"},
	"DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM":{"body":"DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM"},
	"DOTA_DEFAULT_UI_TOP_BAR_SCORE":{"body":"DOTA_DEFAULT_UI_TOP_BAR_SCORE", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_BAR_SCORE"},
	"DOTA_DEFAULT_UI_TOP_HEROES":{"body":"DOTA_DEFAULT_UI_TOP_HEROES", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_HEROES"},
	"DOTA_DEFAULT_UI_TOP_MENU_BUTTONS":{"body":"DOTA_DEFAULT_UI_TOP_MENU_BUTTONS", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_MENU_BUTTONS"},
	"DOTA_DEFAULT_UI_TOP_TIMEOFDAY":{"body":"DOTA_DEFAULT_UI_TOP_TIMEOFDAY", "description":"", "prefix": "DOTA_DEFAULT_UI_TOP_TIMEOFDAY"},
	"DOTA_ModifyGold_AbandonedRedistribute":{"body":"DOTA_ModifyGold_AbandonedRedistribute", "description":"", "prefix": "DOTA_ModifyGold_AbandonedRedistribute"},
	"DOTA_ModifyGold_AbilityCost":{"body":"DOTA_ModifyGold_AbilityCost", "description":"", "prefix": "DOTA_ModifyGold_AbilityCost"},
	"DOTA_ModifyGold_Building":{"body":"DOTA_ModifyGold_Building", "description":"", "prefix": "DOTA_ModifyGold_Building"},
	"DOTA_ModifyGold_Buyback":{"body":"DOTA_ModifyGold_Buyback", "description":"", "prefix": "DOTA_ModifyGold_Buyback"},
	"DOTA_ModifyGold_CheatCommand":{"body":"DOTA_ModifyGold_CheatCommand", "description":"", "prefix": "DOTA_ModifyGold_CheatCommand"},
	"DOTA_ModifyGold_CourierKill":{"body":"DOTA_ModifyGold_CourierKill", "description":"", "prefix": "DOTA_ModifyGold_CourierKill"},
	"DOTA_ModifyGold_CreepKill":{"body":"DOTA_ModifyGold_CreepKill", "description":"", "prefix": "DOTA_ModifyGold_CreepKill"},
	"DOTA_ModifyGold_Death":{"body":"DOTA_ModifyGold_Death", "description":"", "prefix": "DOTA_ModifyGold_Death"},
	"DOTA_ModifyGold_GameTick":{"body":"DOTA_ModifyGold_GameTick", "description":"", "prefix": "DOTA_ModifyGold_GameTick"},
	"DOTA_ModifyGold_HeroKill":{"body":"DOTA_ModifyGold_HeroKill", "description":"", "prefix": "DOTA_ModifyGold_HeroKill"},
	"DOTA_ModifyGold_PurchaseConsumable":{"body":"DOTA_ModifyGold_PurchaseConsumable", "description":"", "prefix": "DOTA_ModifyGold_PurchaseConsumable"},
	"DOTA_ModifyGold_PurchaseItem":{"body":"DOTA_ModifyGold_PurchaseItem", "description":"", "prefix": "DOTA_ModifyGold_PurchaseItem"},
	"DOTA_ModifyGold_RoshanKill":{"body":"DOTA_ModifyGold_RoshanKill", "description":"", "prefix": "DOTA_ModifyGold_RoshanKill"},
	"DOTA_ModifyGold_SelectionPenalty":{"body":"DOTA_ModifyGold_SelectionPenalty", "description":"", "prefix": "DOTA_ModifyGold_SelectionPenalty"},
	"DOTA_ModifyGold_SellItem":{"body":"DOTA_ModifyGold_SellItem", "description":"", "prefix": "DOTA_ModifyGold_SellItem"},
	"DOTA_ModifyGold_SharedGold":{"body":"DOTA_ModifyGold_SharedGold", "description":"", "prefix": "DOTA_ModifyGold_SharedGold"},
	"DOTA_ModifyGold_Unspecified":{"body":"DOTA_ModifyGold_Unspecified", "description":"", "prefix": "DOTA_ModifyGold_Unspecified"},
	"DOTA_ModifyXP_CreepKill":{"body":"DOTA_ModifyXP_CreepKill", "description":"", "prefix": "DOTA_ModifyXP_CreepKill"},
	"DOTA_ModifyXP_HeroKill":{"body":"DOTA_ModifyXP_HeroKill", "description":"", "prefix": "DOTA_ModifyXP_HeroKill"},
	"DOTA_ModifyXP_RoshanKill":{"body":"DOTA_ModifyXP_RoshanKill", "description":"", "prefix": "DOTA_ModifyXP_RoshanKill"},
	"DOTA_ModifyXP_Unspecified":{"body":"DOTA_ModifyXP_Unspecified", "description":"", "prefix": "DOTA_ModifyXP_Unspecified"},
	"ITEM_FULLY_SHAREABLE":{"body":"ITEM_FULLY_SHAREABLE", "description":"", "prefix": "ITEM_FULLY_SHAREABLE"},
	"ITEM_NOT_SHAREABLE":{"body":"ITEM_NOT_SHAREABLE", "description":"", "prefix": "ITEM_NOT_SHAREABLE"},
	"ITEM_PARTIALLY_SHAREABLE":{"body":"ITEM_PARTIALLY_SHAREABLE", "description":"", "prefix": "ITEM_PARTIALLY_SHAREABLE"},
	"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END", "description":"", "prefix": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"},
	"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START", "description":"", "prefix": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"},
	"ACT_DOTA_ALCHEMIST_CONCOCTION":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION", "description":"", "prefix": "ACT_DOTA_ALCHEMIST_CONCOCTION"},
	"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW", "description":"", "prefix": "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"},
	"ACT_DOTA_AMBUSH":{"body":"ACT_DOTA_AMBUSH", "description":"", "prefix": "ACT_DOTA_AMBUSH"},
	"ACT_DOTA_ANCESTRAL_SPIRIT":{"body":"ACT_DOTA_ANCESTRAL_SPIRIT", "description":"", "prefix": "ACT_DOTA_ANCESTRAL_SPIRIT"},
	"ACT_DOTA_ARCTIC_BURN_END":{"body":"ACT_DOTA_ARCTIC_BURN_END", "description":"", "prefix": "ACT_DOTA_ARCTIC_BURN_END"},
	"ACT_DOTA_AREA_DENY":{"body":"ACT_DOTA_AREA_DENY", "description":"", "prefix": "ACT_DOTA_AREA_DENY"},
	"ACT_DOTA_ATTACK":{"body":"ACT_DOTA_ATTACK", "description":"", "prefix": "ACT_DOTA_ATTACK"},
	"ACT_DOTA_ATTACK2":{"body":"ACT_DOTA_ATTACK2", "description":"", "prefix": "ACT_DOTA_ATTACK2"},
	"ACT_DOTA_ATTACK_EVENT":{"body":"ACT_DOTA_ATTACK_EVENT", "description":"", "prefix": "ACT_DOTA_ATTACK_EVENT"},
	"ACT_DOTA_ATTACK_EVENT_BASH":{"body":"ACT_DOTA_ATTACK_EVENT_BASH", "description":"", "prefix": "ACT_DOTA_ATTACK_EVENT_BASH"},
	"ACT_DOTA_AW_MAGNETIC_FIELD":{"body":"ACT_DOTA_AW_MAGNETIC_FIELD", "description":"", "prefix": "ACT_DOTA_AW_MAGNETIC_FIELD"},
	"ACT_DOTA_BELLYACHE_END":{"body":"ACT_DOTA_BELLYACHE_END", "description":"", "prefix": "ACT_DOTA_BELLYACHE_END"},
	"ACT_DOTA_BELLYACHE_LOOP":{"body":"ACT_DOTA_BELLYACHE_LOOP", "description":"", "prefix": "ACT_DOTA_BELLYACHE_LOOP"},
	"ACT_DOTA_BELLYACHE_START":{"body":"ACT_DOTA_BELLYACHE_START", "description":"", "prefix": "ACT_DOTA_BELLYACHE_START"},
	"ACT_DOTA_BLINK_DAGGER":{"body":"ACT_DOTA_BLINK_DAGGER", "description":"", "prefix": "ACT_DOTA_BLINK_DAGGER"},
	"ACT_DOTA_BLINK_DAGGER_END":{"body":"ACT_DOTA_BLINK_DAGGER_END", "description":"", "prefix": "ACT_DOTA_BLINK_DAGGER_END"},
	"ACT_DOTA_BRIDGE_DESTROY":{"body":"ACT_DOTA_BRIDGE_DESTROY", "description":"", "prefix": "ACT_DOTA_BRIDGE_DESTROY"},
	"ACT_DOTA_BRIDGE_THREAT":{"body":"ACT_DOTA_BRIDGE_THREAT", "description":"", "prefix": "ACT_DOTA_BRIDGE_THREAT"},
	"ACT_DOTA_CAGED_CREEP_RAGE":{"body":"ACT_DOTA_CAGED_CREEP_RAGE", "description":"", "prefix": "ACT_DOTA_CAGED_CREEP_RAGE"},
	"ACT_DOTA_CAGED_CREEP_RAGE_OUT":{"body":"ACT_DOTA_CAGED_CREEP_RAGE_OUT", "description":"", "prefix": "ACT_DOTA_CAGED_CREEP_RAGE_OUT"},
	"ACT_DOTA_CAGED_CREEP_SMASH":{"body":"ACT_DOTA_CAGED_CREEP_SMASH", "description":"", "prefix": "ACT_DOTA_CAGED_CREEP_SMASH"},
	"ACT_DOTA_CAGED_CREEP_SMASH_OUT":{"body":"ACT_DOTA_CAGED_CREEP_SMASH_OUT", "description":"", "prefix": "ACT_DOTA_CAGED_CREEP_SMASH_OUT"},
	"ACT_DOTA_CANCEL_SIREN_SONG":{"body":"ACT_DOTA_CANCEL_SIREN_SONG", "description":"", "prefix": "ACT_DOTA_CANCEL_SIREN_SONG"},
	"ACT_DOTA_CAPTURE":{"body":"ACT_DOTA_CAPTURE", "description":"", "prefix": "ACT_DOTA_CAPTURE"},
	"ACT_DOTA_CAPTURE_CARD":{"body":"ACT_DOTA_CAPTURE_CARD", "description":"", "prefix": "ACT_DOTA_CAPTURE_CARD"},
	"ACT_DOTA_CAPTURE_PET":{"body":"ACT_DOTA_CAPTURE_PET", "description":"", "prefix": "ACT_DOTA_CAPTURE_PET"},
	"ACT_DOTA_CAPTURE_RARE":{"body":"ACT_DOTA_CAPTURE_RARE", "description":"", "prefix": "ACT_DOTA_CAPTURE_RARE"},
	"ACT_DOTA_CAST_ABILITY_1":{"body":"ACT_DOTA_CAST_ABILITY_1", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_1"},
	"ACT_DOTA_CAST_ABILITY_1_END":{"body":"ACT_DOTA_CAST_ABILITY_1_END", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_1_END"},
	"ACT_DOTA_CAST_ABILITY_2":{"body":"ACT_DOTA_CAST_ABILITY_2", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_2"},
	"ACT_DOTA_CAST_ABILITY_2_END":{"body":"ACT_DOTA_CAST_ABILITY_2_END", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_2_END"},
	"ACT_DOTA_CAST_ABILITY_2_ES_ROLL":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL"},
	"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"},
	"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"},
	"ACT_DOTA_CAST_ABILITY_3":{"body":"ACT_DOTA_CAST_ABILITY_3", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_3"},
	"ACT_DOTA_CAST_ABILITY_3_END":{"body":"ACT_DOTA_CAST_ABILITY_3_END", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_3_END"},
	"ACT_DOTA_CAST_ABILITY_4":{"body":"ACT_DOTA_CAST_ABILITY_4", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_4"},
	"ACT_DOTA_CAST_ABILITY_4_END":{"body":"ACT_DOTA_CAST_ABILITY_4_END", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_4_END"},
	"ACT_DOTA_CAST_ABILITY_5":{"body":"ACT_DOTA_CAST_ABILITY_5", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_5"},
	"ACT_DOTA_CAST_ABILITY_6":{"body":"ACT_DOTA_CAST_ABILITY_6", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_6"},
	"ACT_DOTA_CAST_ABILITY_7":{"body":"ACT_DOTA_CAST_ABILITY_7", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_7"},
	"ACT_DOTA_CAST_ABILITY_ROT":{"body":"ACT_DOTA_CAST_ABILITY_ROT", "description":"", "prefix": "ACT_DOTA_CAST_ABILITY_ROT"},
	"ACT_DOTA_CAST_ALACRITY":{"body":"ACT_DOTA_CAST_ALACRITY", "description":"", "prefix": "ACT_DOTA_CAST_ALACRITY"},
	"ACT_DOTA_CAST_BURROW_END":{"body":"ACT_DOTA_CAST_BURROW_END", "description":"", "prefix": "ACT_DOTA_CAST_BURROW_END"},
	"ACT_DOTA_CAST_CHAOS_METEOR":{"body":"ACT_DOTA_CAST_CHAOS_METEOR", "description":"", "prefix": "ACT_DOTA_CAST_CHAOS_METEOR"},
	"ACT_DOTA_CAST_COLD_SNAP":{"body":"ACT_DOTA_CAST_COLD_SNAP", "description":"", "prefix": "ACT_DOTA_CAST_COLD_SNAP"},
	"ACT_DOTA_CAST_DEAFENING_BLAST":{"body":"ACT_DOTA_CAST_DEAFENING_BLAST", "description":"", "prefix": "ACT_DOTA_CAST_DEAFENING_BLAST"},
	"ACT_DOTA_CAST_DRAGONBREATH":{"body":"ACT_DOTA_CAST_DRAGONBREATH", "description":"", "prefix": "ACT_DOTA_CAST_DRAGONBREATH"},
	"ACT_DOTA_CAST_EMP":{"body":"ACT_DOTA_CAST_EMP", "description":"", "prefix": "ACT_DOTA_CAST_EMP"},
	"ACT_DOTA_CAST_FORGE_SPIRIT":{"body":"ACT_DOTA_CAST_FORGE_SPIRIT", "description":"", "prefix": "ACT_DOTA_CAST_FORGE_SPIRIT"},
	"ACT_DOTA_CAST_GHOST_SHIP":{"body":"ACT_DOTA_CAST_GHOST_SHIP", "description":"", "prefix": "ACT_DOTA_CAST_GHOST_SHIP"},
	"ACT_DOTA_CAST_GHOST_WALK":{"body":"ACT_DOTA_CAST_GHOST_WALK", "description":"", "prefix": "ACT_DOTA_CAST_GHOST_WALK"},
	"ACT_DOTA_CAST_ICE_WALL":{"body":"ACT_DOTA_CAST_ICE_WALL", "description":"", "prefix": "ACT_DOTA_CAST_ICE_WALL"},
	"ACT_DOTA_CAST_LIFE_BREAK_END":{"body":"ACT_DOTA_CAST_LIFE_BREAK_END", "description":"", "prefix": "ACT_DOTA_CAST_LIFE_BREAK_END"},
	"ACT_DOTA_CAST_LIFE_BREAK_START":{"body":"ACT_DOTA_CAST_LIFE_BREAK_START", "description":"", "prefix": "ACT_DOTA_CAST_LIFE_BREAK_START"},
	"ACT_DOTA_CAST_REFRACTION":{"body":"ACT_DOTA_CAST_REFRACTION", "description":"", "prefix": "ACT_DOTA_CAST_REFRACTION"},
	"ACT_DOTA_CAST_SUN_STRIKE":{"body":"ACT_DOTA_CAST_SUN_STRIKE", "description":"", "prefix": "ACT_DOTA_CAST_SUN_STRIKE"},
	"ACT_DOTA_CAST_TORNADO":{"body":"ACT_DOTA_CAST_TORNADO", "description":"", "prefix": "ACT_DOTA_CAST_TORNADO"},
	"ACT_DOTA_CAST_WILD_AXES_END":{"body":"ACT_DOTA_CAST_WILD_AXES_END", "description":"", "prefix": "ACT_DOTA_CAST_WILD_AXES_END"},
	"ACT_DOTA_CENTAUR_STAMPEDE":{"body":"ACT_DOTA_CENTAUR_STAMPEDE", "description":"", "prefix": "ACT_DOTA_CENTAUR_STAMPEDE"},
	"ACT_DOTA_CHANNEL_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_ABILITY_1", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_1"},
	"ACT_DOTA_CHANNEL_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_ABILITY_2", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_2"},
	"ACT_DOTA_CHANNEL_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_ABILITY_3", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_3"},
	"ACT_DOTA_CHANNEL_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_ABILITY_4", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_4"},
	"ACT_DOTA_CHANNEL_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_ABILITY_5", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_5"},
	"ACT_DOTA_CHANNEL_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_ABILITY_6", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_6"},
	"ACT_DOTA_CHANNEL_ABILITY_7":{"body":"ACT_DOTA_CHANNEL_ABILITY_7", "description":"", "prefix": "ACT_DOTA_CHANNEL_ABILITY_7"},
	"ACT_DOTA_CHANNEL_END_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_1", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_1"},
	"ACT_DOTA_CHANNEL_END_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_2", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_2"},
	"ACT_DOTA_CHANNEL_END_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_3", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_3"},
	"ACT_DOTA_CHANNEL_END_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_4", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_4"},
	"ACT_DOTA_CHANNEL_END_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_5", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_5"},
	"ACT_DOTA_CHANNEL_END_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_6", "description":"", "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_6"},
	"ACT_DOTA_CHILLING_TOUCH":{"body":"ACT_DOTA_CHILLING_TOUCH", "description":"", "prefix": "ACT_DOTA_CHILLING_TOUCH"},
	"ACT_DOTA_COLD_FEET":{"body":"ACT_DOTA_COLD_FEET", "description":"", "prefix": "ACT_DOTA_COLD_FEET"},
	"ACT_DOTA_CONSTANT_LAYER":{"body":"ACT_DOTA_CONSTANT_LAYER", "description":"", "prefix": "ACT_DOTA_CONSTANT_LAYER"},
	"ACT_DOTA_DAGON":{"body":"ACT_DOTA_DAGON", "description":"", "prefix": "ACT_DOTA_DAGON"},
	"ACT_DOTA_DEATH_BY_SNIPER":{"body":"ACT_DOTA_DEATH_BY_SNIPER", "description":"", "prefix": "ACT_DOTA_DEATH_BY_SNIPER"},
	"ACT_DOTA_DEFEAT":{"body":"ACT_DOTA_DEFEAT", "description":"", "prefix": "ACT_DOTA_DEFEAT"},
	"ACT_DOTA_DEFEAT_START":{"body":"ACT_DOTA_DEFEAT_START", "description":"", "prefix": "ACT_DOTA_DEFEAT_START"},
	"ACT_DOTA_DIE":{"body":"ACT_DOTA_DIE", "description":"", "prefix": "ACT_DOTA_DIE"},
	"ACT_DOTA_DIE_SPECIAL":{"body":"ACT_DOTA_DIE_SPECIAL", "description":"", "prefix": "ACT_DOTA_DIE_SPECIAL"},
	"ACT_DOTA_DISABLED":{"body":"ACT_DOTA_DISABLED", "description":"", "prefix": "ACT_DOTA_DISABLED"},
	"ACT_DOTA_DP_SPIRIT_SIPHON":{"body":"ACT_DOTA_DP_SPIRIT_SIPHON", "description":"", "prefix": "ACT_DOTA_DP_SPIRIT_SIPHON"},
	"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK":{"body":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK", "description":"", "prefix": "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"},
	"ACT_DOTA_ECHO_SLAM":{"body":"ACT_DOTA_ECHO_SLAM", "description":"", "prefix": "ACT_DOTA_ECHO_SLAM"},
	"ACT_DOTA_ENFEEBLE":{"body":"ACT_DOTA_ENFEEBLE", "description":"", "prefix": "ACT_DOTA_ENFEEBLE"},
	"ACT_DOTA_ES_STONE_CALLER":{"body":"ACT_DOTA_ES_STONE_CALLER", "description":"", "prefix": "ACT_DOTA_ES_STONE_CALLER"},
	"ACT_DOTA_FATAL_BONDS":{"body":"ACT_DOTA_FATAL_BONDS", "description":"", "prefix": "ACT_DOTA_FATAL_BONDS"},
	"ACT_DOTA_FLAIL":{"body":"ACT_DOTA_FLAIL", "description":"", "prefix": "ACT_DOTA_FLAIL"},
	"ACT_DOTA_FLEE":{"body":"ACT_DOTA_FLEE", "description":"", "prefix": "ACT_DOTA_FLEE"},
	"ACT_DOTA_FLINCH":{"body":"ACT_DOTA_FLINCH", "description":"", "prefix": "ACT_DOTA_FLINCH"},
	"ACT_DOTA_FORCESTAFF_END":{"body":"ACT_DOTA_FORCESTAFF_END", "description":"", "prefix": "ACT_DOTA_FORCESTAFF_END"},
	"ACT_DOTA_FRUSTRATION":{"body":"ACT_DOTA_FRUSTRATION", "description":"", "prefix": "ACT_DOTA_FRUSTRATION"},
	"ACT_DOTA_FXANIM":{"body":"ACT_DOTA_FXANIM", "description":"", "prefix": "ACT_DOTA_FXANIM"},
	"ACT_DOTA_GENERIC_CHANNEL_1":{"body":"ACT_DOTA_GENERIC_CHANNEL_1", "description":"", "prefix": "ACT_DOTA_GENERIC_CHANNEL_1"},
	"ACT_DOTA_GESTURE_ACCENT":{"body":"ACT_DOTA_GESTURE_ACCENT", "description":"", "prefix": "ACT_DOTA_GESTURE_ACCENT"},
	"ACT_DOTA_GESTURE_POINT":{"body":"ACT_DOTA_GESTURE_POINT", "description":"", "prefix": "ACT_DOTA_GESTURE_POINT"},
	"ACT_DOTA_GREET":{"body":"ACT_DOTA_GREET", "description":"", "prefix": "ACT_DOTA_GREET"},
	"ACT_DOTA_GREEVIL_BLINK_BONE":{"body":"ACT_DOTA_GREEVIL_BLINK_BONE", "description":"", "prefix": "ACT_DOTA_GREEVIL_BLINK_BONE"},
	"ACT_DOTA_GREEVIL_CAST":{"body":"ACT_DOTA_GREEVIL_CAST", "description":"", "prefix": "ACT_DOTA_GREEVIL_CAST"},
	"ACT_DOTA_GREEVIL_HOOK_END":{"body":"ACT_DOTA_GREEVIL_HOOK_END", "description":"", "prefix": "ACT_DOTA_GREEVIL_HOOK_END"},
	"ACT_DOTA_GREEVIL_HOOK_START":{"body":"ACT_DOTA_GREEVIL_HOOK_START", "description":"", "prefix": "ACT_DOTA_GREEVIL_HOOK_START"},
	"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY":{"body":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY", "description":"", "prefix": "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"},
	"ACT_DOTA_GS_INK_CREATURE":{"body":"ACT_DOTA_GS_INK_CREATURE", "description":"", "prefix": "ACT_DOTA_GS_INK_CREATURE"},
	"ACT_DOTA_GS_SOUL_CHAIN":{"body":"ACT_DOTA_GS_SOUL_CHAIN", "description":"", "prefix": "ACT_DOTA_GS_SOUL_CHAIN"},
	"ACT_DOTA_ICE_VORTEX":{"body":"ACT_DOTA_ICE_VORTEX", "description":"", "prefix": "ACT_DOTA_ICE_VORTEX"},
	"ACT_DOTA_IDLE":{"body":"ACT_DOTA_IDLE", "description":"", "prefix": "ACT_DOTA_IDLE"},
	"ACT_DOTA_IDLE_IMPATIENT":{"body":"ACT_DOTA_IDLE_IMPATIENT", "description":"", "prefix": "ACT_DOTA_IDLE_IMPATIENT"},
	"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP":{"body":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP", "description":"", "prefix": "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"},
	"ACT_DOTA_IDLE_RARE":{"body":"ACT_DOTA_IDLE_RARE", "description":"", "prefix": "ACT_DOTA_IDLE_RARE"},
	"ACT_DOTA_IDLE_SLEEPING":{"body":"ACT_DOTA_IDLE_SLEEPING", "description":"", "prefix": "ACT_DOTA_IDLE_SLEEPING"},
	"ACT_DOTA_IDLE_SLEEPING_END":{"body":"ACT_DOTA_IDLE_SLEEPING_END", "description":"", "prefix": "ACT_DOTA_IDLE_SLEEPING_END"},
	"ACT_DOTA_INTRO":{"body":"ACT_DOTA_INTRO", "description":"", "prefix": "ACT_DOTA_INTRO"},
	"ACT_DOTA_INTRO_LOOP":{"body":"ACT_DOTA_INTRO_LOOP", "description":"", "prefix": "ACT_DOTA_INTRO_LOOP"},
	"ACT_DOTA_ITEM_DROP":{"body":"ACT_DOTA_ITEM_DROP", "description":"", "prefix": "ACT_DOTA_ITEM_DROP"},
	"ACT_DOTA_ITEM_LOOK":{"body":"ACT_DOTA_ITEM_LOOK", "description":"", "prefix": "ACT_DOTA_ITEM_LOOK"},
	"ACT_DOTA_ITEM_PICKUP":{"body":"ACT_DOTA_ITEM_PICKUP", "description":"", "prefix": "ACT_DOTA_ITEM_PICKUP"},
	"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP", "description":"", "prefix": "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"},
	"ACT_DOTA_JAKIRO_LIQUIDFIRE_START":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START", "description":"", "prefix": "ACT_DOTA_JAKIRO_LIQUIDFIRE_START"},
	"ACT_DOTA_KILLTAUNT":{"body":"ACT_DOTA_KILLTAUNT", "description":"", "prefix": "ACT_DOTA_KILLTAUNT"},
	"ACT_DOTA_KINETIC_FIELD":{"body":"ACT_DOTA_KINETIC_FIELD", "description":"", "prefix": "ACT_DOTA_KINETIC_FIELD"},
	"ACT_DOTA_LASSO_LOOP":{"body":"ACT_DOTA_LASSO_LOOP", "description":"", "prefix": "ACT_DOTA_LASSO_LOOP"},
	"ACT_DOTA_LEAP_STUN":{"body":"ACT_DOTA_LEAP_STUN", "description":"", "prefix": "ACT_DOTA_LEAP_STUN"},
	"ACT_DOTA_LEAP_SWIPE":{"body":"ACT_DOTA_LEAP_SWIPE", "description":"", "prefix": "ACT_DOTA_LEAP_SWIPE"},
	"ACT_DOTA_LIFESTEALER_ASSIMILATE":{"body":"ACT_DOTA_LIFESTEALER_ASSIMILATE", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_ASSIMILATE"},
	"ACT_DOTA_LIFESTEALER_EJECT":{"body":"ACT_DOTA_LIFESTEALER_EJECT", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_EJECT"},
	"ACT_DOTA_LIFESTEALER_INFEST":{"body":"ACT_DOTA_LIFESTEALER_INFEST", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_INFEST"},
	"ACT_DOTA_LIFESTEALER_INFEST_END":{"body":"ACT_DOTA_LIFESTEALER_INFEST_END", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_INFEST_END"},
	"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS":{"body":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"},
	"ACT_DOTA_LIFESTEALER_RAGE":{"body":"ACT_DOTA_LIFESTEALER_RAGE", "description":"", "prefix": "ACT_DOTA_LIFESTEALER_RAGE"},
	"ACT_DOTA_LOADOUT":{"body":"ACT_DOTA_LOADOUT", "description":"", "prefix": "ACT_DOTA_LOADOUT"},
	"ACT_DOTA_LOADOUT_RARE":{"body":"ACT_DOTA_LOADOUT_RARE", "description":"", "prefix": "ACT_DOTA_LOADOUT_RARE"},
	"ACT_DOTA_LOOK_AROUND":{"body":"ACT_DOTA_LOOK_AROUND", "description":"", "prefix": "ACT_DOTA_LOOK_AROUND"},
	"ACT_DOTA_MAGNUS_SKEWER_END":{"body":"ACT_DOTA_MAGNUS_SKEWER_END", "description":"", "prefix": "ACT_DOTA_MAGNUS_SKEWER_END"},
	"ACT_DOTA_MAGNUS_SKEWER_START":{"body":"ACT_DOTA_MAGNUS_SKEWER_START", "description":"", "prefix": "ACT_DOTA_MAGNUS_SKEWER_START"},
	"ACT_DOTA_MEDUSA_STONE_GAZE":{"body":"ACT_DOTA_MEDUSA_STONE_GAZE", "description":"", "prefix": "ACT_DOTA_MEDUSA_STONE_GAZE"},
	"ACT_DOTA_MIDNIGHT_PULSE":{"body":"ACT_DOTA_MIDNIGHT_PULSE", "description":"", "prefix": "ACT_DOTA_MIDNIGHT_PULSE"},
	"ACT_DOTA_MINI_TAUNT":{"body":"ACT_DOTA_MINI_TAUNT", "description":"", "prefix": "ACT_DOTA_MINI_TAUNT"},
	"ACT_DOTA_MK_FUR_ARMY":{"body":"ACT_DOTA_MK_FUR_ARMY", "description":"", "prefix": "ACT_DOTA_MK_FUR_ARMY"},
	"ACT_DOTA_MK_SPRING_CAST":{"body":"ACT_DOTA_MK_SPRING_CAST", "description":"", "prefix": "ACT_DOTA_MK_SPRING_CAST"},
	"ACT_DOTA_MK_SPRING_END":{"body":"ACT_DOTA_MK_SPRING_END", "description":"", "prefix": "ACT_DOTA_MK_SPRING_END"},
	"ACT_DOTA_MK_SPRING_SOAR":{"body":"ACT_DOTA_MK_SPRING_SOAR", "description":"", "prefix": "ACT_DOTA_MK_SPRING_SOAR"},
	"ACT_DOTA_MK_STRIKE":{"body":"ACT_DOTA_MK_STRIKE", "description":"", "prefix": "ACT_DOTA_MK_STRIKE"},
	"ACT_DOTA_MK_TREE_END":{"body":"ACT_DOTA_MK_TREE_END", "description":"", "prefix": "ACT_DOTA_MK_TREE_END"},
	"ACT_DOTA_MK_TREE_SOAR":{"body":"ACT_DOTA_MK_TREE_SOAR", "description":"", "prefix": "ACT_DOTA_MK_TREE_SOAR"},
	"ACT_DOTA_NECRO_GHOST_SHROUD":{"body":"ACT_DOTA_NECRO_GHOST_SHROUD", "description":"", "prefix": "ACT_DOTA_NECRO_GHOST_SHROUD"},
	"ACT_DOTA_NIAN_INTRO_LEAP":{"body":"ACT_DOTA_NIAN_INTRO_LEAP", "description":"", "prefix": "ACT_DOTA_NIAN_INTRO_LEAP"},
	"ACT_DOTA_NIAN_PIN_END":{"body":"ACT_DOTA_NIAN_PIN_END", "description":"", "prefix": "ACT_DOTA_NIAN_PIN_END"},
	"ACT_DOTA_NIAN_PIN_LOOP":{"body":"ACT_DOTA_NIAN_PIN_LOOP", "description":"", "prefix": "ACT_DOTA_NIAN_PIN_LOOP"},
	"ACT_DOTA_NIAN_PIN_START":{"body":"ACT_DOTA_NIAN_PIN_START", "description":"", "prefix": "ACT_DOTA_NIAN_PIN_START"},
	"ACT_DOTA_NIAN_PIN_TO_STUN":{"body":"ACT_DOTA_NIAN_PIN_TO_STUN", "description":"", "prefix": "ACT_DOTA_NIAN_PIN_TO_STUN"},
	"ACT_DOTA_NIGHTSTALKER_TRANSITION":{"body":"ACT_DOTA_NIGHTSTALKER_TRANSITION", "description":"", "prefix": "ACT_DOTA_NIGHTSTALKER_TRANSITION"},
	"ACT_DOTA_OVERRIDE_ABILITY_1":{"body":"ACT_DOTA_OVERRIDE_ABILITY_1", "description":"", "prefix": "ACT_DOTA_OVERRIDE_ABILITY_1"},
	"ACT_DOTA_OVERRIDE_ABILITY_2":{"body":"ACT_DOTA_OVERRIDE_ABILITY_2", "description":"", "prefix": "ACT_DOTA_OVERRIDE_ABILITY_2"},
	"ACT_DOTA_OVERRIDE_ABILITY_3":{"body":"ACT_DOTA_OVERRIDE_ABILITY_3", "description":"", "prefix": "ACT_DOTA_OVERRIDE_ABILITY_3"},
	"ACT_DOTA_OVERRIDE_ABILITY_4":{"body":"ACT_DOTA_OVERRIDE_ABILITY_4", "description":"", "prefix": "ACT_DOTA_OVERRIDE_ABILITY_4"},
	"ACT_DOTA_OVERRIDE_ARCANA":{"body":"ACT_DOTA_OVERRIDE_ARCANA", "description":"", "prefix": "ACT_DOTA_OVERRIDE_ARCANA"},
	"ACT_DOTA_PET_LEVEL":{"body":"ACT_DOTA_PET_LEVEL", "description":"", "prefix": "ACT_DOTA_PET_LEVEL"},
	"ACT_DOTA_PET_WARD_OBSERVER":{"body":"ACT_DOTA_PET_WARD_OBSERVER", "description":"", "prefix": "ACT_DOTA_PET_WARD_OBSERVER"},
	"ACT_DOTA_PET_WARD_SENTRY":{"body":"ACT_DOTA_PET_WARD_SENTRY", "description":"", "prefix": "ACT_DOTA_PET_WARD_SENTRY"},
	"ACT_DOTA_POOF_END":{"body":"ACT_DOTA_POOF_END", "description":"", "prefix": "ACT_DOTA_POOF_END"},
	"ACT_DOTA_PRESENT_ITEM":{"body":"ACT_DOTA_PRESENT_ITEM", "description":"", "prefix": "ACT_DOTA_PRESENT_ITEM"},
	"ACT_DOTA_RATTLETRAP_BATTERYASSAULT":{"body":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT", "description":"", "prefix": "ACT_DOTA_RATTLETRAP_BATTERYASSAULT"},
	"ACT_DOTA_RATTLETRAP_HOOKSHOT_END":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END", "description":"", "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_END"},
	"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP", "description":"", "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"},
	"ACT_DOTA_RATTLETRAP_HOOKSHOT_START":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START", "description":"", "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_START"},
	"ACT_DOTA_RATTLETRAP_POWERCOGS":{"body":"ACT_DOTA_RATTLETRAP_POWERCOGS", "description":"", "prefix": "ACT_DOTA_RATTLETRAP_POWERCOGS"},
	"ACT_DOTA_RAZE_1":{"body":"ACT_DOTA_RAZE_1", "description":"", "prefix": "ACT_DOTA_RAZE_1"},
	"ACT_DOTA_RAZE_2":{"body":"ACT_DOTA_RAZE_2", "description":"", "prefix": "ACT_DOTA_RAZE_2"},
	"ACT_DOTA_RAZE_3":{"body":"ACT_DOTA_RAZE_3", "description":"", "prefix": "ACT_DOTA_RAZE_3"},
	"ACT_DOTA_RELAX_END":{"body":"ACT_DOTA_RELAX_END", "description":"", "prefix": "ACT_DOTA_RELAX_END"},
	"ACT_DOTA_RELAX_LOOP":{"body":"ACT_DOTA_RELAX_LOOP", "description":"", "prefix": "ACT_DOTA_RELAX_LOOP"},
	"ACT_DOTA_RELAX_LOOP_END":{"body":"ACT_DOTA_RELAX_LOOP_END", "description":"", "prefix": "ACT_DOTA_RELAX_LOOP_END"},
	"ACT_DOTA_RELAX_START":{"body":"ACT_DOTA_RELAX_START", "description":"", "prefix": "ACT_DOTA_RELAX_START"},
	"ACT_DOTA_ROQUELAIRE_LAND":{"body":"ACT_DOTA_ROQUELAIRE_LAND", "description":"", "prefix": "ACT_DOTA_ROQUELAIRE_LAND"},
	"ACT_DOTA_ROQUELAIRE_LAND_IDLE":{"body":"ACT_DOTA_ROQUELAIRE_LAND_IDLE", "description":"", "prefix": "ACT_DOTA_ROQUELAIRE_LAND_IDLE"},
	"ACT_DOTA_RUN":{"body":"ACT_DOTA_RUN", "description":"", "prefix": "ACT_DOTA_RUN"},
	"ACT_DOTA_SAND_KING_BURROW_IN":{"body":"ACT_DOTA_SAND_KING_BURROW_IN", "description":"", "prefix": "ACT_DOTA_SAND_KING_BURROW_IN"},
	"ACT_DOTA_SAND_KING_BURROW_OUT":{"body":"ACT_DOTA_SAND_KING_BURROW_OUT", "description":"", "prefix": "ACT_DOTA_SAND_KING_BURROW_OUT"},
	"ACT_DOTA_SHAKE":{"body":"ACT_DOTA_SHAKE", "description":"", "prefix": "ACT_DOTA_SHAKE"},
	"ACT_DOTA_SHALLOW_GRAVE":{"body":"ACT_DOTA_SHALLOW_GRAVE", "description":"", "prefix": "ACT_DOTA_SHALLOW_GRAVE"},
	"ACT_DOTA_SHARPEN_WEAPON":{"body":"ACT_DOTA_SHARPEN_WEAPON", "description":"", "prefix": "ACT_DOTA_SHARPEN_WEAPON"},
	"ACT_DOTA_SHARPEN_WEAPON_OUT":{"body":"ACT_DOTA_SHARPEN_WEAPON_OUT", "description":"", "prefix": "ACT_DOTA_SHARPEN_WEAPON_OUT"},
	"ACT_DOTA_SHOPKEEPER_PET_INTERACT":{"body":"ACT_DOTA_SHOPKEEPER_PET_INTERACT", "description":"", "prefix": "ACT_DOTA_SHOPKEEPER_PET_INTERACT"},
	"ACT_DOTA_SHRUG":{"body":"ACT_DOTA_SHRUG", "description":"", "prefix": "ACT_DOTA_SHRUG"},
	"ACT_DOTA_SLARK_POUNCE":{"body":"ACT_DOTA_SLARK_POUNCE", "description":"", "prefix": "ACT_DOTA_SLARK_POUNCE"},
	"ACT_DOTA_SLEEPING_END":{"body":"ACT_DOTA_SLEEPING_END", "description":"", "prefix": "ACT_DOTA_SLEEPING_END"},
	"ACT_DOTA_SLIDE":{"body":"ACT_DOTA_SLIDE", "description":"", "prefix": "ACT_DOTA_SLIDE"},
	"ACT_DOTA_SLIDE_LOOP":{"body":"ACT_DOTA_SLIDE_LOOP", "description":"", "prefix": "ACT_DOTA_SLIDE_LOOP"},
	"ACT_DOTA_SPAWN":{"body":"ACT_DOTA_SPAWN", "description":"", "prefix": "ACT_DOTA_SPAWN"},
	"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END", "description":"", "prefix": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"},
	"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE", "description":"", "prefix": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"},
	"ACT_DOTA_STARTLE":{"body":"ACT_DOTA_STARTLE", "description":"", "prefix": "ACT_DOTA_STARTLE"},
	"ACT_DOTA_STATIC_STORM":{"body":"ACT_DOTA_STATIC_STORM", "description":"", "prefix": "ACT_DOTA_STATIC_STORM"},
	"ACT_DOTA_SWIM":{"body":"ACT_DOTA_SWIM", "description":"", "prefix": "ACT_DOTA_SWIM"},
	"ACT_DOTA_SWIM_IDLE":{"body":"ACT_DOTA_SWIM_IDLE", "description":"", "prefix": "ACT_DOTA_SWIM_IDLE"},
	"ACT_DOTA_TAUNT":{"body":"ACT_DOTA_TAUNT", "description":"", "prefix": "ACT_DOTA_TAUNT"},
	"ACT_DOTA_TAUNT_SNIPER":{"body":"ACT_DOTA_TAUNT_SNIPER", "description":"", "prefix": "ACT_DOTA_TAUNT_SNIPER"},
	"ACT_DOTA_TELEPORT":{"body":"ACT_DOTA_TELEPORT", "description":"", "prefix": "ACT_DOTA_TELEPORT"},
	"ACT_DOTA_TELEPORT_COOP_END":{"body":"ACT_DOTA_TELEPORT_COOP_END", "description":"", "prefix": "ACT_DOTA_TELEPORT_COOP_END"},
	"ACT_DOTA_TELEPORT_COOP_EXIT":{"body":"ACT_DOTA_TELEPORT_COOP_EXIT", "description":"", "prefix": "ACT_DOTA_TELEPORT_COOP_EXIT"},
	"ACT_DOTA_TELEPORT_COOP_START":{"body":"ACT_DOTA_TELEPORT_COOP_START", "description":"", "prefix": "ACT_DOTA_TELEPORT_COOP_START"},
	"ACT_DOTA_TELEPORT_COOP_WAIT":{"body":"ACT_DOTA_TELEPORT_COOP_WAIT", "description":"", "prefix": "ACT_DOTA_TELEPORT_COOP_WAIT"},
	"ACT_DOTA_TELEPORT_END":{"body":"ACT_DOTA_TELEPORT_END", "description":"", "prefix": "ACT_DOTA_TELEPORT_END"},
	"ACT_DOTA_TELEPORT_END_REACT":{"body":"ACT_DOTA_TELEPORT_END_REACT", "description":"", "prefix": "ACT_DOTA_TELEPORT_END_REACT"},
	"ACT_DOTA_TELEPORT_REACT":{"body":"ACT_DOTA_TELEPORT_REACT", "description":"", "prefix": "ACT_DOTA_TELEPORT_REACT"},
	"ACT_DOTA_THIRST":{"body":"ACT_DOTA_THIRST", "description":"", "prefix": "ACT_DOTA_THIRST"},
	"ACT_DOTA_THUNDER_STRIKE":{"body":"ACT_DOTA_THUNDER_STRIKE", "description":"", "prefix": "ACT_DOTA_THUNDER_STRIKE"},
	"ACT_DOTA_TINKER_REARM1":{"body":"ACT_DOTA_TINKER_REARM1", "description":"", "prefix": "ACT_DOTA_TINKER_REARM1"},
	"ACT_DOTA_TINKER_REARM2":{"body":"ACT_DOTA_TINKER_REARM2", "description":"", "prefix": "ACT_DOTA_TINKER_REARM2"},
	"ACT_DOTA_TINKER_REARM3":{"body":"ACT_DOTA_TINKER_REARM3", "description":"", "prefix": "ACT_DOTA_TINKER_REARM3"},
	"ACT_DOTA_TRANSITION":{"body":"ACT_DOTA_TRANSITION", "description":"", "prefix": "ACT_DOTA_TRANSITION"},
	"ACT_DOTA_TRICKS_END":{"body":"ACT_DOTA_TRICKS_END", "description":"", "prefix": "ACT_DOTA_TRICKS_END"},
	"ACT_DOTA_TROT":{"body":"ACT_DOTA_TROT", "description":"", "prefix": "ACT_DOTA_TROT"},
	"ACT_DOTA_UNDYING_DECAY":{"body":"ACT_DOTA_UNDYING_DECAY", "description":"", "prefix": "ACT_DOTA_UNDYING_DECAY"},
	"ACT_DOTA_UNDYING_SOUL_RIP":{"body":"ACT_DOTA_UNDYING_SOUL_RIP", "description":"", "prefix": "ACT_DOTA_UNDYING_SOUL_RIP"},
	"ACT_DOTA_UNDYING_TOMBSTONE":{"body":"ACT_DOTA_UNDYING_TOMBSTONE", "description":"", "prefix": "ACT_DOTA_UNDYING_TOMBSTONE"},
	"ACT_DOTA_VERSUS":{"body":"ACT_DOTA_VERSUS", "description":"", "prefix": "ACT_DOTA_VERSUS"},
	"ACT_DOTA_VICTORY":{"body":"ACT_DOTA_VICTORY", "description":"", "prefix": "ACT_DOTA_VICTORY"},
	"ACT_DOTA_VICTORY_START":{"body":"ACT_DOTA_VICTORY_START", "description":"", "prefix": "ACT_DOTA_VICTORY_START"},
	"ACT_DOTA_WAIT_IDLE":{"body":"ACT_DOTA_WAIT_IDLE", "description":"", "prefix": "ACT_DOTA_WAIT_IDLE"},
	"ACT_DOTA_WEAVERBUG_ATTACH":{"body":"ACT_DOTA_WEAVERBUG_ATTACH", "description":"", "prefix": "ACT_DOTA_WEAVERBUG_ATTACH"},
	"ACT_DOTA_WHEEL_LAYER":{"body":"ACT_DOTA_WHEEL_LAYER", "description":"", "prefix": "ACT_DOTA_WHEEL_LAYER"},
	"ACT_DOTA_WHIRLING_AXES_RANGED":{"body":"ACT_DOTA_WHIRLING_AXES_RANGED", "description":"", "prefix": "ACT_DOTA_WHIRLING_AXES_RANGED"},
	"ACT_MIRANA_LEAP_END":{"body":"ACT_MIRANA_LEAP_END", "description":"", "prefix": "ACT_MIRANA_LEAP_END"},
	"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE":{"body":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE", "description":"", "prefix": "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"},
	"ACT_TINY_AVALANCHE":{"body":"ACT_TINY_AVALANCHE", "description":"", "prefix": "ACT_TINY_AVALANCHE"},
	"ACT_TINY_GROWL":{"body":"ACT_TINY_GROWL", "description":"", "prefix": "ACT_TINY_GROWL"},
	"ACT_TINY_TOSS":{"body":"ACT_TINY_TOSS", "description":"", "prefix": "ACT_TINY_TOSS"},
	"ACT_WAVEFORM_END":{"body":"ACT_WAVEFORM_END", "description":"", "prefix": "ACT_WAVEFORM_END"},
	"ACT_WAVEFORM_START":{"body":"ACT_WAVEFORM_START", "description":"", "prefix": "ACT_WAVEFORM_START"},
	"LUA_MODIFIER_INVALID":{"body":"LUA_MODIFIER_INVALID", "description":"", "prefix": "LUA_MODIFIER_INVALID"},
	"LUA_MODIFIER_MOTION_BOTH":{"body":"LUA_MODIFIER_MOTION_BOTH", "description":"", "prefix": "LUA_MODIFIER_MOTION_BOTH"},
	"LUA_MODIFIER_MOTION_HORIZONTAL":{"body":"LUA_MODIFIER_MOTION_HORIZONTAL", "description":"", "prefix": "LUA_MODIFIER_MOTION_HORIZONTAL"},
	"LUA_MODIFIER_MOTION_NONE":{"body":"LUA_MODIFIER_MOTION_NONE", "description":"", "prefix": "LUA_MODIFIER_MOTION_NONE"},
	"LUA_MODIFIER_MOTION_VERTICAL":{"body":"LUA_MODIFIER_MOTION_VERTICAL", "description":"", "prefix": "LUA_MODIFIER_MOTION_VERTICAL"},
	"MAX_PATTACH_TYPES":{"body":"MAX_PATTACH_TYPES", "description":"", "prefix": "MAX_PATTACH_TYPES"},
	"PATTACH_ABSORIGIN":{"body":"PATTACH_ABSORIGIN", "description":"", "prefix": "PATTACH_ABSORIGIN"},
	"PATTACH_ABSORIGIN_FOLLOW":{"body":"PATTACH_ABSORIGIN_FOLLOW", "description":"", "prefix": "PATTACH_ABSORIGIN_FOLLOW"},
	"PATTACH_CENTER_FOLLOW":{"body":"PATTACH_CENTER_FOLLOW", "description":"", "prefix": "PATTACH_CENTER_FOLLOW"},
	"PATTACH_CUSTOMORIGIN":{"body":"PATTACH_CUSTOMORIGIN", "description":"", "prefix": "PATTACH_CUSTOMORIGIN"},
	"PATTACH_CUSTOMORIGIN_FOLLOW":{"body":"PATTACH_CUSTOMORIGIN_FOLLOW", "description":"", "prefix": "PATTACH_CUSTOMORIGIN_FOLLOW"},
	"PATTACH_EYES_FOLLOW":{"body":"PATTACH_EYES_FOLLOW", "description":"", "prefix": "PATTACH_EYES_FOLLOW"},
	"PATTACH_INVALID":{"body":"PATTACH_INVALID", "description":"", "prefix": "PATTACH_INVALID"},
	"PATTACH_MAIN_VIEW":{"body":"PATTACH_MAIN_VIEW", "description":"", "prefix": "PATTACH_MAIN_VIEW"},
	"PATTACH_OVERHEAD_FOLLOW":{"body":"PATTACH_OVERHEAD_FOLLOW", "description":"", "prefix": "PATTACH_OVERHEAD_FOLLOW"},
	"PATTACH_POINT":{"body":"PATTACH_POINT", "description":"", "prefix": "PATTACH_POINT"},
	"PATTACH_POINT_FOLLOW":{"body":"PATTACH_POINT_FOLLOW", "description":"", "prefix": "PATTACH_POINT_FOLLOW"},
	"PATTACH_RENDERORIGIN_FOLLOW":{"body":"PATTACH_RENDERORIGIN_FOLLOW", "description":"", "prefix": "PATTACH_RENDERORIGIN_FOLLOW"},
	"PATTACH_ROOTBONE_FOLLOW":{"body":"PATTACH_ROOTBONE_FOLLOW", "description":"", "prefix": "PATTACH_ROOTBONE_FOLLOW"},
	"PATTACH_WATERWAKE":{"body":"PATTACH_WATERWAKE", "description":"", "prefix": "PATTACH_WATERWAKE"},
	"PATTACH_WORLDORIGIN":{"body":"PATTACH_WORLDORIGIN", "description":"", "prefix": "PATTACH_WORLDORIGIN"},
	"UF_FAIL_ANCIENT":{"body":"UF_FAIL_ANCIENT", "description":"", "prefix": "UF_FAIL_ANCIENT"},
	"UF_FAIL_ATTACK_IMMUNE":{"body":"UF_FAIL_ATTACK_IMMUNE", "description":"", "prefix": "UF_FAIL_ATTACK_IMMUNE"},
	"UF_FAIL_BUILDING":{"body":"UF_FAIL_BUILDING", "description":"", "prefix": "UF_FAIL_BUILDING"},
	"UF_FAIL_CONSIDERED_HERO":{"body":"UF_FAIL_CONSIDERED_HERO", "description":"", "prefix": "UF_FAIL_CONSIDERED_HERO"},
	"UF_FAIL_COURIER":{"body":"UF_FAIL_COURIER", "description":"", "prefix": "UF_FAIL_COURIER"},
	"UF_FAIL_CREEP":{"body":"UF_FAIL_CREEP", "description":"", "prefix": "UF_FAIL_CREEP"},
	"UF_FAIL_CUSTOM":{"body":"UF_FAIL_CUSTOM", "description":"", "prefix": "UF_FAIL_CUSTOM"},
	"UF_FAIL_DEAD":{"body":"UF_FAIL_DEAD", "description":"", "prefix": "UF_FAIL_DEAD"},
	"UF_FAIL_DISABLE_HELP":{"body":"UF_FAIL_DISABLE_HELP", "description":"", "prefix": "UF_FAIL_DISABLE_HELP"},
	"UF_FAIL_DOMINATED":{"body":"UF_FAIL_DOMINATED", "description":"", "prefix": "UF_FAIL_DOMINATED"},
	"UF_FAIL_ENEMY":{"body":"UF_FAIL_ENEMY", "description":"", "prefix": "UF_FAIL_ENEMY"},
	"UF_FAIL_FRIENDLY":{"body":"UF_FAIL_FRIENDLY", "description":"", "prefix": "UF_FAIL_FRIENDLY"},
	"UF_FAIL_HERO":{"body":"UF_FAIL_HERO", "description":"", "prefix": "UF_FAIL_HERO"},
	"UF_FAIL_ILLUSION":{"body":"UF_FAIL_ILLUSION", "description":"", "prefix": "UF_FAIL_ILLUSION"},
	"UF_FAIL_INVALID_LOCATION":{"body":"UF_FAIL_INVALID_LOCATION", "description":"", "prefix": "UF_FAIL_INVALID_LOCATION"},
	"UF_FAIL_INVISIBLE":{"body":"UF_FAIL_INVISIBLE", "description":"", "prefix": "UF_FAIL_INVISIBLE"},
	"UF_FAIL_INVULNERABLE":{"body":"UF_FAIL_INVULNERABLE", "description":"", "prefix": "UF_FAIL_INVULNERABLE"},
	"UF_FAIL_IN_FOW":{"body":"UF_FAIL_IN_FOW", "description":"", "prefix": "UF_FAIL_IN_FOW"},
	"UF_FAIL_MAGIC_IMMUNE_ALLY":{"body":"UF_FAIL_MAGIC_IMMUNE_ALLY", "description":"", "prefix": "UF_FAIL_MAGIC_IMMUNE_ALLY"},
	"UF_FAIL_MAGIC_IMMUNE_ENEMY":{"body":"UF_FAIL_MAGIC_IMMUNE_ENEMY", "description":"", "prefix": "UF_FAIL_MAGIC_IMMUNE_ENEMY"},
	"UF_FAIL_MELEE":{"body":"UF_FAIL_MELEE", "description":"", "prefix": "UF_FAIL_MELEE"},
	"UF_FAIL_NIGHTMARED":{"body":"UF_FAIL_NIGHTMARED", "description":"", "prefix": "UF_FAIL_NIGHTMARED"},
	"UF_FAIL_NOT_PLAYER_CONTROLLED":{"body":"UF_FAIL_NOT_PLAYER_CONTROLLED", "description":"", "prefix": "UF_FAIL_NOT_PLAYER_CONTROLLED"},
	"UF_FAIL_OBSTRUCTED":{"body":"UF_FAIL_OBSTRUCTED", "description":"", "prefix": "UF_FAIL_OBSTRUCTED"},
	"UF_FAIL_OTHER":{"body":"UF_FAIL_OTHER", "description":"", "prefix": "UF_FAIL_OTHER"},
	"UF_FAIL_OUT_OF_WORLD":{"body":"UF_FAIL_OUT_OF_WORLD", "description":"", "prefix": "UF_FAIL_OUT_OF_WORLD"},
	"UF_FAIL_RANGED":{"body":"UF_FAIL_RANGED", "description":"", "prefix": "UF_FAIL_RANGED"},
	"UF_FAIL_SUMMONED":{"body":"UF_FAIL_SUMMONED", "description":"", "prefix": "UF_FAIL_SUMMONED"},
	"UF_SUCCESS":{"body":"UF_SUCCESS", "description":"", "prefix": "UF_SUCCESS"},
	"DOTA_ATTACK_RECORD_CANNOT_FAIL":{"body":"DOTA_ATTACK_RECORD_CANNOT_FAIL", "description":"", "prefix": "DOTA_ATTACK_RECORD_CANNOT_FAIL"},
	"DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION":{"body":"DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION"},
	"DOTA_ATTACK_RECORD_FAIL_NO":{"body":"DOTA_ATTACK_RECORD_FAIL_NO", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_NO"},
	"DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS":{"body":"DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS"},
	"DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED":{"body":"DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED"},
	"DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE":{"body":"DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE"},
	"DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE":{"body":"DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE"},
	"DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS":{"body":"DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS", "description":"", "prefix": "DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS"},
	"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL":{"body":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL", "description":"OnAbilityEndChannel", "prefix": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL"},
	"MODIFIER_EVENT_ON_ABILITY_EXECUTED":{"body":"MODIFIER_EVENT_ON_ABILITY_EXECUTED", "description":"OnAbilityExecuted", "prefix": "MODIFIER_EVENT_ON_ABILITY_EXECUTED"},
	"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST":{"body":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST", "description":"OnAbilityFullyCast", "prefix": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST"},
	"MODIFIER_EVENT_ON_ABILITY_START":{"body":"MODIFIER_EVENT_ON_ABILITY_START", "description":"OnAbilityStart", "prefix": "MODIFIER_EVENT_ON_ABILITY_START"},
	"MODIFIER_EVENT_ON_ATTACK":{"body":"MODIFIER_EVENT_ON_ATTACK", "description":"OnAttack", "prefix": "MODIFIER_EVENT_ON_ATTACK"},
	"MODIFIER_EVENT_ON_ATTACKED":{"body":"MODIFIER_EVENT_ON_ATTACKED", "description":"OnAttacked", "prefix": "MODIFIER_EVENT_ON_ATTACKED"},
	"MODIFIER_EVENT_ON_ATTACK_ALLIED":{"body":"MODIFIER_EVENT_ON_ATTACK_ALLIED", "description":"OnAttackAllied", "prefix": "MODIFIER_EVENT_ON_ATTACK_ALLIED"},
	"MODIFIER_EVENT_ON_ATTACK_CANCELLED":{"body":"MODIFIER_EVENT_ON_ATTACK_CANCELLED", "description":"OnAttackCancelled", "prefix": "MODIFIER_EVENT_ON_ATTACK_CANCELLED"},
	"MODIFIER_EVENT_ON_ATTACK_FAIL":{"body":"MODIFIER_EVENT_ON_ATTACK_FAIL", "description":"OnAttackFail", "prefix": "MODIFIER_EVENT_ON_ATTACK_FAIL"},
	"MODIFIER_EVENT_ON_ATTACK_FINISHED":{"body":"MODIFIER_EVENT_ON_ATTACK_FINISHED", "description":"OnAttackFinished", "prefix": "MODIFIER_EVENT_ON_ATTACK_FINISHED"},
	"MODIFIER_EVENT_ON_ATTACK_LANDED":{"body":"MODIFIER_EVENT_ON_ATTACK_LANDED", "description":"OnAttackLanded", "prefix": "MODIFIER_EVENT_ON_ATTACK_LANDED"},
	"MODIFIER_EVENT_ON_ATTACK_RECORD":{"body":"MODIFIER_EVENT_ON_ATTACK_RECORD", "description":"OnAttackRecord", "prefix": "MODIFIER_EVENT_ON_ATTACK_RECORD"},
	"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY":{"body":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY", "description":"OnAttackRecordDestroy", "prefix": "MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY"},
	"MODIFIER_EVENT_ON_ATTACK_START":{"body":"MODIFIER_EVENT_ON_ATTACK_START", "description":"OnAttackStart", "prefix": "MODIFIER_EVENT_ON_ATTACK_START"},
	"MODIFIER_EVENT_ON_BREAK_INVISIBILITY":{"body":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY", "description":"OnBreakInvisibility", "prefix": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY"},
	"MODIFIER_EVENT_ON_BUILDING_KILLED":{"body":"MODIFIER_EVENT_ON_BUILDING_KILLED", "description":"OnBuildingKilled", "prefix": "MODIFIER_EVENT_ON_BUILDING_KILLED"},
	"MODIFIER_EVENT_ON_DAMAGE_CALCULATED":{"body":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED", "description":"OnDamageCalculated", "prefix": "MODIFIER_EVENT_ON_DAMAGE_CALCULATED"},
	"MODIFIER_EVENT_ON_DEATH":{"body":"MODIFIER_EVENT_ON_DEATH", "description":"OnDeath", "prefix": "MODIFIER_EVENT_ON_DEATH"},
	"MODIFIER_EVENT_ON_DOMINATED":{"body":"MODIFIER_EVENT_ON_DOMINATED", "description":"OnDominated", "prefix": "MODIFIER_EVENT_ON_DOMINATED"},
	"MODIFIER_EVENT_ON_HEALTH_GAINED":{"body":"MODIFIER_EVENT_ON_HEALTH_GAINED", "description":"OnHealthGained", "prefix": "MODIFIER_EVENT_ON_HEALTH_GAINED"},
	"MODIFIER_EVENT_ON_HEAL_RECEIVED":{"body":"MODIFIER_EVENT_ON_HEAL_RECEIVED", "description":"OnHealReceived", "prefix": "MODIFIER_EVENT_ON_HEAL_RECEIVED"},
	"MODIFIER_EVENT_ON_HERO_KILLED":{"body":"MODIFIER_EVENT_ON_HERO_KILLED", "description":"OnHeroKilled", "prefix": "MODIFIER_EVENT_ON_HERO_KILLED"},
	"MODIFIER_EVENT_ON_MANA_GAINED":{"body":"MODIFIER_EVENT_ON_MANA_GAINED", "description":"OnManaGained", "prefix": "MODIFIER_EVENT_ON_MANA_GAINED"},
	"MODIFIER_EVENT_ON_MODEL_CHANGED":{"body":"MODIFIER_EVENT_ON_MODEL_CHANGED", "description":"OnModelChanged", "prefix": "MODIFIER_EVENT_ON_MODEL_CHANGED"},
	"MODIFIER_EVENT_ON_MODIFIER_ADDED":{"body":"MODIFIER_EVENT_ON_MODIFIER_ADDED", "description":"OnModifierAdded", "prefix": "MODIFIER_EVENT_ON_MODIFIER_ADDED"},
	"MODIFIER_EVENT_ON_ORB_EFFECT":{"body":"MODIFIER_EVENT_ON_ORB_EFFECT", "description":"Unused", "prefix": "MODIFIER_EVENT_ON_ORB_EFFECT"},
	"MODIFIER_EVENT_ON_ORDER":{"body":"MODIFIER_EVENT_ON_ORDER", "description":"OnOrder", "prefix": "MODIFIER_EVENT_ON_ORDER"},
	"MODIFIER_EVENT_ON_PROCESS_CLEAVE":{"body":"MODIFIER_EVENT_ON_PROCESS_CLEAVE", "description":"OnProcessCleave", "prefix": "MODIFIER_EVENT_ON_PROCESS_CLEAVE"},
	"MODIFIER_EVENT_ON_PROCESS_UPGRADE":{"body":"MODIFIER_EVENT_ON_PROCESS_UPGRADE", "description":"Unused", "prefix": "MODIFIER_EVENT_ON_PROCESS_UPGRADE"},
	"MODIFIER_EVENT_ON_PROJECTILE_DODGE":{"body":"MODIFIER_EVENT_ON_PROJECTILE_DODGE", "description":"OnProjectileDodge", "prefix": "MODIFIER_EVENT_ON_PROJECTILE_DODGE"},
	"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT":{"body":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT", "description":"OnProjectileObstructionHit", "prefix": "MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT"},
	"MODIFIER_EVENT_ON_REFRESH":{"body":"MODIFIER_EVENT_ON_REFRESH", "description":"Unused", "prefix": "MODIFIER_EVENT_ON_REFRESH"},
	"MODIFIER_EVENT_ON_RESPAWN":{"body":"MODIFIER_EVENT_ON_RESPAWN", "description":"OnRespawn", "prefix": "MODIFIER_EVENT_ON_RESPAWN"},
	"MODIFIER_EVENT_ON_SET_LOCATION":{"body":"MODIFIER_EVENT_ON_SET_LOCATION", "description":"OnSetLocation", "prefix": "MODIFIER_EVENT_ON_SET_LOCATION"},
	"MODIFIER_EVENT_ON_SPELL_TARGET_READY":{"body":"MODIFIER_EVENT_ON_SPELL_TARGET_READY", "description":"OnSpellTargetReady", "prefix": "MODIFIER_EVENT_ON_SPELL_TARGET_READY"},
	"MODIFIER_EVENT_ON_SPENT_MANA":{"body":"MODIFIER_EVENT_ON_SPENT_MANA", "description":"OnSpentMana", "prefix": "MODIFIER_EVENT_ON_SPENT_MANA"},
	"MODIFIER_EVENT_ON_STATE_CHANGED":{"body":"MODIFIER_EVENT_ON_STATE_CHANGED", "description":"OnStateChanged", "prefix": "MODIFIER_EVENT_ON_STATE_CHANGED"},
	"MODIFIER_EVENT_ON_TAKEDAMAGE":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE", "description":"OnTakeDamage", "prefix": "MODIFIER_EVENT_ON_TAKEDAMAGE"},
	"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT", "description":"OnTakeDamageKillCredit", "prefix": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT"},
	"MODIFIER_EVENT_ON_TELEPORTED":{"body":"MODIFIER_EVENT_ON_TELEPORTED", "description":"OnTeleported", "prefix": "MODIFIER_EVENT_ON_TELEPORTED"},
	"MODIFIER_EVENT_ON_TELEPORTING":{"body":"MODIFIER_EVENT_ON_TELEPORTING", "description":"OnTeleporting", "prefix": "MODIFIER_EVENT_ON_TELEPORTING"},
	"MODIFIER_EVENT_ON_UNIT_MOVED":{"body":"MODIFIER_EVENT_ON_UNIT_MOVED", "description":"OnUnitMoved", "prefix": "MODIFIER_EVENT_ON_UNIT_MOVED"},
	"MODIFIER_FUNCTION_INVALID":{"body":"MODIFIER_FUNCTION_INVALID", "description":"", "prefix": "MODIFIER_FUNCTION_INVALID"},
	"MODIFIER_FUNCTION_LAST":{"body":"MODIFIER_FUNCTION_LAST", "description":"", "prefix": "MODIFIER_FUNCTION_LAST"},
	"MODIFIER_PROPERTY_ABILITY_LAYOUT":{"body":"MODIFIER_PROPERTY_ABILITY_LAYOUT", "description":"GetModifierAbilityLayout", "prefix": "MODIFIER_PROPERTY_ABILITY_LAYOUT"},
	"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL", "description":"GetAbsoluteNoDamageMagical", "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL"},
	"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL", "description":"GetAbsoluteNoDamagePhysical", "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL"},
	"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE", "description":"GetAbsoluteNoDamagePure", "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE"},
	"MODIFIER_PROPERTY_ABSORB_SPELL":{"body":"MODIFIER_PROPERTY_ABSORB_SPELL", "description":"GetAbsorbSpell", "prefix": "MODIFIER_PROPERTY_ABSORB_SPELL"},
	"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK":{"body":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK", "description":"GetAlwaysAllowAttack", "prefix": "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK"},
	"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE", "description":"GetModifierAttackSpeedBaseOverride", "prefix": "MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE"},
	"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT", "description":"GetModifierAttackSpeedBonus_Constant", "prefix": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT"},
	"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT", "description":"GetModifierAttackPointConstant", "prefix": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT"},
	"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE", "description":"GetModifierAttackRangeOverride", "prefix": "MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE"},
	"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS", "description":"GetModifierAttackRangeBonus", "prefix": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS"},
	"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE", "description":"GetModifierAttackRangeBonusPercentage", "prefix": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE"},
	"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE", "description":"GetModifierAttackRangeBonusUnique", "prefix": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE"},
	"MODIFIER_PROPERTY_AVOID_DAMAGE":{"body":"MODIFIER_PROPERTY_AVOID_DAMAGE", "description":"GetModifierAvoidDamage", "prefix": "MODIFIER_PROPERTY_AVOID_DAMAGE"},
	"MODIFIER_PROPERTY_AVOID_SPELL":{"body":"MODIFIER_PROPERTY_AVOID_SPELL", "description":"GetModifierAvoidSpell", "prefix": "MODIFIER_PROPERTY_AVOID_SPELL"},
	"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE":{"body":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE", "description":"GetModifierBaseAttack_BonusDamage", "prefix": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE"},
	"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE", "description":"GetModifierBaseDamageOutgoing_Percentage", "prefix": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE"},
	"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE", "description":"GetModifierBaseDamageOutgoing_PercentageUnique", "prefix": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE"},
	"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT":{"body":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT", "description":"GetModifierBaseAttackTimeConstant", "prefix": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT"},
	"MODIFIER_PROPERTY_BASE_MANA_REGEN":{"body":"MODIFIER_PROPERTY_BASE_MANA_REGEN", "description":"GetModifierBaseRegen", "prefix": "MODIFIER_PROPERTY_BASE_MANA_REGEN"},
	"MODIFIER_PROPERTY_BONUS_DAY_VISION":{"body":"MODIFIER_PROPERTY_BONUS_DAY_VISION", "description":"GetBonusDayVision", "prefix": "MODIFIER_PROPERTY_BONUS_DAY_VISION"},
	"MODIFIER_PROPERTY_BONUS_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION", "description":"GetBonusNightVision", "prefix": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION"},
	"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE", "description":"GetBonusNightVisionUnique", "prefix": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE"},
	"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE", "description":"GetBonusVisionPercentage", "prefix": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE"},
	"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER", "description":"Unused", "prefix": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER"},
	"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER", "description":"Unused", "prefix": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER"},
	"MODIFIER_PROPERTY_CAN_ATTACK_TREES":{"body":"MODIFIER_PROPERTY_CAN_ATTACK_TREES", "description":"GetModifierCanAttackTrees", "prefix": "MODIFIER_PROPERTY_CAN_ATTACK_TREES"},
	"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE", "description":"GetModifierPercentageCasttime", "prefix": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE"},
	"MODIFIER_PROPERTY_CAST_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_CAST_RANGE_BONUS", "description":"GetModifierCastRangeBonus", "prefix": "MODIFIER_PROPERTY_CAST_RANGE_BONUS"},
	"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING":{"body":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING", "description":"GetModifierCastRangeBonusStacking", "prefix": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING"},
	"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET":{"body":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET", "description":"GetModifierCastRangeBonusTarget", "prefix": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET"},
	"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE":{"body":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE", "description":"GetModifierChangeAbilityValue", "prefix": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE"},
	"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE", "description":"GetModifierPercentageCooldown", "prefix": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE"},
	"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING", "description":"GetModifierPercentageCooldownStacking", "prefix": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING"},
	"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT":{"body":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT", "description":"GetModifierCooldownReduction_Constant", "prefix": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT"},
	"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE", "description":"GetModifierDamageOutgoing_Percentage", "prefix": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE"},
	"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION", "description":"GetModifierDamageOutgoing_Percentage_Illusion", "prefix": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION"},
	"MODIFIER_PROPERTY_DEATHGOLDCOST":{"body":"MODIFIER_PROPERTY_DEATHGOLDCOST", "description":"GetModifierConstantDeathGoldCost", "prefix": "MODIFIER_PROPERTY_DEATHGOLDCOST"},
	"MODIFIER_PROPERTY_DISABLE_AUTOATTACK":{"body":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK", "description":"GetDisableAutoAttack", "prefix": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK"},
	"MODIFIER_PROPERTY_DISABLE_HEALING":{"body":"MODIFIER_PROPERTY_DISABLE_HEALING", "description":"GetDisableHealing", "prefix": "MODIFIER_PROPERTY_DISABLE_HEALING"},
	"MODIFIER_PROPERTY_DISABLE_TURNING":{"body":"MODIFIER_PROPERTY_DISABLE_TURNING", "description":"GetModifierDisableTurning", "prefix": "MODIFIER_PROPERTY_DISABLE_TURNING"},
	"MODIFIER_PROPERTY_DODGE_PROJECTILE":{"body":"MODIFIER_PROPERTY_DODGE_PROJECTILE", "description":"GetModifierDodgeProjectile", "prefix": "MODIFIER_PROPERTY_DODGE_PROJECTILE"},
	"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER":{"body":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER", "description":"GetModifierNoVisionOfAttacker", "prefix": "MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER"},
	"MODIFIER_PROPERTY_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_EVASION_CONSTANT", "description":"GetModifierEvasion_Constant", "prefix": "MODIFIER_PROPERTY_EVASION_CONSTANT"},
	"MODIFIER_PROPERTY_EXP_RATE_BOOST":{"body":"MODIFIER_PROPERTY_EXP_RATE_BOOST", "description":"GetModifierPercentageExpRateBoost", "prefix": "MODIFIER_PROPERTY_EXP_RATE_BOOST"},
	"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS", "description":"GetModifierExtraHealthBonus", "prefix": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS"},
	"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE", "description":"GetModifierExtraHealthPercentage", "prefix": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE"},
	"MODIFIER_PROPERTY_EXTRA_MANA_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS", "description":"GetModifierExtraManaBonus", "prefix": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS"},
	"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS", "description":"GetModifierExtraStrengthBonus", "prefix": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS"},
	"MODIFIER_PROPERTY_FIXED_ATTACK_RATE":{"body":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE", "description":"GetModifierFixedAttackRate", "prefix": "MODIFIER_PROPERTY_FIXED_ATTACK_RATE"},
	"MODIFIER_PROPERTY_FIXED_DAY_VISION":{"body":"MODIFIER_PROPERTY_FIXED_DAY_VISION", "description":"GetFixedDayVision", "prefix": "MODIFIER_PROPERTY_FIXED_DAY_VISION"},
	"MODIFIER_PROPERTY_FIXED_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION", "description":"GetFixedNightVision", "prefix": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION"},
	"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP":{"body":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP", "description":"GetForceDrawOnMinimap", "prefix": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP"},
	"MODIFIER_PROPERTY_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_HEALTH_BONUS", "description":"GetModifierHealthBonus", "prefix": "MODIFIER_PROPERTY_HEALTH_BONUS"},
	"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT", "description":"GetModifierConstantHealthRegen", "prefix": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT"},
	"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE", "description":"GetModifierHealthRegenPercentage", "prefix": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE"},
	"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE", "description":"GetModifierHealthRegenPercentageUnique", "prefix": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE"},
	"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE", "description":"GetModifierHPRegenAmplify_Percentage", "prefix": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE"},
	"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE_SOURCE":{"body":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE_SOURCE", "description":"GetModifierHPRegenAmplify_PercentageSource", "prefix": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE_SOURCE"},
	"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE":{"body":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE", "description":"GetModifierIgnoreCastAngle", "prefix": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE"},
	"MODIFIER_PROPERTY_IGNORE_COOLDOWN":{"body":"MODIFIER_PROPERTY_IGNORE_COOLDOWN", "description":"GetModifierIgnoreCooldown", "prefix": "MODIFIER_PROPERTY_IGNORE_COOLDOWN"},
	"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT":{"body":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT", "description":"GetModifierIgnoreMovespeedLimit", "prefix": "MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT"},
	"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR":{"body":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR", "description":"GetModifierIgnorePhysicalArmor", "prefix": "MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR"},
	"MODIFIER_PROPERTY_ILLUSION_LABEL":{"body":"MODIFIER_PROPERTY_ILLUSION_LABEL", "description":"GetModifierIllusionLabel", "prefix": "MODIFIER_PROPERTY_ILLUSION_LABEL"},
	"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION":{"body":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION", "description":"", "prefix": "MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION"},
	"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE", "description":"GetModifierIncomingDamage_Percentage", "prefix": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE"},
	"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT", "description":"GetModifierIncomingPhysicalDamageConstant", "prefix": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT"},
	"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE", "description":"GetModifierIncomingPhysicalDamage_Percentage", "prefix": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE"},
	"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT", "description":"GetModifierIncomingSpellDamageConstant", "prefix": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT"},
	"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION":{"body":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION", "description":"GetModifierInvisibilityAttackBehaviorException", "prefix": "MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION"},
	"MODIFIER_PROPERTY_INVISIBILITY_LEVEL":{"body":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL", "description":"GetModifierInvisibilityLevel", "prefix": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL"},
	"MODIFIER_PROPERTY_IS_ILLUSION":{"body":"MODIFIER_PROPERTY_IS_ILLUSION", "description":"GetIsIllusion", "prefix": "MODIFIER_PROPERTY_IS_ILLUSION"},
	"MODIFIER_PROPERTY_IS_SCEPTER":{"body":"MODIFIER_PROPERTY_IS_SCEPTER", "description":"GetModifierScepter", "prefix": "MODIFIER_PROPERTY_IS_SCEPTER"},
	"MODIFIER_PROPERTY_LIFETIME_FRACTION":{"body":"MODIFIER_PROPERTY_LIFETIME_FRACTION", "description":"GetUnitLifetimeFraction", "prefix": "MODIFIER_PROPERTY_LIFETIME_FRACTION"},
	"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK", "description":"GetModifierMagical_ConstantBlock", "prefix": "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK"},
	"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS", "description":"GetModifierMagicalResistanceBonus", "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS"},
	"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE", "description":"GetModifierMagicalResistanceDecrepifyUnique", "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE"},
	"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION", "description":"GetModifierMagicalResistanceDirectModification", "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION"},
	"MODIFIER_PROPERTY_MANACOST_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE", "description":"GetModifierPercentageManacost", "prefix": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE"},
	"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING":{"body":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING", "description":"GetModifierPercentageManacostStacking", "prefix": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING"},
	"MODIFIER_PROPERTY_MANA_BONUS":{"body":"MODIFIER_PROPERTY_MANA_BONUS", "description":"GetModifierManaBonus", "prefix": "MODIFIER_PROPERTY_MANA_BONUS"},
	"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT", "description":"GetModifierConstantManaRegen", "prefix": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT"},
	"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE", "description":"GetModifierConstantManaRegenUnique", "prefix": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE"},
	"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE", "description":"GetModifierTotalPercentageManaRegen", "prefix": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE"},
	"MODIFIER_PROPERTY_MAX_ATTACK_RANGE":{"body":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE", "description":"GetModifierMaxAttackRange", "prefix": "MODIFIER_PROPERTY_MAX_ATTACK_RANGE"},
	"MODIFIER_PROPERTY_MIN_HEALTH":{"body":"MODIFIER_PROPERTY_MIN_HEALTH", "description":"GetMinHealth", "prefix": "MODIFIER_PROPERTY_MIN_HEALTH"},
	"MODIFIER_PROPERTY_MISS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MISS_PERCENTAGE", "description":"GetModifierMiss_Percentage", "prefix": "MODIFIER_PROPERTY_MISS_PERCENTAGE"},
	"MODIFIER_PROPERTY_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_MODEL_CHANGE", "description":"GetModifierModelChange", "prefix": "MODIFIER_PROPERTY_MODEL_CHANGE"},
	"MODIFIER_PROPERTY_MODEL_SCALE":{"body":"MODIFIER_PROPERTY_MODEL_SCALE", "description":"GetModifierModelScale", "prefix": "MODIFIER_PROPERTY_MODEL_SCALE"},
	"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE", "description":"GetModifierMoveSpeed_Absolute", "prefix": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE"},
	"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX", "description":"GetModifierMoveSpeed_AbsoluteMax", "prefix": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX"},
	"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN", "description":"GetModifierMoveSpeed_AbsoluteMin", "prefix": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN"},
	"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE", "description":"GetModifierMoveSpeedOverride", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT", "description":"GetModifierMoveSpeedBonus_Constant", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE", "description":"GetModifierMoveSpeedBonus_Constant_Unique", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2", "description":"GetModifierMoveSpeedBonus_Constant_Unique_2", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE", "description":"GetModifierMoveSpeedBonus_Percentage", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE", "description":"GetModifierMoveSpeedBonus_Percentage_Unique", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2", "description":"GetModifierMoveSpeedBonus_Percentage_Unique_2", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE", "description":"GetModifierMoveSpeedBonus_Special_Boots", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE"},
	"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2", "description":"GetModifierMoveSpeedBonus_Special_Boots_2", "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2"},
	"MODIFIER_PROPERTY_MOVESPEED_LIMIT":{"body":"MODIFIER_PROPERTY_MOVESPEED_LIMIT", "description":"GetModifierMoveSpeed_Limit", "prefix": "MODIFIER_PROPERTY_MOVESPEED_LIMIT"},
	"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE", "description":"GetModifierMPRegenAmplify_Percentage", "prefix": "MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE"},
	"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE", "description":"GetModifierMPRestoreAmplify_Percentage", "prefix": "MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE"},
	"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT", "description":"GetModifierNegativeEvasion_Constant", "prefix": "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT"},
	"MODIFIER_PROPERTY_OVERRIDE_ANIMATION":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION", "description":"GetOverrideAnimation", "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION"},
	"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE", "description":"GetOverrideAnimationRate", "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE"},
	"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT", "description":"GetOverrideAnimationWeight", "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT"},
	"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE":{"body":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE", "description":"GetModifierOverrideAttackDamage", "prefix": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE"},
	"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL":{"body":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL", "description":"GetOverrideAttackMagical", "prefix": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL"},
	"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY":{"body":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY", "description":"GetModifierPersistentInvisibility", "prefix": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY"},
	"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS", "description":"GetModifierPhysicalArmorBonus", "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS"},
	"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE", "description":"GetModifierPhysicalArmorBonusUnique", "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE"},
	"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE", "description":"GetModifierPhysicalArmorBonusUniqueActive", "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE"},
	"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK", "description":"GetModifierPhysical_ConstantBlock", "prefix": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK"},
	"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL", "description":"GetModifierPhysical_ConstantBlockSpecial", "prefix": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL"},
	"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE", "description":"GetModifierPreAttack_BonusDamage", "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE"},
	"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT", "description":"GetModifierPreAttack_BonusDamagePostCrit", "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT"},
	"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC", "description":"GetModifierPreAttack_BonusDamage_Proc", "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC"},
	"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET", "description":"GetModifierPreAttack_BonusDamage_Target", "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET"},
	"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE", "description":"GetModifierPreAttack_CriticalStrike", "prefix": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE"},
	"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE", "description":"GetModifierPreAttack_Target_CriticalStrike", "prefix": "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE"},
	"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE", "description":"PreserveParticlesOnModelChanged", "prefix": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE"},
	"MODIFIER_PROPERTY_PRE_ATTACK":{"body":"MODIFIER_PROPERTY_PRE_ATTACK", "description":"GetModifierPreAttack", "prefix": "MODIFIER_PROPERTY_PRE_ATTACK"},
	"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL", "description":"GetModifierProcAttack_BonusDamage_Magical", "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL"},
	"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL", "description":"GetModifierProcAttack_BonusDamage_Physical", "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL"},
	"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE", "description":"GetModifierProcAttack_BonusDamage_Pure", "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE"},
	"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK":{"body":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK", "description":"GetModifierProcAttack_Feedback", "prefix": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK"},
	"MODIFIER_PROPERTY_PROJECTILE_NAME":{"body":"MODIFIER_PROPERTY_PROJECTILE_NAME", "description":"GetModifierProjectileName", "prefix": "MODIFIER_PROPERTY_PROJECTILE_NAME"},
	"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS":{"body":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS", "description":"GetModifierProjectileSpeedBonus", "prefix": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS"},
	"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION":{"body":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION", "description":"GetModifierProvidesFOWVision", "prefix": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION"},
	"MODIFIER_PROPERTY_REFLECT_SPELL":{"body":"MODIFIER_PROPERTY_REFLECT_SPELL", "description":"GetReflectSpell", "prefix": "MODIFIER_PROPERTY_REFLECT_SPELL"},
	"MODIFIER_PROPERTY_REINCARNATION":{"body":"MODIFIER_PROPERTY_REINCARNATION", "description":"ReincarnateTime", "prefix": "MODIFIER_PROPERTY_REINCARNATION"},
	"MODIFIER_PROPERTY_RESPAWNTIME":{"body":"MODIFIER_PROPERTY_RESPAWNTIME", "description":"GetModifierConstantRespawnTime", "prefix": "MODIFIER_PROPERTY_RESPAWNTIME"},
	"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE", "description":"GetModifierPercentageRespawnTime", "prefix": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE"},
	"MODIFIER_PROPERTY_RESPAWNTIME_STACKING":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING", "description":"GetModifierStackingRespawnTime", "prefix": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING"},
	"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP":{"body":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP", "description":"GetModifierSpellsRequireHP", "prefix": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP"},
	"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE", "description":"GetModifierSpellAmplify_Percentage", "prefix": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE"},
	"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE", "description":"GetModifierSpellAmplify_PercentageUnique", "prefix": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE"},
	"MODIFIER_PROPERTY_STATS_AGILITY_BONUS":{"body":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS", "description":"GetModifierBonusStats_Agility", "prefix": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS"},
	"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS":{"body":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS", "description":"GetModifierBonusStats_Intellect", "prefix": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS"},
	"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS", "description":"GetModifierBonusStats_Strength", "prefix": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS"},
	"MODIFIER_PROPERTY_STATUS_RESISTANCE":{"body":"MODIFIER_PROPERTY_STATUS_RESISTANCE", "description":"GetModifierStatusResistance", "prefix": "MODIFIER_PROPERTY_STATUS_RESISTANCE"},
	"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER":{"body":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER", "description":"GetModifierStatusResistanceCaster", "prefix": "MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER"},
	"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING":{"body":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING", "description":"GetModifierStatusResistanceStacking", "prefix": "MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING"},
	"MODIFIER_PROPERTY_SUPER_ILLUSION":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION", "description":"GetModifierSuperIllusion", "prefix": "MODIFIER_PROPERTY_SUPER_ILLUSION"},
	"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE", "description":"GetModifierSuperIllusionWithUltimate", "prefix": "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE"},
	"MODIFIER_PROPERTY_SUPPRESS_TELEPORT":{"body":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT", "description":"GetSuppressTeleport", "prefix": "MODIFIER_PROPERTY_SUPPRESS_TELEPORT"},
	"MODIFIER_PROPERTY_TEMPEST_DOUBLE":{"body":"MODIFIER_PROPERTY_TEMPEST_DOUBLE", "description":"GetModifierTempestDouble", "prefix": "MODIFIER_PROPERTY_TEMPEST_DOUBLE"},
	"MODIFIER_PROPERTY_TOOLTIP":{"body":"MODIFIER_PROPERTY_TOOLTIP", "description":"OnTooltip", "prefix": "MODIFIER_PROPERTY_TOOLTIP"},
	"MODIFIER_PROPERTY_TOOLTIP2":{"body":"MODIFIER_PROPERTY_TOOLTIP2", "description":"OnTooltip2", "prefix": "MODIFIER_PROPERTY_TOOLTIP2"},
	"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE", "description":"GetModifierTotalDamageOutgoing_Percentage", "prefix": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE"},
	"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK", "description":"GetModifierTotal_ConstantBlock", "prefix": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK"},
	"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR", "description":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor", "prefix": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR"},
	"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS":{"body":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS", "description":"GetActivityTranslationModifiers", "prefix": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS"},
	"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND":{"body":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND", "description":"GetAttackSound", "prefix": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND"},
	"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE":{"body":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE", "description":"GetModifierTurnRate_Override", "prefix": "MODIFIER_PROPERTY_TURN_RATE_OVERRIDE"},
	"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE", "description":"GetModifierTurnRate_Percentage", "prefix": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE"},
	"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING":{"body":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING", "description":"GetModifierUnitDisllowUpgrading", "prefix": "MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING"},
	"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH":{"body":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH", "description":"GetModifierUnitStatsNeedsRefresh", "prefix": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH"},
	"MODIFIER_PROPERTY_VISUAL_Z_DELTA":{"body":"MODIFIER_PROPERTY_VISUAL_Z_DELTA", "description":"GetVisualZDelta", "prefix": "MODIFIER_PROPERTY_VISUAL_Z_DELTA"},
	"MODIFIER_PRIORITY_HIGH":{"body":"MODIFIER_PRIORITY_HIGH", "description":"", "prefix": "MODIFIER_PRIORITY_HIGH"},
	"MODIFIER_PRIORITY_LOW":{"body":"MODIFIER_PRIORITY_LOW", "description":"", "prefix": "MODIFIER_PRIORITY_LOW"},
	"MODIFIER_PRIORITY_NORMAL":{"body":"MODIFIER_PRIORITY_NORMAL", "description":"", "prefix": "MODIFIER_PRIORITY_NORMAL"},
	"MODIFIER_PRIORITY_SUPER_ULTRA":{"body":"MODIFIER_PRIORITY_SUPER_ULTRA", "description":"", "prefix": "MODIFIER_PRIORITY_SUPER_ULTRA"},
	"MODIFIER_PRIORITY_ULTRA":{"body":"MODIFIER_PRIORITY_ULTRA", "description":"", "prefix": "MODIFIER_PRIORITY_ULTRA"},
	"DOTA_BUFF_REMOVE_ALL":{"body":"DOTA_BUFF_REMOVE_ALL", "description":"", "prefix": "DOTA_BUFF_REMOVE_ALL"},
	"DOTA_BUFF_REMOVE_ALLY":{"body":"DOTA_BUFF_REMOVE_ALLY", "description":"", "prefix": "DOTA_BUFF_REMOVE_ALLY"},
	"DOTA_BUFF_REMOVE_ENEMY":{"body":"DOTA_BUFF_REMOVE_ENEMY", "description":"", "prefix": "DOTA_BUFF_REMOVE_ENEMY"},
	"MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES":{"body":"MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES", "description":"", "prefix": "MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES"},
	"MODIFIER_STATE_ATTACK_IMMUNE":{"body":"MODIFIER_STATE_ATTACK_IMMUNE", "description":"", "prefix": "MODIFIER_STATE_ATTACK_IMMUNE"},
	"MODIFIER_STATE_BLIND":{"body":"MODIFIER_STATE_BLIND", "description":"", "prefix": "MODIFIER_STATE_BLIND"},
	"MODIFIER_STATE_BLOCK_DISABLED":{"body":"MODIFIER_STATE_BLOCK_DISABLED", "description":"", "prefix": "MODIFIER_STATE_BLOCK_DISABLED"},
	"MODIFIER_STATE_CANNOT_MISS":{"body":"MODIFIER_STATE_CANNOT_MISS", "description":"", "prefix": "MODIFIER_STATE_CANNOT_MISS"},
	"MODIFIER_STATE_CANNOT_TARGET_ENEMIES":{"body":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES", "description":"", "prefix": "MODIFIER_STATE_CANNOT_TARGET_ENEMIES"},
	"MODIFIER_STATE_COMMAND_RESTRICTED":{"body":"MODIFIER_STATE_COMMAND_RESTRICTED", "description":"", "prefix": "MODIFIER_STATE_COMMAND_RESTRICTED"},
	"MODIFIER_STATE_DISARMED":{"body":"MODIFIER_STATE_DISARMED", "description":"", "prefix": "MODIFIER_STATE_DISARMED"},
	"MODIFIER_STATE_DOMINATED":{"body":"MODIFIER_STATE_DOMINATED", "description":"", "prefix": "MODIFIER_STATE_DOMINATED"},
	"MODIFIER_STATE_EVADE_DISABLED":{"body":"MODIFIER_STATE_EVADE_DISABLED", "description":"", "prefix": "MODIFIER_STATE_EVADE_DISABLED"},
	"MODIFIER_STATE_FAKE_ALLY":{"body":"MODIFIER_STATE_FAKE_ALLY", "description":"", "prefix": "MODIFIER_STATE_FAKE_ALLY"},
	"MODIFIER_STATE_FLYING":{"body":"MODIFIER_STATE_FLYING", "description":"", "prefix": "MODIFIER_STATE_FLYING"},
	"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY":{"body":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY", "description":"", "prefix": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"},
	"MODIFIER_STATE_FROZEN":{"body":"MODIFIER_STATE_FROZEN", "description":"", "prefix": "MODIFIER_STATE_FROZEN"},
	"MODIFIER_STATE_HEXED":{"body":"MODIFIER_STATE_HEXED", "description":"", "prefix": "MODIFIER_STATE_HEXED"},
	"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS":{"body":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS", "description":"", "prefix": "MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS"},
	"MODIFIER_STATE_INVISIBLE":{"body":"MODIFIER_STATE_INVISIBLE", "description":"", "prefix": "MODIFIER_STATE_INVISIBLE"},
	"MODIFIER_STATE_INVULNERABLE":{"body":"MODIFIER_STATE_INVULNERABLE", "description":"", "prefix": "MODIFIER_STATE_INVULNERABLE"},
	"MODIFIER_STATE_LAST":{"body":"MODIFIER_STATE_LAST", "description":"", "prefix": "MODIFIER_STATE_LAST"},
	"MODIFIER_STATE_LOW_ATTACK_PRIORITY":{"body":"MODIFIER_STATE_LOW_ATTACK_PRIORITY", "description":"", "prefix": "MODIFIER_STATE_LOW_ATTACK_PRIORITY"},
	"MODIFIER_STATE_MAGIC_IMMUNE":{"body":"MODIFIER_STATE_MAGIC_IMMUNE", "description":"", "prefix": "MODIFIER_STATE_MAGIC_IMMUNE"},
	"MODIFIER_STATE_MUTED":{"body":"MODIFIER_STATE_MUTED", "description":"", "prefix": "MODIFIER_STATE_MUTED"},
	"MODIFIER_STATE_NIGHTMARED":{"body":"MODIFIER_STATE_NIGHTMARED", "description":"", "prefix": "MODIFIER_STATE_NIGHTMARED"},
	"MODIFIER_STATE_NOT_ON_MINIMAP":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP", "description":"", "prefix": "MODIFIER_STATE_NOT_ON_MINIMAP"},
	"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES", "description":"", "prefix": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"},
	"MODIFIER_STATE_NO_HEALTH_BAR":{"body":"MODIFIER_STATE_NO_HEALTH_BAR", "description":"", "prefix": "MODIFIER_STATE_NO_HEALTH_BAR"},
	"MODIFIER_STATE_NO_TEAM_MOVE_TO":{"body":"MODIFIER_STATE_NO_TEAM_MOVE_TO", "description":"", "prefix": "MODIFIER_STATE_NO_TEAM_MOVE_TO"},
	"MODIFIER_STATE_NO_TEAM_SELECT":{"body":"MODIFIER_STATE_NO_TEAM_SELECT", "description":"", "prefix": "MODIFIER_STATE_NO_TEAM_SELECT"},
	"MODIFIER_STATE_NO_UNIT_COLLISION":{"body":"MODIFIER_STATE_NO_UNIT_COLLISION", "description":"", "prefix": "MODIFIER_STATE_NO_UNIT_COLLISION"},
	"MODIFIER_STATE_OUT_OF_GAME":{"body":"MODIFIER_STATE_OUT_OF_GAME", "description":"", "prefix": "MODIFIER_STATE_OUT_OF_GAME"},
	"MODIFIER_STATE_PASSIVES_DISABLED":{"body":"MODIFIER_STATE_PASSIVES_DISABLED", "description":"", "prefix": "MODIFIER_STATE_PASSIVES_DISABLED"},
	"MODIFIER_STATE_PROVIDES_VISION":{"body":"MODIFIER_STATE_PROVIDES_VISION", "description":"", "prefix": "MODIFIER_STATE_PROVIDES_VISION"},
	"MODIFIER_STATE_ROOTED":{"body":"MODIFIER_STATE_ROOTED", "description":"", "prefix": "MODIFIER_STATE_ROOTED"},
	"MODIFIER_STATE_SILENCED":{"body":"MODIFIER_STATE_SILENCED", "description":"", "prefix": "MODIFIER_STATE_SILENCED"},
	"MODIFIER_STATE_SPECIALLY_DENIABLE":{"body":"MODIFIER_STATE_SPECIALLY_DENIABLE", "description":"", "prefix": "MODIFIER_STATE_SPECIALLY_DENIABLE"},
	"MODIFIER_STATE_STUNNED":{"body":"MODIFIER_STATE_STUNNED", "description":"", "prefix": "MODIFIER_STATE_STUNNED"},
	"MODIFIER_STATE_TETHERED":{"body":"MODIFIER_STATE_TETHERED", "description":"", "prefix": "MODIFIER_STATE_TETHERED"},
	"MODIFIER_STATE_TRUESIGHT_IMMUNE":{"body":"MODIFIER_STATE_TRUESIGHT_IMMUNE", "description":"", "prefix": "MODIFIER_STATE_TRUESIGHT_IMMUNE"},
	"MODIFIER_STATE_UNSELECTABLE":{"body":"MODIFIER_STATE_UNSELECTABLE", "description":"", "prefix": "MODIFIER_STATE_UNSELECTABLE"},
	"MODIFIER_STATE_UNSLOWABLE":{"body":"MODIFIER_STATE_UNSLOWABLE", "description":"", "prefix": "MODIFIER_STATE_UNSLOWABLE"},
	"MODIFIER_STATE_UNTARGETABLE":{"body":"MODIFIER_STATE_UNTARGETABLE", "description":"", "prefix": "MODIFIER_STATE_UNTARGETABLE"},
	"QUEST_NUM_TEXT_REPLACE_VALUES":{"body":"QUEST_NUM_TEXT_REPLACE_VALUES", "description":"", "prefix": "QUEST_NUM_TEXT_REPLACE_VALUES"},
	"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE", "description":"", "prefix": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
	"QUEST_TEXT_REPLACE_VALUE_REWARD":{"body":"QUEST_TEXT_REPLACE_VALUE_REWARD", "description":"", "prefix": "QUEST_TEXT_REPLACE_VALUE_REWARD"},
	"QUEST_TEXT_REPLACE_VALUE_ROUND":{"body":"QUEST_TEXT_REPLACE_VALUE_ROUND", "description":"", "prefix": "QUEST_TEXT_REPLACE_VALUE_ROUND"},
	"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE", "description":"", "prefix": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
	"SUBQUEST_NUM_TEXT_REPLACE_VALUES":{"body":"SUBQUEST_NUM_TEXT_REPLACE_VALUES", "description":"", "prefix": "SUBQUEST_NUM_TEXT_REPLACE_VALUES"},
	"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE", "description":"", "prefix": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
	"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE", "description":"", "prefix": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
	"CBaseAnimating_ActiveSequenceDuration":
	{
		"body":"ActiveSequenceDuration()",
		"description":"CBaseAnimating_ActiveSequenceDuration:\nReturns the duration in seconds of the active sequence.\nreturn float",
		"prefix":"ActiveSequenceDuration"
	},
	"CBaseAnimating_GetAttachmentAngles":
	{
		"body":"GetAttachmentAngles(${iAttachment})",
		"description":"CBaseAnimating_GetAttachmentAngles:\nGet the attachment id's angles as a p,y,r vector.\nreturn Vector",
		"prefix":"GetAttachmentAngles"
	},
	"CBaseAnimating_GetAttachmentOrigin":
	{
		"body":"GetAttachmentOrigin(${iAttachment})",
		"description":"CBaseAnimating_GetAttachmentOrigin:\nGet the attachment id's origin vector.\nreturn Vector",
		"prefix":"GetAttachmentOrigin"
	},
	"CBaseAnimating_GetCycle":
	{
		"body":"GetCycle()",
		"description":"CBaseAnimating_GetCycle:\nGet the cycle of the animation.\nreturn float",
		"prefix":"GetCycle"
	},
	"CBaseAnimating_GetGraphParameter":
	{
		"body":"GetGraphParameter(${pszParam})",
		"description":"CBaseAnimating_GetGraphParameter:\nGet the value of the given animGraph parameter\nreturn table",
		"prefix":"GetGraphParameter"
	},
	"CBaseAnimating_GetModelScale":
	{
		"body":"GetModelScale()",
		"description":"CBaseAnimating_GetModelScale:\nGet scale of entity's model.\nreturn float",
		"prefix":"GetModelScale"
	},
	"CBaseAnimating_GetSequence":
	{
		"body":"GetSequence()",
		"description":"CBaseAnimating_GetSequence:\nReturns the name of the active sequence.\nreturn string",
		"prefix":"GetSequence"
	},
	"CBaseAnimating_IsSequenceFinished":
	{
		"body":"IsSequenceFinished()",
		"description":"CBaseAnimating_IsSequenceFinished:\nAsk whether the main sequence is done playing.\nreturn bool",
		"prefix":"IsSequenceFinished"
	},
	"CBaseAnimating_ResetSequence":
	{
		"body":"ResetSequence(${pSequenceName})",
		"description":"CBaseAnimating_ResetSequence:\nSets the active sequence by name, resetting the current cycle.\nreturn void",
		"prefix":"ResetSequence"
	},
	"CBaseAnimating_ScriptLookupAttachment":
	{
		"body":"ScriptLookupAttachment(${pAttachmentName})",
		"description":"CBaseAnimating_ScriptLookupAttachment:\nGet the named attachment id.\nreturn int",
		"prefix":"ScriptLookupAttachment"
	},
	"CBaseAnimating_SequenceDuration":
	{
		"body":"SequenceDuration(${pSequenceName})",
		"description":"CBaseAnimating_SequenceDuration:\nReturns the duration in seconds of the given sequence name.\nreturn float",
		"prefix":"SequenceDuration"
	},
	"CBaseAnimating_SetGraphLookTarget":
	{
		"body":"SetGraphLookTarget(${vValue})",
		"description":"CBaseAnimating_SetGraphLookTarget:\nPass the desired look target in world space to the graph\nreturn void",
		"prefix":"SetGraphLookTarget"
	},
	"CBaseAnimating_SetGraphParameter":
	{
		"body":"SetGraphParameter(${pszParam}, ${svArg})",
		"description":"CBaseAnimating_SetGraphParameter:\nSet the specific param value, type is inferred from the type in script\nreturn void",
		"prefix":"SetGraphParameter"
	},
	"CBaseAnimating_SetGraphParameterBool":
	{
		"body":"SetGraphParameterBool(${szName}, ${bValue})",
		"description":"CBaseAnimating_SetGraphParameterBool:\nSet the specific param on or off\nreturn void",
		"prefix":"SetGraphParameterBool"
	},
	"CBaseAnimating_SetGraphParameterEnum":
	{
		"body":"SetGraphParameterEnum(${szName}, ${nValue})",
		"description":"CBaseAnimating_SetGraphParameterEnum:\nPass the enum (int) value to the specified param\nreturn void",
		"prefix":"SetGraphParameterEnum"
	},
	"CBaseAnimating_SetGraphParameterFloat":
	{
		"body":"SetGraphParameterFloat(${szName}, ${flValue})",
		"description":"CBaseAnimating_SetGraphParameterFloat:\nPass the float value to the specified param\nreturn void",
		"prefix":"SetGraphParameterFloat"
	},
	"CBaseAnimating_SetGraphParameterInt":
	{
		"body":"SetGraphParameterInt(${szName}, ${nValue})",
		"description":"CBaseAnimating_SetGraphParameterInt:\nPass the int value to the specified param\nreturn void",
		"prefix":"SetGraphParameterInt"
	},
	"CBaseAnimating_SetGraphParameterVector":
	{
		"body":"SetGraphParameterVector(${szName}, ${vValue})",
		"description":"CBaseAnimating_SetGraphParameterVector:\nPass the vector value to the specified param in the graph\nreturn void",
		"prefix":"SetGraphParameterVector"
	},
	"CBaseAnimating_SetModelScale":
	{
		"body":"SetModelScale(${flScale})",
		"description":"CBaseAnimating_SetModelScale:\nSet scale of entity's model.\nreturn void",
		"prefix":"SetModelScale"
	},
	"CBaseAnimating_SetPoseParameter":
	{
		"body":"SetPoseParameter(${szName}, ${fValue})",
		"description":"CBaseAnimating_SetPoseParameter:\nSet the specified pose parameter to the specified value.\nreturn float",
		"prefix":"SetPoseParameter"
	},
	"CBaseAnimating_SetSequence":
	{
		"body":"SetSequence(${pSequenceName})",
		"description":"CBaseAnimating_SetSequence:\nSets the active sequence by name, keeping the current cycle.\nreturn void",
		"prefix":"SetSequence"
	},
	"CBaseAnimating_StopAnimation":
	{
		"body":"StopAnimation()",
		"description":"CBaseAnimating_StopAnimation:\nStop the current animation by setting playback rate to 0.0.\nreturn void",
		"prefix":"StopAnimation"
	},
	"CBaseCombatCharacter_GetEquippedWeapons":
	{
		"body":"GetEquippedWeapons()",
		"description":"CBaseCombatCharacter_GetEquippedWeapons:\nGetEquippedWeapons() : Returns an array of all the equipped weapons\nreturn table",
		"prefix":"GetEquippedWeapons"
	},
	"CBaseCombatCharacter_GetFaction":
	{
		"body":"GetFaction()",
		"description":"CBaseCombatCharacter_GetFaction:\nGet the combat character faction.\nreturn int",
		"prefix":"GetFaction"
	},
	"CBaseCombatCharacter_GetWeaponCount":
	{
		"body":"GetWeaponCount()",
		"description":"CBaseCombatCharacter_GetWeaponCount:\nGetWeaponCount() : Gets the number of weapons currently equipped\nreturn int",
		"prefix":"GetWeaponCount"
	},
	"CBaseCombatCharacter_ShootPosition":
	{
		"body":"ShootPosition(${nHand})",
		"description":"CBaseCombatCharacter_ShootPosition:\nReturns the shoot position eyes (or hand in VR).\nreturn Vector",
		"prefix":"ShootPosition"
	},
	"CBaseEntity_AddEffects":
	{
		"body":"AddEffects(${nFlags})",
		"description":"CBaseEntity_AddEffects:\nAddEffects( int ): Adds the render effect flag.\nreturn void",
		"prefix":"AddEffects"
	},
	"CBaseEntity_ApplyAbsVelocityImpulse":
	{
		"body":"ApplyAbsVelocityImpulse(${vecImpulse})",
		"description":"CBaseEntity_ApplyAbsVelocityImpulse:\nApply a Velocity Impulse\nreturn void",
		"prefix":"ApplyAbsVelocityImpulse"
	},
	"CBaseEntity_ApplyLocalAngularVelocityImpulse":
	{
		"body":"ApplyLocalAngularVelocityImpulse(${angImpulse})",
		"description":"CBaseEntity_ApplyLocalAngularVelocityImpulse:\nApply an Ang Velocity Impulse\nreturn void",
		"prefix":"ApplyLocalAngularVelocityImpulse"
	},
	"CBaseEntity_Attribute_GetFloatValue":
	{
		"body":"Attribute_GetFloatValue(${pName}, ${flDefault})",
		"description":"CBaseEntity_Attribute_GetFloatValue:\nGet float value for an entity attribute.\nreturn float",
		"prefix":"Attribute_GetFloatValue"
	},
	"CBaseEntity_Attribute_GetIntValue":
	{
		"body":"Attribute_GetIntValue(${pName}, ${nDefault})",
		"description":"CBaseEntity_Attribute_GetIntValue:\nGet int value for an entity attribute.\nreturn int",
		"prefix":"Attribute_GetIntValue"
	},
	"CBaseEntity_Attribute_SetFloatValue":
	{
		"body":"Attribute_SetFloatValue(${pName}, ${flValue})",
		"description":"CBaseEntity_Attribute_SetFloatValue:\nSet float value for an entity attribute.\nreturn void",
		"prefix":"Attribute_SetFloatValue"
	},
	"CBaseEntity_Attribute_SetIntValue":
	{
		"body":"Attribute_SetIntValue(${pName}, ${nValue})",
		"description":"CBaseEntity_Attribute_SetIntValue:\nSet int value for an entity attribute.\nreturn void",
		"prefix":"Attribute_SetIntValue"
	},
	"CBaseEntity_DeleteAttribute":
	{
		"body":"DeleteAttribute(${pName})",
		"description":"CBaseEntity_DeleteAttribute:\nDelete an entity attribute.\nreturn void",
		"prefix":"DeleteAttribute"
	},
	"CBaseEntity_EmitSound":
	{
		"body":"EmitSound(${soundname})",
		"description":"CBaseEntity_EmitSound:\nPlays a sound from this entity.\nreturn void",
		"prefix":"EmitSound"
	},
	"CBaseEntity_EmitSoundParams":
	{
		"body":"EmitSoundParams(${soundname}, ${nPitch}, ${flVolume}, ${flDelay})",
		"description":"CBaseEntity_EmitSoundParams:\nPlays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0.\nreturn void",
		"prefix":"EmitSoundParams"
	},
	"CBaseEntity_EyeAngles":
	{
		"body":"EyeAngles()",
		"description":"CBaseEntity_EyeAngles:\nGet the qangles that this entity is looking at.\nreturn QAngle",
		"prefix":"EyeAngles"
	},
	"CBaseEntity_EyePosition":
	{
		"body":"EyePosition()",
		"description":"CBaseEntity_EyePosition:\nGet vector to eye position - absolute coords.\nreturn Vector",
		"prefix":"EyePosition"
	},
	"CBaseEntity_FirstMoveChild":
	{
		"body":"FirstMoveChild()",
		"description":"CBaseEntity_FirstMoveChild:\n\nreturn handle",
		"prefix":"FirstMoveChild"
	},
	"CBaseEntity_FollowEntity":
	{
		"body":"FollowEntity(${hEnt}, ${bBoneMerge})",
		"description":"CBaseEntity_FollowEntity:\nhEntity to follow, bool bBoneMerge\nreturn void",
		"prefix":"FollowEntity"
	},
	"CBaseEntity_GatherCriteria":
	{
		"body":"GatherCriteria(${hResult})",
		"description":"CBaseEntity_GatherCriteria:\nReturns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks.\nreturn void",
		"prefix":"GatherCriteria"
	},
	"CBaseEntity_GetAbsOrigin":
	{
		"body":"GetAbsOrigin()",
		"description":"CBaseEntity_GetAbsOrigin:\n\nreturn Vector",
		"prefix":"GetAbsOrigin"
	},
	"CBaseEntity_GetAbsScale":
	{
		"body":"GetAbsScale()",
		"description":"CBaseEntity_GetAbsScale:\n\nreturn float",
		"prefix":"GetAbsScale"
	},
	"CBaseEntity_GetAngles":
	{
		"body":"GetAngles()",
		"description":"CBaseEntity_GetAngles:\n\nreturn QAngle",
		"prefix":"GetAngles"
	},
	"CBaseEntity_GetAnglesAsVector":
	{
		"body":"GetAnglesAsVector()",
		"description":"CBaseEntity_GetAnglesAsVector:\nGet entity pitch, yaw, roll as a vector.\nreturn Vector",
		"prefix":"GetAnglesAsVector"
	},
	"CBaseEntity_GetAngularVelocity":
	{
		"body":"GetAngularVelocity()",
		"description":"CBaseEntity_GetAngularVelocity:\nGet the local angular velocity - returns a vector of pitch,yaw,roll\nreturn Vector",
		"prefix":"GetAngularVelocity"
	},
	"CBaseEntity_GetBaseVelocity":
	{
		"body":"GetBaseVelocity()",
		"description":"CBaseEntity_GetBaseVelocity:\nGet Base? velocity.\nreturn Vector",
		"prefix":"GetBaseVelocity"
	},
	"CBaseEntity_GetBoundingMaxs":
	{
		"body":"GetBoundingMaxs()",
		"description":"CBaseEntity_GetBoundingMaxs:\nGet a vector containing max bounds, centered on object.\nreturn Vector",
		"prefix":"GetBoundingMaxs"
	},
	"CBaseEntity_GetBoundingMins":
	{
		"body":"GetBoundingMins()",
		"description":"CBaseEntity_GetBoundingMins:\nGet a vector containing min bounds, centered on object.\nreturn Vector",
		"prefix":"GetBoundingMins"
	},
	"CBaseEntity_GetBounds":
	{
		"body":"GetBounds()",
		"description":"CBaseEntity_GetBounds:\nGet a table containing the 'Mins' & 'Maxs' vector bounds, centered on object.\nreturn table",
		"prefix":"GetBounds"
	},
	"CBaseEntity_GetCenter":
	{
		"body":"GetCenter()",
		"description":"CBaseEntity_GetCenter:\nGet vector to center of object - absolute coords\nreturn Vector",
		"prefix":"GetCenter"
	},
	"CBaseEntity_GetChildren":
	{
		"body":"GetChildren()",
		"description":"CBaseEntity_GetChildren:\nGet the entities parented to this entity.\nreturn handle",
		"prefix":"GetChildren"
	},
	"CBaseEntity_GetContext":
	{
		"body":"GetContext(${name})",
		"description":"CBaseEntity_GetContext:\nGetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found).\nreturn table",
		"prefix":"GetContext"
	},
	"CBaseEntity_GetForwardVector":
	{
		"body":"GetForwardVector()",
		"description":"CBaseEntity_GetForwardVector:\nGet the forward vector of the entity.\nreturn Vector",
		"prefix":"GetForwardVector"
	},
	"CBaseEntity_GetHealth":
	{
		"body":"GetHealth()",
		"description":"CBaseEntity_GetHealth:\nGet the health of this entity.\nreturn int",
		"prefix":"GetHealth"
	},
	"CBaseEntity_GetLocalAngles":
	{
		"body":"GetLocalAngles()",
		"description":"CBaseEntity_GetLocalAngles:\nGet entity local pitch, yaw, roll as a QAngle\nreturn QAngle",
		"prefix":"GetLocalAngles"
	},
	"CBaseEntity_GetLocalAngularVelocity":
	{
		"body":"GetLocalAngularVelocity()",
		"description":"CBaseEntity_GetLocalAngularVelocity:\nMaybe local angvel\nreturn QAngle",
		"prefix":"GetLocalAngularVelocity"
	},
	"CBaseEntity_GetLocalOrigin":
	{
		"body":"GetLocalOrigin()",
		"description":"CBaseEntity_GetLocalOrigin:\nGet entity local origin as a Vector\nreturn Vector",
		"prefix":"GetLocalOrigin"
	},
	"CBaseEntity_GetLocalScale":
	{
		"body":"GetLocalScale()",
		"description":"CBaseEntity_GetLocalScale:\n\nreturn float",
		"prefix":"GetLocalScale"
	},
	"CBaseEntity_GetLocalVelocity":
	{
		"body":"GetLocalVelocity()",
		"description":"CBaseEntity_GetLocalVelocity:\nGet Entity relative velocity.\nreturn Vector",
		"prefix":"GetLocalVelocity"
	},
	"CBaseEntity_GetMass":
	{
		"body":"GetMass()",
		"description":"CBaseEntity_GetMass:\nGet the mass of an entity. (returns 0 if it doesn't have a physics object)\nreturn float",
		"prefix":"GetMass"
	},
	"CBaseEntity_GetMaxHealth":
	{
		"body":"GetMaxHealth()",
		"description":"CBaseEntity_GetMaxHealth:\nGet the maximum health of this entity.\nreturn int",
		"prefix":"GetMaxHealth"
	},
	"CBaseEntity_GetModelName":
	{
		"body":"GetModelName()",
		"description":"CBaseEntity_GetModelName:\nReturns the name of the model.\nreturn string",
		"prefix":"GetModelName"
	},
	"CBaseEntity_GetMoveParent":
	{
		"body":"GetMoveParent()",
		"description":"CBaseEntity_GetMoveParent:\nIf in hierarchy, retrieves the entity's parent.\nreturn handle",
		"prefix":"GetMoveParent"
	},
	"CBaseEntity_GetOrigin":
	{
		"body":"GetOrigin()",
		"description":"CBaseEntity_GetOrigin:\n\nreturn Vector",
		"prefix":"GetOrigin"
	},
	"CBaseEntity_GetOwner":
	{
		"body":"GetOwner()",
		"description":"CBaseEntity_GetOwner:\nGets this entity's owner\nreturn handle",
		"prefix":"GetOwner"
	},
	"CBaseEntity_GetOwnerEntity":
	{
		"body":"GetOwnerEntity()",
		"description":"CBaseEntity_GetOwnerEntity:\nGet the owner entity, if there is one\nreturn handle",
		"prefix":"GetOwnerEntity"
	},
	"CBaseEntity_GetRightVector":
	{
		"body":"GetRightVector()",
		"description":"CBaseEntity_GetRightVector:\nGet the right vector of the entity.\nreturn Vector",
		"prefix":"GetRightVector"
	},
	"CBaseEntity_GetRootMoveParent":
	{
		"body":"GetRootMoveParent()",
		"description":"CBaseEntity_GetRootMoveParent:\nIf in hierarchy, walks up the hierarchy to find the root parent.\nreturn handle",
		"prefix":"GetRootMoveParent"
	},
	"CBaseEntity_GetSoundDuration":
	{
		"body":"GetSoundDuration(${soundname}, ${actormodel})",
		"description":"CBaseEntity_GetSoundDuration:\nReturns float duration of the sound. Takes soundname and optional actormodelname.\nreturn float",
		"prefix":"GetSoundDuration"
	},
	"CBaseEntity_GetTeam":
	{
		"body":"GetTeam()",
		"description":"CBaseEntity_GetTeam:\nGet the team number of this entity.\nreturn int",
		"prefix":"GetTeam"
	},
	"CBaseEntity_GetTeamNumber":
	{
		"body":"GetTeamNumber()",
		"description":"CBaseEntity_GetTeamNumber:\nGet the team number of this entity.\nreturn int",
		"prefix":"GetTeamNumber"
	},
	"CBaseEntity_GetUpVector":
	{
		"body":"GetUpVector()",
		"description":"CBaseEntity_GetUpVector:\nGet the up vector of the entity.\nreturn Vector",
		"prefix":"GetUpVector"
	},
	"CBaseEntity_GetVelocity":
	{
		"body":"GetVelocity()",
		"description":"CBaseEntity_GetVelocity:\n\nreturn Vector",
		"prefix":"GetVelocity"
	},
	"CBaseEntity_HasAttribute":
	{
		"body":"HasAttribute(${pName})",
		"description":"CBaseEntity_HasAttribute:\nSee if an entity has a particular attribute.\nreturn bool",
		"prefix":"HasAttribute"
	},
	"CBaseEntity_IsAlive":
	{
		"body":"IsAlive()",
		"description":"CBaseEntity_IsAlive:\nIs this entity alive?\nreturn bool",
		"prefix":"IsAlive"
	},
	"CBaseEntity_IsNPC":
	{
		"body":"IsNPC()",
		"description":"CBaseEntity_IsNPC:\nIs this entity an CAI_BaseNPC?\nreturn bool",
		"prefix":"IsNPC"
	},
	"CBaseEntity_IsPlayer":
	{
		"body":"IsPlayer()",
		"description":"CBaseEntity_IsPlayer:\nIs this entity a player?\nreturn bool",
		"prefix":"IsPlayer"
	},
	"CBaseEntity_Kill":
	{
		"body":"Kill()",
		"description":"CBaseEntity_Kill:\n\nreturn void",
		"prefix":"Kill"
	},
	"CBaseEntity_NextMovePeer":
	{
		"body":"NextMovePeer()",
		"description":"CBaseEntity_NextMovePeer:\n\nreturn handle",
		"prefix":"NextMovePeer"
	},
	"CBaseEntity_OverrideFriction":
	{
		"body":"OverrideFriction(${duration}, ${friction})",
		"description":"CBaseEntity_OverrideFriction:\nTakes duration, value for a temporary override.\nreturn void",
		"prefix":"OverrideFriction"
	},
	"CBaseEntity_PrecacheScriptSound":
	{
		"body":"PrecacheScriptSound(${soundname})",
		"description":"CBaseEntity_PrecacheScriptSound:\nPrecache a sound for later playing.\nreturn void",
		"prefix":"PrecacheScriptSound"
	},
	"CBaseEntity_RemoveEffects":
	{
		"body":"RemoveEffects(${nFlags})",
		"description":"CBaseEntity_RemoveEffects:\nRemoveEffects( int ): Removes the render effect flag.\nreturn void",
		"prefix":"RemoveEffects"
	},
	"CBaseEntity_SetAbsAngles":
	{
		"body":"SetAbsAngles(${fPitch}, ${fYaw}, ${fRoll})",
		"description":"CBaseEntity_SetAbsAngles:\nSet entity pitch, yaw, roll by component.\nreturn void",
		"prefix":"SetAbsAngles"
	},
	"CBaseEntity_SetAbsOrigin":
	{
		"body":"SetAbsOrigin(${origin})",
		"description":"CBaseEntity_SetAbsOrigin:\n\nreturn void",
		"prefix":"SetAbsOrigin"
	},
	"CBaseEntity_SetAbsScale":
	{
		"body":"SetAbsScale(${flScale})",
		"description":"CBaseEntity_SetAbsScale:\n\nreturn void",
		"prefix":"SetAbsScale"
	},
	"CBaseEntity_SetAngles":
	{
		"body":"SetAngles(${fPitch}, ${fYaw}, ${fRoll})",
		"description":"CBaseEntity_SetAngles:\nSet entity pitch, yaw, roll by component.\nreturn void",
		"prefix":"SetAngles"
	},
	"CBaseEntity_SetAngularVelocity":
	{
		"body":"SetAngularVelocity(${pitchVel}, ${yawVel}, ${rollVel})",
		"description":"CBaseEntity_SetAngularVelocity:\nSet the local angular velocity - takes float pitch,yaw,roll velocities\nreturn void",
		"prefix":"SetAngularVelocity"
	},
	"CBaseEntity_SetConstraint":
	{
		"body":"SetConstraint(${vPos})",
		"description":"CBaseEntity_SetConstraint:\nSet the position of the constraint.\nreturn void",
		"prefix":"SetConstraint"
	},
	"CBaseEntity_SetContext":
	{
		"body":"SetContext(${pName}, ${pValue}, ${duration})",
		"description":"CBaseEntity_SetContext:\nSetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever').\nreturn void",
		"prefix":"SetContext"
	},
	"CBaseEntity_SetContextNum":
	{
		"body":"SetContextNum(${pName}, ${fValue}, ${duration})",
		"description":"CBaseEntity_SetContextNum:\nSetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever').\nreturn void",
		"prefix":"SetContextNum"
	},
	"CBaseEntity_SetContextThink":
	{
		"body":"SetContextThink(${pszContextName}, ${hThinkFunc}, ${flInterval})",
		"description":"CBaseEntity_SetContextThink:\nSet a think function on this entity.\nreturn void",
		"prefix":"SetContextThink"
	},
	"CBaseEntity_SetEntityName":
	{
		"body":"SetEntityName(${pName})",
		"description":"CBaseEntity_SetEntityName:\nSet the name of an entity.\nreturn void",
		"prefix":"SetEntityName"
	},
	"CBaseEntity_SetForwardVector":
	{
		"body":"SetForwardVector(${v})",
		"description":"CBaseEntity_SetForwardVector:\nSet the orientation of the entity to have this forward vector.\nreturn void",
		"prefix":"SetForwardVector"
	},
	"CBaseEntity_SetFriction":
	{
		"body":"SetFriction(${flFriction})",
		"description":"CBaseEntity_SetFriction:\nSet PLAYER friction, ignored for objects.\nreturn void",
		"prefix":"SetFriction"
	},
	"CBaseEntity_SetGravity":
	{
		"body":"SetGravity(${flGravity})",
		"description":"CBaseEntity_SetGravity:\nSet PLAYER gravity, ignored for objects.\nreturn void",
		"prefix":"SetGravity"
	},
	"CBaseEntity_SetHealth":
	{
		"body":"SetHealth(${nHealth})",
		"description":"CBaseEntity_SetHealth:\nSet the health of this entity.\nreturn void",
		"prefix":"SetHealth"
	},
	"CBaseEntity_SetLocalAngles":
	{
		"body":"SetLocalAngles(${fPitch}, ${fYaw}, ${fRoll})",
		"description":"CBaseEntity_SetLocalAngles:\nSet entity local pitch, yaw, roll by component\nreturn void",
		"prefix":"SetLocalAngles"
	},
	"CBaseEntity_SetLocalOrigin":
	{
		"body":"SetLocalOrigin(${origin})",
		"description":"CBaseEntity_SetLocalOrigin:\nSet entity local origin from a Vector\nreturn void",
		"prefix":"SetLocalOrigin"
	},
	"CBaseEntity_SetLocalScale":
	{
		"body":"SetLocalScale(${flScale})",
		"description":"CBaseEntity_SetLocalScale:\n\nreturn void",
		"prefix":"SetLocalScale"
	},
	"CBaseEntity_SetMass":
	{
		"body":"SetMass(${flMass})",
		"description":"CBaseEntity_SetMass:\nSet the mass of an entity. (does nothing if it doesn't have a physics object)\nreturn void",
		"prefix":"SetMass"
	},
	"CBaseEntity_SetMaxHealth":
	{
		"body":"SetMaxHealth(${amt})",
		"description":"CBaseEntity_SetMaxHealth:\nSet the maximum health of this entity.\nreturn void",
		"prefix":"SetMaxHealth"
	},
	"CBaseEntity_SetOrigin":
	{
		"body":"SetOrigin(${v})",
		"description":"CBaseEntity_SetOrigin:\n\nreturn void",
		"prefix":"SetOrigin"
	},
	"CBaseEntity_SetOwner":
	{
		"body":"SetOwner(${pOwner})",
		"description":"CBaseEntity_SetOwner:\nSets this entity's owner\nreturn void",
		"prefix":"SetOwner"
	},
	"CBaseEntity_SetParent":
	{
		"body":"SetParent(${hParent}, ${pAttachmentname})",
		"description":"CBaseEntity_SetParent:\nSet the parent for this entity.\nreturn void",
		"prefix":"SetParent"
	},
	"CBaseEntity_SetTeam":
	{
		"body":"SetTeam(${iTeamNum})",
		"description":"CBaseEntity_SetTeam:\n\nreturn void",
		"prefix":"SetTeam"
	},
	"CBaseEntity_SetVelocity":
	{
		"body":"SetVelocity(${vecVelocity})",
		"description":"CBaseEntity_SetVelocity:\n\nreturn void",
		"prefix":"SetVelocity"
	},
	"CBaseEntity_StopSound":
	{
		"body":"StopSound(${soundname})",
		"description":"CBaseEntity_StopSound:\nStops a named sound playing from this entity.\nreturn void",
		"prefix":"StopSound"
	},
	"CBaseEntity_TakeDamage":
	{
		"body":"TakeDamage(${hInfo})",
		"description":"CBaseEntity_TakeDamage:\nApply damage to this entity. Use CreateDamageInfo() to create a damageinfo object.\nreturn int",
		"prefix":"TakeDamage"
	},
	"CBaseEntity_Trigger":
	{
		"body":"Trigger()",
		"description":"CBaseEntity_Trigger:\nFires off this entity's OnTrigger responses.\nreturn void",
		"prefix":"Trigger"
	},
	"CBaseEntity_ValidatePrivateScriptScope":
	{
		"body":"ValidatePrivateScriptScope()",
		"description":"CBaseEntity_ValidatePrivateScriptScope:\nValidates the private script scope and creates it if one doesn't exist.\nreturn void",
		"prefix":"ValidatePrivateScriptScope"
	},
	"CBaseFlex_GetCurrentScene":
	{
		"body":"GetCurrentScene()",
		"description":"CBaseFlex_GetCurrentScene:\nReturns the instance of the oldest active scene entity (if any).\nreturn handle",
		"prefix":"GetCurrentScene"
	},
	"CBaseFlex_GetSceneByIndex":
	{
		"body":"GetSceneByIndex(${index})",
		"description":"CBaseFlex_GetSceneByIndex:\nReturns the instance of the scene entity at the specified index.\nreturn handle",
		"prefix":"GetSceneByIndex"
	},
	"CBaseFlex_ScriptPlayScene":
	{
		"body":"ScriptPlayScene(${pszScene}, ${flDelay})",
		"description":"CBaseFlex_ScriptPlayScene:\n( vcd file, delay ) - play specified vcd file\nreturn float",
		"prefix":"ScriptPlayScene"
	},
	"CBaseModelEntity_GetMaterialGroupHash":
	{
		"body":"GetMaterialGroupHash()",
		"description":"CBaseModelEntity_GetMaterialGroupHash:\nGetMaterialGroupHash(): Get the material group hash of this entity.\nreturn unsigned",
		"prefix":"GetMaterialGroupHash"
	},
	"CBaseModelEntity_GetMaterialGroupMask":
	{
		"body":"GetMaterialGroupMask()",
		"description":"CBaseModelEntity_GetMaterialGroupMask:\nGetMaterialGroupMask(): Get the mesh group mask of this entity.\nreturn uint64",
		"prefix":"GetMaterialGroupMask"
	},
	"CBaseModelEntity_GetRenderAlpha":
	{
		"body":"GetRenderAlpha()",
		"description":"CBaseModelEntity_GetRenderAlpha:\nGetRenderAlpha(): Get the alpha modulation of this entity.\nreturn int",
		"prefix":"GetRenderAlpha"
	},
	"CBaseModelEntity_GetRenderColor":
	{
		"body":"GetRenderColor()",
		"description":"CBaseModelEntity_GetRenderColor:\nGetRenderColor(): Get the render color of the entity.\nreturn Vector",
		"prefix":"GetRenderColor"
	},
	"CBaseModelEntity_SetBodygroup":
	{
		"body":"SetBodygroup(${iGroup}, ${iValue})",
		"description":"CBaseModelEntity_SetBodygroup:\nSets a bodygroup.\nreturn void",
		"prefix":"SetBodygroup"
	},
	"CBaseModelEntity_SetBodygroupByName":
	{
		"body":"SetBodygroupByName(${pName}, ${iValue})",
		"description":"CBaseModelEntity_SetBodygroupByName:\nSets a bodygroup by name.\nreturn void",
		"prefix":"SetBodygroupByName"
	},
	"CBaseModelEntity_SetLightGroup":
	{
		"body":"SetLightGroup(${pLightGroup})",
		"description":"CBaseModelEntity_SetLightGroup:\nSetLightGroup( string ): Sets the light group of the entity.\nreturn void",
		"prefix":"SetLightGroup"
	},
	"CBaseModelEntity_SetMaterialGroup":
	{
		"body":"SetMaterialGroup(${pMaterialGroup})",
		"description":"CBaseModelEntity_SetMaterialGroup:\nSetMaterialGroup( string ): Set the material group of this entity.\nreturn void",
		"prefix":"SetMaterialGroup"
	},
	"CBaseModelEntity_SetMaterialGroupHash":
	{
		"body":"SetMaterialGroupHash(${nHash})",
		"description":"CBaseModelEntity_SetMaterialGroupHash:\nSetMaterialGroupHash( uint32 ): Set the material group hash of this entity.\nreturn void",
		"prefix":"SetMaterialGroupHash"
	},
	"CBaseModelEntity_SetMaterialGroupMask":
	{
		"body":"SetMaterialGroupMask(${nMeshGroupMask})",
		"description":"CBaseModelEntity_SetMaterialGroupMask:\nSetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity.\nreturn void",
		"prefix":"SetMaterialGroupMask"
	},
	"CBaseModelEntity_SetModel":
	{
		"body":"SetModel(${pModelName})",
		"description":"CBaseModelEntity_SetModel:\n\nreturn void",
		"prefix":"SetModel"
	},
	"CBaseModelEntity_SetRenderAlpha":
	{
		"body":"SetRenderAlpha(${nAlpha})",
		"description":"CBaseModelEntity_SetRenderAlpha:\nSetRenderAlpha( int ): Set the alpha modulation of this entity.\nreturn void",
		"prefix":"SetRenderAlpha"
	},
	"CBaseModelEntity_SetRenderColor":
	{
		"body":"SetRenderColor(${r}, ${g}, ${b})",
		"description":"CBaseModelEntity_SetRenderColor:\nSetRenderColor( r, g, b ): Sets the render color of the entity.\nreturn void",
		"prefix":"SetRenderColor"
	},
	"CBaseModelEntity_SetRenderMode":
	{
		"body":"SetRenderMode(${nMode})",
		"description":"CBaseModelEntity_SetRenderMode:\nSetRenderMode( int ): Sets the render mode of the entity.\nreturn void",
		"prefix":"SetRenderMode"
	},
	"CBaseModelEntity_SetSingleMeshGroup":
	{
		"body":"SetSingleMeshGroup(${pMeshGroupName})",
		"description":"CBaseModelEntity_SetSingleMeshGroup:\nSetSingleMeshGroup( string ): Set a single mesh group for this entity.\nreturn void",
		"prefix":"SetSingleMeshGroup"
	},
	"CBaseModelEntity_SetSize":
	{
		"body":"SetSize(${mins}, ${maxs})",
		"description":"CBaseModelEntity_SetSize:\n\nreturn void",
		"prefix":"SetSize"
	},
	"CBaseModelEntity_SetSkin":
	{
		"body":"SetSkin(${iSkin})",
		"description":"CBaseModelEntity_SetSkin:\nSet skin (int).\nreturn void",
		"prefix":"SetSkin"
	},
	"CBasePlayer_AreChaperoneBoundsVisible":
	{
		"body":"AreChaperoneBoundsVisible()",
		"description":"CBasePlayer_AreChaperoneBoundsVisible:\nReturns whether this player's chaperone bounds are visible.\nreturn bool",
		"prefix":"AreChaperoneBoundsVisible"
	},
	"CBasePlayer_GetHMDAnchor":
	{
		"body":"GetHMDAnchor()",
		"description":"CBasePlayer_GetHMDAnchor:\nReturns the HMD anchor entity for this player if it exists.\nreturn handle",
		"prefix":"GetHMDAnchor"
	},
	"CBasePlayer_GetHMDAvatar":
	{
		"body":"GetHMDAvatar()",
		"description":"CBasePlayer_GetHMDAvatar:\nReturns the HMD Avatar entity for this player if it exists.\nreturn handle",
		"prefix":"GetHMDAvatar"
	},
	"CBasePlayer_GetPlayArea":
	{
		"body":"GetPlayArea(${nPoint})",
		"description":"CBasePlayer_GetPlayArea:\nReturns the Vector position of the point you ask for. Pass 0-3 to get the four points.\nreturn Vector",
		"prefix":"GetPlayArea"
	},
	"CBasePlayer_GetUserID":
	{
		"body":"GetUserID()",
		"description":"CBasePlayer_GetUserID:\nReturns the player's user id.\nreturn int",
		"prefix":"GetUserID"
	},
	"CBasePlayer_GetVRControllerType":
	{
		"body":"GetVRControllerType()",
		"description":"CBasePlayer_GetVRControllerType:\nReturns the type of controller being used while in VR.\nreturn <unknown>",
		"prefix":"GetVRControllerType"
	},
	"CBasePlayer_IsNoclipping":
	{
		"body":"IsNoclipping()",
		"description":"CBasePlayer_IsNoclipping:\nReturns true if the player is in noclip mode.\nreturn bool",
		"prefix":"IsNoclipping"
	},
	"CBasePlayer_IsUsePressed":
	{
		"body":"IsUsePressed()",
		"description":"CBasePlayer_IsUsePressed:\nReturns true if the use key is pressed.\nreturn bool",
		"prefix":"IsUsePressed"
	},
	"CBasePlayer_IsVRControllerButtonPressed":
	{
		"body":"IsVRControllerButtonPressed(${nButton})",
		"description":"CBasePlayer_IsVRControllerButtonPressed:\nReturns true if the controller button is pressed.\nreturn bool",
		"prefix":"IsVRControllerButtonPressed"
	},
	"CBasePlayer_IsVRDashboardShowing":
	{
		"body":"IsVRDashboardShowing()",
		"description":"CBasePlayer_IsVRDashboardShowing:\nReturns true if the SteamVR dashboard is showing for this player.\nreturn bool",
		"prefix":"IsVRDashboardShowing"
	},
	"CBaseTrigger_Disable":
	{
		"body":"Disable()",
		"description":"CBaseTrigger_Disable:\nDisable's the trigger\nreturn void",
		"prefix":"Disable"
	},
	"CBaseTrigger_Enable":
	{
		"body":"Enable()",
		"description":"CBaseTrigger_Enable:\nEnable the trigger\nreturn void",
		"prefix":"Enable"
	},
	"CBaseTrigger_IsTouching":
	{
		"body":"IsTouching(${hEnt})",
		"description":"CBaseTrigger_IsTouching:\nChecks whether the passed entity is touching the trigger.\nreturn bool",
		"prefix":"IsTouching"
	},
	"CBodyComponent_AddImpulseAtPosition":
	{
		"body":"AddImpulseAtPosition(${Vector_1}, ${Vector_2})",
		"description":"CBodyComponent_AddImpulseAtPosition:\nApply an impulse at a worldspace position to the physics\nreturn void",
		"prefix":"AddImpulseAtPosition"
	},
	"CBodyComponent_AddVelocity":
	{
		"body":"AddVelocity(${Vector_1}, ${Vector_2})",
		"description":"CBodyComponent_AddVelocity:\nAdd linear and angular velocity to the physics object\nreturn void",
		"prefix":"AddVelocity"
	},
	"CBodyComponent_DetachFromParent":
	{
		"body":"DetachFromParent()",
		"description":"CBodyComponent_DetachFromParent:\nDetach from its parent\nreturn void",
		"prefix":"DetachFromParent"
	},
	"CBodyComponent_GetSequence":
	{
		"body":"GetSequence()",
		"description":"CBodyComponent_GetSequence:\nReturns the active sequence
\nreturn <unknown>",
		"prefix":"GetSequence"
	},
	"CBodyComponent_IsAttachedToParent":
	{
		"body":"IsAttachedToParent()",
		"description":"CBodyComponent_IsAttachedToParent:\nIs attached to parent\nreturn bool",
		"prefix":"IsAttachedToParent"
	},
	"CBodyComponent_LookupSequence":
	{
		"body":"LookupSequence(${string_1})",
		"description":"CBodyComponent_LookupSequence:\nReturns a sequence id given a name
\nreturn <unknown>",
		"prefix":"LookupSequence"
	},
	"CBodyComponent_SequenceDuration":
	{
		"body":"SequenceDuration(${string_1})",
		"description":"CBodyComponent_SequenceDuration:\nReturns the duration in seconds of the specified sequence\nreturn float",
		"prefix":"SequenceDuration"
	},
	"CBodyComponent_SetAngularVelocity":
	{
		"body":"SetAngularVelocity(${Vector_1})",
		"description":"CBodyComponent_SetAngularVelocity:\n\nreturn void",
		"prefix":"SetAngularVelocity"
	},
	"CBodyComponent_SetAnimation":
	{
		"body":"SetAnimation(${string_1})",
		"description":"CBodyComponent_SetAnimation:\nPass string for the animation to play on this model\nreturn void",
		"prefix":"SetAnimation"
	},
	"CBodyComponent_SetMaterialGroup":
	{
		"body":"SetMaterialGroup(${utlstringtoken_1})",
		"description":"CBodyComponent_SetMaterialGroup:\n\nreturn void",
		"prefix":"SetMaterialGroup"
	},
	"CBodyComponent_SetVelocity":
	{
		"body":"SetVelocity(${Vector_1})",
		"description":"CBodyComponent_SetVelocity:\n\nreturn void",
		"prefix":"SetVelocity"
	},
	"CCustomGameEventManager_RegisterListener":
	{
		"body":"RegisterListener(${stringEventName}, ${funcCallbackFunction})",
		"description":"CCustomGameEventManager_RegisterListener:\n( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.\nreturn int",
		"prefix":"RegisterListener"
	},
	"CCustomGameEventManager_Send_ServerToAllClients":
	{
		"body":"Send_ServerToAllClients(${stringEventName}, ${tableEventData})",
		"description":"CCustomGameEventManager_Send_ServerToAllClients:\n( string EventName, table EventData )\nreturn void",
		"prefix":"Send_ServerToAllClients"
	},
	"CCustomGameEventManager_Send_ServerToPlayer":
	{
		"body":"Send_ServerToPlayer(${EntityPlayer}, ${stringEventName}, ${tableEventData})",
		"description":"CCustomGameEventManager_Send_ServerToPlayer:\n( Entity Player, string EventName, table EventData )\nreturn void",
		"prefix":"Send_ServerToPlayer"
	},
	"CCustomGameEventManager_Send_ServerToTeam":
	{
		"body":"Send_ServerToTeam(${intTeamNumber}, ${stringEventName}, ${tableEventData})",
		"description":"CCustomGameEventManager_Send_ServerToTeam:\n( int TeamNumber, string EventName, table EventData )\nreturn void",
		"prefix":"Send_ServerToTeam"
	},
	"CCustomGameEventManager_UnregisterListener":
	{
		"body":"UnregisterListener(${intListnerID})",
		"description":"CCustomGameEventManager_UnregisterListener:\n( int ListnerID ) - Unregister a specific listener\nreturn void",
		"prefix":"UnregisterListener"
	},
	"CCustomNetTableManager_GetTableValue":
	{
		"body":"GetTableValue(${stringTableName}, ${stringKeyName})",
		"description":"CCustomNetTableManager_GetTableValue:\n( string TableName, string KeyName )\nreturn table",
		"prefix":"GetTableValue"
	},
	"CCustomNetTableManager_SetTableValue":
	{
		"body":"SetTableValue(${stringTableName}, ${stringKeyName}, ${script_tableValue})",
		"description":"CCustomNetTableManager_SetTableValue:\n( string TableName, string KeyName, script_table Value )\nreturn bool",
		"prefix":"SetTableValue"
	},
	"CDOTABaseAbility_CanAbilityBeUpgraded":
	{
		"body":"CanAbilityBeUpgraded()",
		"description":"CDOTABaseAbility_CanAbilityBeUpgraded:\n\nreturn <unknown>",
		"prefix":"CanAbilityBeUpgraded"
	},
	"CDOTABaseAbility_CastAbility":
	{
		"body":"CastAbility()",
		"description":"CDOTABaseAbility_CastAbility:\n\nreturn bool",
		"prefix":"CastAbility"
	},
	"CDOTABaseAbility_ContinueCasting":
	{
		"body":"ContinueCasting()",
		"description":"CDOTABaseAbility_ContinueCasting:\n\nreturn bool",
		"prefix":"ContinueCasting"
	},
	"CDOTABaseAbility_CreateVisibilityNode":
	{
		"body":"CreateVisibilityNode(${vLocation}, ${fRadius}, ${fDuration})",
		"description":"CDOTABaseAbility_CreateVisibilityNode:\n\nreturn void",
		"prefix":"CreateVisibilityNode"
	},
	"CDOTABaseAbility_DecrementModifierRefCount":
	{
		"body":"DecrementModifierRefCount()",
		"description":"CDOTABaseAbility_DecrementModifierRefCount:\n\nreturn void",
		"prefix":"DecrementModifierRefCount"
	},
	"CDOTABaseAbility_EndChannel":
	{
		"body":"EndChannel(${bInterrupted})",
		"description":"CDOTABaseAbility_EndChannel:\n\nreturn void",
		"prefix":"EndChannel"
	},
	"CDOTABaseAbility_EndCooldown":
	{
		"body":"EndCooldown()",
		"description":"CDOTABaseAbility_EndCooldown:\nClear the cooldown remaining on this ability.\nreturn void",
		"prefix":"EndCooldown"
	},
	"CDOTABaseAbility_GetAOERadius":
	{
		"body":"GetAOERadius()",
		"description":"CDOTABaseAbility_GetAOERadius:\n\nreturn int",
		"prefix":"GetAOERadius"
	},
	"CDOTABaseAbility_GetAbilityDamage":
	{
		"body":"GetAbilityDamage()",
		"description":"CDOTABaseAbility_GetAbilityDamage:\n\nreturn int",
		"prefix":"GetAbilityDamage"
	},
	"CDOTABaseAbility_GetAbilityDamageType":
	{
		"body":"GetAbilityDamageType()",
		"description":"CDOTABaseAbility_GetAbilityDamageType:\n\nreturn int",
		"prefix":"GetAbilityDamageType"
	},
	"CDOTABaseAbility_GetAbilityIndex":
	{
		"body":"GetAbilityIndex()",
		"description":"CDOTABaseAbility_GetAbilityIndex:\n\nreturn int",
		"prefix":"GetAbilityIndex"
	},
	"CDOTABaseAbility_GetAbilityKeyValues":
	{
		"body":"GetAbilityKeyValues()",
		"description":"CDOTABaseAbility_GetAbilityKeyValues:\nGets the key values definition for this ability.\nreturn table",
		"prefix":"GetAbilityKeyValues"
	},
	"CDOTABaseAbility_GetAbilityName":
	{
		"body":"GetAbilityName()",
		"description":"CDOTABaseAbility_GetAbilityName:\nReturns the name of this ability.\nreturn string",
		"prefix":"GetAbilityName"
	},
	"CDOTABaseAbility_GetAbilityTargetFlags":
	{
		"body":"GetAbilityTargetFlags()",
		"description":"CDOTABaseAbility_GetAbilityTargetFlags:\n\nreturn int",
		"prefix":"GetAbilityTargetFlags"
	},
	"CDOTABaseAbility_GetAbilityTargetTeam":
	{
		"body":"GetAbilityTargetTeam()",
		"description":"CDOTABaseAbility_GetAbilityTargetTeam:\n\nreturn int",
		"prefix":"GetAbilityTargetTeam"
	},
	"CDOTABaseAbility_GetAbilityTargetType":
	{
		"body":"GetAbilityTargetType()",
		"description":"CDOTABaseAbility_GetAbilityTargetType:\n\nreturn int",
		"prefix":"GetAbilityTargetType"
	},
	"CDOTABaseAbility_GetAbilityType":
	{
		"body":"GetAbilityType()",
		"description":"CDOTABaseAbility_GetAbilityType:\n\nreturn int",
		"prefix":"GetAbilityType"
	},
	"CDOTABaseAbility_GetAnimationIgnoresModelScale":
	{
		"body":"GetAnimationIgnoresModelScale()",
		"description":"CDOTABaseAbility_GetAnimationIgnoresModelScale:\n\nreturn bool",
		"prefix":"GetAnimationIgnoresModelScale"
	},
	"CDOTABaseAbility_GetAssociatedPrimaryAbilities":
	{
		"body":"GetAssociatedPrimaryAbilities()",
		"description":"CDOTABaseAbility_GetAssociatedPrimaryAbilities:\n\nreturn string",
		"prefix":"GetAssociatedPrimaryAbilities"
	},
	"CDOTABaseAbility_GetAssociatedSecondaryAbilities":
	{
		"body":"GetAssociatedSecondaryAbilities()",
		"description":"CDOTABaseAbility_GetAssociatedSecondaryAbilities:\n\nreturn string",
		"prefix":"GetAssociatedSecondaryAbilities"
	},
	"CDOTABaseAbility_GetAutoCastState":
	{
		"body":"GetAutoCastState()",
		"description":"CDOTABaseAbility_GetAutoCastState:\n\nreturn bool",
		"prefix":"GetAutoCastState"
	},
	"CDOTABaseAbility_GetBackswingTime":
	{
		"body":"GetBackswingTime()",
		"description":"CDOTABaseAbility_GetBackswingTime:\n\nreturn float",
		"prefix":"GetBackswingTime"
	},
	"CDOTABaseAbility_GetBehavior":
	{
		"body":"GetBehavior()",
		"description":"CDOTABaseAbility_GetBehavior:\n\nreturn int",
		"prefix":"GetBehavior"
	},
	"CDOTABaseAbility_GetCastPoint":
	{
		"body":"GetCastPoint()",
		"description":"CDOTABaseAbility_GetCastPoint:\n\nreturn float",
		"prefix":"GetCastPoint"
	},
	"CDOTABaseAbility_GetCastRange":
	{
		"body":"GetCastRange(${vLocation}, ${hTarget})",
		"description":"CDOTABaseAbility_GetCastRange:\nGets the cast range of the ability.\nreturn int",
		"prefix":"GetCastRange"
	},
	"CDOTABaseAbility_GetCaster":
	{
		"body":"GetCaster()",
		"description":"CDOTABaseAbility_GetCaster:\n\nreturn handle",
		"prefix":"GetCaster"
	},
	"CDOTABaseAbility_GetChannelStartTime":
	{
		"body":"GetChannelStartTime()",
		"description":"CDOTABaseAbility_GetChannelStartTime:\n\nreturn float",
		"prefix":"GetChannelStartTime"
	},
	"CDOTABaseAbility_GetChannelTime":
	{
		"body":"GetChannelTime()",
		"description":"CDOTABaseAbility_GetChannelTime:\n\nreturn float",
		"prefix":"GetChannelTime"
	},
	"CDOTABaseAbility_GetChannelledManaCostPerSecond":
	{
		"body":"GetChannelledManaCostPerSecond(${iLevel})",
		"description":"CDOTABaseAbility_GetChannelledManaCostPerSecond:\n\nreturn int",
		"prefix":"GetChannelledManaCostPerSecond"
	},
	"CDOTABaseAbility_GetCloneSource":
	{
		"body":"GetCloneSource()",
		"description":"CDOTABaseAbility_GetCloneSource:\n\nreturn handle",
		"prefix":"GetCloneSource"
	},
	"CDOTABaseAbility_GetConceptRecipientType":
	{
		"body":"GetConceptRecipientType()",
		"description":"CDOTABaseAbility_GetConceptRecipientType:\n\nreturn int",
		"prefix":"GetConceptRecipientType"
	},
	"CDOTABaseAbility_GetCooldown":
	{
		"body":"GetCooldown(${iLevel})",
		"description":"CDOTABaseAbility_GetCooldown:\nGet the cooldown duration for this ability at a given level, not the amount of cooldown actually left.\nreturn float",
		"prefix":"GetCooldown"
	},
	"CDOTABaseAbility_GetCooldownTime":
	{
		"body":"GetCooldownTime()",
		"description":"CDOTABaseAbility_GetCooldownTime:\n\nreturn float",
		"prefix":"GetCooldownTime"
	},
	"CDOTABaseAbility_GetCooldownTimeRemaining":
	{
		"body":"GetCooldownTimeRemaining()",
		"description":"CDOTABaseAbility_GetCooldownTimeRemaining:\n\nreturn float",
		"prefix":"GetCooldownTimeRemaining"
	},
	"CDOTABaseAbility_GetCursorPosition":
	{
		"body":"GetCursorPosition()",
		"description":"CDOTABaseAbility_GetCursorPosition:\n\nreturn Vector",
		"prefix":"GetCursorPosition"
	},
	"CDOTABaseAbility_GetCursorTarget":
	{
		"body":"GetCursorTarget()",
		"description":"CDOTABaseAbility_GetCursorTarget:\n\nreturn handle",
		"prefix":"GetCursorTarget"
	},
	"CDOTABaseAbility_GetCursorTargetingNothing":
	{
		"body":"GetCursorTargetingNothing()",
		"description":"CDOTABaseAbility_GetCursorTargetingNothing:\n\nreturn bool",
		"prefix":"GetCursorTargetingNothing"
	},
	"CDOTABaseAbility_GetDuration":
	{
		"body":"GetDuration()",
		"description":"CDOTABaseAbility_GetDuration:\n\nreturn float",
		"prefix":"GetDuration"
	},
	"CDOTABaseAbility_GetEffectiveCooldown":
	{
		"body":"GetEffectiveCooldown(${iLevel})",
		"description":"CDOTABaseAbility_GetEffectiveCooldown:\n\nreturn float",
		"prefix":"GetEffectiveCooldown"
	},
	"CDOTABaseAbility_GetGoldCost":
	{
		"body":"GetGoldCost(${iLevel})",
		"description":"CDOTABaseAbility_GetGoldCost:\n\nreturn int",
		"prefix":"GetGoldCost"
	},
	"CDOTABaseAbility_GetGoldCostForUpgrade":
	{
		"body":"GetGoldCostForUpgrade(${iLevel})",
		"description":"CDOTABaseAbility_GetGoldCostForUpgrade:\n\nreturn int",
		"prefix":"GetGoldCostForUpgrade"
	},
	"CDOTABaseAbility_GetHeroLevelRequiredToUpgrade":
	{
		"body":"GetHeroLevelRequiredToUpgrade()",
		"description":"CDOTABaseAbility_GetHeroLevelRequiredToUpgrade:\n\nreturn int",
		"prefix":"GetHeroLevelRequiredToUpgrade"
	},
	"CDOTABaseAbility_GetIntrinsicModifierName":
	{
		"body":"GetIntrinsicModifierName()",
		"description":"CDOTABaseAbility_GetIntrinsicModifierName:\n\nreturn string",
		"prefix":"GetIntrinsicModifierName"
	},
	"CDOTABaseAbility_GetLevel":
	{
		"body":"GetLevel()",
		"description":"CDOTABaseAbility_GetLevel:\nGet the current level of the ability.\nreturn int",
		"prefix":"GetLevel"
	},
	"CDOTABaseAbility_GetLevelSpecialValueFor":
	{
		"body":"GetLevelSpecialValueFor(${szName}, ${nLevel})",
		"description":"CDOTABaseAbility_GetLevelSpecialValueFor:\n\nreturn table",
		"prefix":"GetLevelSpecialValueFor"
	},
	"CDOTABaseAbility_GetManaCost":
	{
		"body":"GetManaCost(${iLevel})",
		"description":"CDOTABaseAbility_GetManaCost:\n\nreturn int",
		"prefix":"GetManaCost"
	},
	"CDOTABaseAbility_GetMaxLevel":
	{
		"body":"GetMaxLevel()",
		"description":"CDOTABaseAbility_GetMaxLevel:\n\nreturn int",
		"prefix":"GetMaxLevel"
	},
	"CDOTABaseAbility_GetModifierValue":
	{
		"body":"GetModifierValue()",
		"description":"CDOTABaseAbility_GetModifierValue:\n\nreturn float",
		"prefix":"GetModifierValue"
	},
	"CDOTABaseAbility_GetModifierValueBonus":
	{
		"body":"GetModifierValueBonus()",
		"description":"CDOTABaseAbility_GetModifierValueBonus:\n\nreturn float",
		"prefix":"GetModifierValueBonus"
	},
	"CDOTABaseAbility_GetPlaybackRateOverride":
	{
		"body":"GetPlaybackRateOverride()",
		"description":"CDOTABaseAbility_GetPlaybackRateOverride:\n\nreturn float",
		"prefix":"GetPlaybackRateOverride"
	},
	"CDOTABaseAbility_GetSharedCooldownName":
	{
		"body":"GetSharedCooldownName()",
		"description":"CDOTABaseAbility_GetSharedCooldownName:\n\nreturn string",
		"prefix":"GetSharedCooldownName"
	},
	"CDOTABaseAbility_GetSpecialValueFor":
	{
		"body":"GetSpecialValueFor(${szName})",
		"description":"CDOTABaseAbility_GetSpecialValueFor:\nGets a value from this ability's special value block for its current level.\nreturn table",
		"prefix":"GetSpecialValueFor"
	},
	"CDOTABaseAbility_GetStolenActivityModifier":
	{
		"body":"GetStolenActivityModifier()",
		"description":"CDOTABaseAbility_GetStolenActivityModifier:\n\nreturn string",
		"prefix":"GetStolenActivityModifier"
	},
	"CDOTABaseAbility_GetToggleState":
	{
		"body":"GetToggleState()",
		"description":"CDOTABaseAbility_GetToggleState:\n\nreturn bool",
		"prefix":"GetToggleState"
	},
	"CDOTABaseAbility_HeroXPChange":
	{
		"body":"HeroXPChange(${flXP})",
		"description":"CDOTABaseAbility_HeroXPChange:\n\nreturn bool",
		"prefix":"HeroXPChange"
	},
	"CDOTABaseAbility_IncrementModifierRefCount":
	{
		"body":"IncrementModifierRefCount()",
		"description":"CDOTABaseAbility_IncrementModifierRefCount:\n\nreturn void",
		"prefix":"IncrementModifierRefCount"
	},
	"CDOTABaseAbility_IsActivated":
	{
		"body":"IsActivated()",
		"description":"CDOTABaseAbility_IsActivated:\n\nreturn bool",
		"prefix":"IsActivated"
	},
	"CDOTABaseAbility_IsAttributeBonus":
	{
		"body":"IsAttributeBonus()",
		"description":"CDOTABaseAbility_IsAttributeBonus:\n\nreturn bool",
		"prefix":"IsAttributeBonus"
	},
	"CDOTABaseAbility_IsChanneling":
	{
		"body":"IsChanneling()",
		"description":"CDOTABaseAbility_IsChanneling:\nReturns whether the ability is currently channeling.\nreturn bool",
		"prefix":"IsChanneling"
	},
	"CDOTABaseAbility_IsCooldownReady":
	{
		"body":"IsCooldownReady()",
		"description":"CDOTABaseAbility_IsCooldownReady:\n\nreturn bool",
		"prefix":"IsCooldownReady"
	},
	"CDOTABaseAbility_IsCosmetic":
	{
		"body":"IsCosmetic(${hEntity})",
		"description":"CDOTABaseAbility_IsCosmetic:\n\nreturn bool",
		"prefix":"IsCosmetic"
	},
	"CDOTABaseAbility_IsFullyCastable":
	{
		"body":"IsFullyCastable()",
		"description":"CDOTABaseAbility_IsFullyCastable:\nReturns whether the ability can be cast.\nreturn bool",
		"prefix":"IsFullyCastable"
	},
	"CDOTABaseAbility_IsHidden":
	{
		"body":"IsHidden()",
		"description":"CDOTABaseAbility_IsHidden:\n\nreturn bool",
		"prefix":"IsHidden"
	},
	"CDOTABaseAbility_IsHiddenWhenStolen":
	{
		"body":"IsHiddenWhenStolen()",
		"description":"CDOTABaseAbility_IsHiddenWhenStolen:\n\nreturn bool",
		"prefix":"IsHiddenWhenStolen"
	},
	"CDOTABaseAbility_IsInAbilityPhase":
	{
		"body":"IsInAbilityPhase()",
		"description":"CDOTABaseAbility_IsInAbilityPhase:\nReturns whether the ability is currently casting.\nreturn bool",
		"prefix":"IsInAbilityPhase"
	},
	"CDOTABaseAbility_IsItem":
	{
		"body":"IsItem()",
		"description":"CDOTABaseAbility_IsItem:\n\nreturn bool",
		"prefix":"IsItem"
	},
	"CDOTABaseAbility_IsOwnersGoldEnough":
	{
		"body":"IsOwnersGoldEnough(${nIssuerPlayerID})",
		"description":"CDOTABaseAbility_IsOwnersGoldEnough:\n\nreturn bool",
		"prefix":"IsOwnersGoldEnough"
	},
	"CDOTABaseAbility_IsOwnersGoldEnoughForUpgrade":
	{
		"body":"IsOwnersGoldEnoughForUpgrade()",
		"description":"CDOTABaseAbility_IsOwnersGoldEnoughForUpgrade:\n\nreturn bool",
		"prefix":"IsOwnersGoldEnoughForUpgrade"
	},
	"CDOTABaseAbility_IsOwnersManaEnough":
	{
		"body":"IsOwnersManaEnough()",
		"description":"CDOTABaseAbility_IsOwnersManaEnough:\n\nreturn bool",
		"prefix":"IsOwnersManaEnough"
	},
	"CDOTABaseAbility_IsPassive":
	{
		"body":"IsPassive()",
		"description":"CDOTABaseAbility_IsPassive:\n\nreturn bool",
		"prefix":"IsPassive"
	},
	"CDOTABaseAbility_IsRefreshable":
	{
		"body":"IsRefreshable()",
		"description":"CDOTABaseAbility_IsRefreshable:\n\nreturn bool",
		"prefix":"IsRefreshable"
	},
	"CDOTABaseAbility_IsSharedWithTeammates":
	{
		"body":"IsSharedWithTeammates()",
		"description":"CDOTABaseAbility_IsSharedWithTeammates:\n\nreturn bool",
		"prefix":"IsSharedWithTeammates"
	},
	"CDOTABaseAbility_IsStealable":
	{
		"body":"IsStealable()",
		"description":"CDOTABaseAbility_IsStealable:\n\nreturn bool",
		"prefix":"IsStealable"
	},
	"CDOTABaseAbility_IsStolen":
	{
		"body":"IsStolen()",
		"description":"CDOTABaseAbility_IsStolen:\n\nreturn bool",
		"prefix":"IsStolen"
	},
	"CDOTABaseAbility_IsToggle":
	{
		"body":"IsToggle()",
		"description":"CDOTABaseAbility_IsToggle:\n\nreturn bool",
		"prefix":"IsToggle"
	},
	"CDOTABaseAbility_IsTrained":
	{
		"body":"IsTrained()",
		"description":"CDOTABaseAbility_IsTrained:\n\nreturn bool",
		"prefix":"IsTrained"
	},
	"CDOTABaseAbility_MarkAbilityButtonDirty":
	{
		"body":"MarkAbilityButtonDirty()",
		"description":"CDOTABaseAbility_MarkAbilityButtonDirty:\nMark the ability button for this ability as needing a refresh.\nreturn void",
		"prefix":"MarkAbilityButtonDirty"
	},
	"CDOTABaseAbility_NumModifiersUsingAbility":
	{
		"body":"NumModifiersUsingAbility()",
		"description":"CDOTABaseAbility_NumModifiersUsingAbility:\n\nreturn int",
		"prefix":"NumModifiersUsingAbility"
	},
	"CDOTABaseAbility_OnAbilityPhaseInterrupted":
	{
		"body":"OnAbilityPhaseInterrupted()",
		"description":"CDOTABaseAbility_OnAbilityPhaseInterrupted:\n\nreturn void",
		"prefix":"OnAbilityPhaseInterrupted"
	},
	"CDOTABaseAbility_OnAbilityPhaseStart":
	{
		"body":"OnAbilityPhaseStart()",
		"description":"CDOTABaseAbility_OnAbilityPhaseStart:\n\nreturn bool",
		"prefix":"OnAbilityPhaseStart"
	},
	"CDOTABaseAbility_OnAbilityPinged":
	{
		"body":"OnAbilityPinged(${nPlayerID}, ${bCtrlHeld})",
		"description":"CDOTABaseAbility_OnAbilityPinged:\n\nreturn void",
		"prefix":"OnAbilityPinged"
	},
	"CDOTABaseAbility_OnChannelFinish":
	{
		"body":"OnChannelFinish(${bInterrupted})",
		"description":"CDOTABaseAbility_OnChannelFinish:\n\nreturn void",
		"prefix":"OnChannelFinish"
	},
	"CDOTABaseAbility_OnChannelThink":
	{
		"body":"OnChannelThink(${flInterval})",
		"description":"CDOTABaseAbility_OnChannelThink:\n\nreturn void",
		"prefix":"OnChannelThink"
	},
	"CDOTABaseAbility_OnHeroCalculateStatBonus":
	{
		"body":"OnHeroCalculateStatBonus()",
		"description":"CDOTABaseAbility_OnHeroCalculateStatBonus:\n\nreturn void",
		"prefix":"OnHeroCalculateStatBonus"
	},
	"CDOTABaseAbility_OnHeroLevelUp":
	{
		"body":"OnHeroLevelUp()",
		"description":"CDOTABaseAbility_OnHeroLevelUp:\n\nreturn void",
		"prefix":"OnHeroLevelUp"
	},
	"CDOTABaseAbility_OnOwnerDied":
	{
		"body":"OnOwnerDied()",
		"description":"CDOTABaseAbility_OnOwnerDied:\n\nreturn void",
		"prefix":"OnOwnerDied"
	},
	"CDOTABaseAbility_OnOwnerSpawned":
	{
		"body":"OnOwnerSpawned()",
		"description":"CDOTABaseAbility_OnOwnerSpawned:\n\nreturn void",
		"prefix":"OnOwnerSpawned"
	},
	"CDOTABaseAbility_OnSpellStart":
	{
		"body":"OnSpellStart()",
		"description":"CDOTABaseAbility_OnSpellStart:\n\nreturn void",
		"prefix":"OnSpellStart"
	},
	"CDOTABaseAbility_OnToggle":
	{
		"body":"OnToggle()",
		"description":"CDOTABaseAbility_OnToggle:\n\nreturn void",
		"prefix":"OnToggle"
	},
	"CDOTABaseAbility_OnUpgrade":
	{
		"body":"OnUpgrade()",
		"description":"CDOTABaseAbility_OnUpgrade:\n\nreturn void",
		"prefix":"OnUpgrade"
	},
	"CDOTABaseAbility_PayGoldCost":
	{
		"body":"PayGoldCost()",
		"description":"CDOTABaseAbility_PayGoldCost:\n\nreturn void",
		"prefix":"PayGoldCost"
	},
	"CDOTABaseAbility_PayGoldCostForUpgrade":
	{
		"body":"PayGoldCostForUpgrade()",
		"description":"CDOTABaseAbility_PayGoldCostForUpgrade:\n\nreturn void",
		"prefix":"PayGoldCostForUpgrade"
	},
	"CDOTABaseAbility_PayManaCost":
	{
		"body":"PayManaCost()",
		"description":"CDOTABaseAbility_PayManaCost:\n\nreturn void",
		"prefix":"PayManaCost"
	},
	"CDOTABaseAbility_PlaysDefaultAnimWhenStolen":
	{
		"body":"PlaysDefaultAnimWhenStolen()",
		"description":"CDOTABaseAbility_PlaysDefaultAnimWhenStolen:\n\nreturn bool",
		"prefix":"PlaysDefaultAnimWhenStolen"
	},
	"CDOTABaseAbility_ProcsMagicStick":
	{
		"body":"ProcsMagicStick()",
		"description":"CDOTABaseAbility_ProcsMagicStick:\n\nreturn bool",
		"prefix":"ProcsMagicStick"
	},
	"CDOTABaseAbility_RefCountsModifiers":
	{
		"body":"RefCountsModifiers()",
		"description":"CDOTABaseAbility_RefCountsModifiers:\n\nreturn bool",
		"prefix":"RefCountsModifiers"
	},
	"CDOTABaseAbility_RefreshCharges":
	{
		"body":"RefreshCharges()",
		"description":"CDOTABaseAbility_RefreshCharges:\n\nreturn void",
		"prefix":"RefreshCharges"
	},
	"CDOTABaseAbility_RefundManaCost":
	{
		"body":"RefundManaCost()",
		"description":"CDOTABaseAbility_RefundManaCost:\n\nreturn void",
		"prefix":"RefundManaCost"
	},
	"CDOTABaseAbility_ResetToggleOnRespawn":
	{
		"body":"ResetToggleOnRespawn()",
		"description":"CDOTABaseAbility_ResetToggleOnRespawn:\n\nreturn bool",
		"prefix":"ResetToggleOnRespawn"
	},
	"CDOTABaseAbility_SetAbilityIndex":
	{
		"body":"SetAbilityIndex(${iIndex})",
		"description":"CDOTABaseAbility_SetAbilityIndex:\n\nreturn void",
		"prefix":"SetAbilityIndex"
	},
	"CDOTABaseAbility_SetActivated":
	{
		"body":"SetActivated(${bActivated})",
		"description":"CDOTABaseAbility_SetActivated:\n\nreturn void",
		"prefix":"SetActivated"
	},
	"CDOTABaseAbility_SetChanneling":
	{
		"body":"SetChanneling(${bChanneling})",
		"description":"CDOTABaseAbility_SetChanneling:\n\nreturn void",
		"prefix":"SetChanneling"
	},
	"CDOTABaseAbility_SetFrozenCooldown":
	{
		"body":"SetFrozenCooldown(${bFrozenCooldown})",
		"description":"CDOTABaseAbility_SetFrozenCooldown:\n\nreturn void",
		"prefix":"SetFrozenCooldown"
	},
	"CDOTABaseAbility_SetHidden":
	{
		"body":"SetHidden(${bHidden})",
		"description":"CDOTABaseAbility_SetHidden:\n\nreturn void",
		"prefix":"SetHidden"
	},
	"CDOTABaseAbility_SetInAbilityPhase":
	{
		"body":"SetInAbilityPhase(${bInAbilityPhase})",
		"description":"CDOTABaseAbility_SetInAbilityPhase:\n\nreturn void",
		"prefix":"SetInAbilityPhase"
	},
	"CDOTABaseAbility_SetLevel":
	{
		"body":"SetLevel(${iLevel})",
		"description":"CDOTABaseAbility_SetLevel:\nSets the level of this ability.\nreturn void",
		"prefix":"SetLevel"
	},
	"CDOTABaseAbility_SetOverrideCastPoint":
	{
		"body":"SetOverrideCastPoint(${flCastPoint})",
		"description":"CDOTABaseAbility_SetOverrideCastPoint:\n\nreturn void",
		"prefix":"SetOverrideCastPoint"
	},
	"CDOTABaseAbility_SetRefCountsModifiers":
	{
		"body":"SetRefCountsModifiers(${bRefCounts})",
		"description":"CDOTABaseAbility_SetRefCountsModifiers:\n\nreturn void",
		"prefix":"SetRefCountsModifiers"
	},
	"CDOTABaseAbility_SetStolen":
	{
		"body":"SetStolen(${bStolen})",
		"description":"CDOTABaseAbility_SetStolen:\n\nreturn void",
		"prefix":"SetStolen"
	},
	"CDOTABaseAbility_ShouldUseResources":
	{
		"body":"ShouldUseResources()",
		"description":"CDOTABaseAbility_ShouldUseResources:\n\nreturn bool",
		"prefix":"ShouldUseResources"
	},
	"CDOTABaseAbility_SpeakAbilityConcept":
	{
		"body":"SpeakAbilityConcept(${iConcept})",
		"description":"CDOTABaseAbility_SpeakAbilityConcept:\n\nreturn void",
		"prefix":"SpeakAbilityConcept"
	},
	"CDOTABaseAbility_SpeakTrigger":
	{
		"body":"SpeakTrigger()",
		"description":"CDOTABaseAbility_SpeakTrigger:\n\nreturn <unknown>",
		"prefix":"SpeakTrigger"
	},
	"CDOTABaseAbility_StartCooldown":
	{
		"body":"StartCooldown(${flCooldown})",
		"description":"CDOTABaseAbility_StartCooldown:\n\nreturn void",
		"prefix":"StartCooldown"
	},
	"CDOTABaseAbility_ToggleAbility":
	{
		"body":"ToggleAbility()",
		"description":"CDOTABaseAbility_ToggleAbility:\n\nreturn void",
		"prefix":"ToggleAbility"
	},
	"CDOTABaseAbility_ToggleAutoCast":
	{
		"body":"ToggleAutoCast()",
		"description":"CDOTABaseAbility_ToggleAutoCast:\n\nreturn void",
		"prefix":"ToggleAutoCast"
	},
	"CDOTABaseAbility_UpgradeAbility":
	{
		"body":"UpgradeAbility(${bSupressSpeech})",
		"description":"CDOTABaseAbility_UpgradeAbility:\n\nreturn void",
		"prefix":"UpgradeAbility"
	},
	"CDOTABaseAbility_UseResources":
	{
		"body":"UseResources(${bMana}, ${bGold}, ${bCooldown})",
		"description":"CDOTABaseAbility_UseResources:\n\nreturn void",
		"prefix":"UseResources"
	},
	"CDOTABaseGameMode_AreWeatherEffectsDisabled":
	{
		"body":"AreWeatherEffectsDisabled()",
		"description":"CDOTABaseGameMode_AreWeatherEffectsDisabled:\nGet if weather effects are disabled on the client.\nreturn bool",
		"prefix":"AreWeatherEffectsDisabled"
	},
	"CDOTABaseGameMode_ClearBountyRunePickupFilter":
	{
		"body":"ClearBountyRunePickupFilter()",
		"description":"CDOTABaseGameMode_ClearBountyRunePickupFilter:\nClear the script filter that controls bounty rune pickup behavior.\nreturn void",
		"prefix":"ClearBountyRunePickupFilter"
	},
	"CDOTABaseGameMode_ClearDamageFilter":
	{
		"body":"ClearDamageFilter()",
		"description":"CDOTABaseGameMode_ClearDamageFilter:\nClear the script filter that controls how a unit takes damage.\nreturn void",
		"prefix":"ClearDamageFilter"
	},
	"CDOTABaseGameMode_ClearExecuteOrderFilter":
	{
		"body":"ClearExecuteOrderFilter()",
		"description":"CDOTABaseGameMode_ClearExecuteOrderFilter:\nClear the script filter that controls when a unit picks up an item.\nreturn void",
		"prefix":"ClearExecuteOrderFilter"
	},
	"CDOTABaseGameMode_ClearHealingFilter":
	{
		"body":"ClearHealingFilter()",
		"description":"CDOTABaseGameMode_ClearHealingFilter:\nClear the script filter that controls how a unit heals.\nreturn void",
		"prefix":"ClearHealingFilter"
	},
	"CDOTABaseGameMode_ClearItemAddedToInventoryFilter":
	{
		"body":"ClearItemAddedToInventoryFilter()",
		"description":"CDOTABaseGameMode_ClearItemAddedToInventoryFilter:\nClear the script filter that controls the item added to inventory filter.\nreturn void",
		"prefix":"ClearItemAddedToInventoryFilter"
	},
	"CDOTABaseGameMode_ClearModifierGainedFilter":
	{
		"body":"ClearModifierGainedFilter()",
		"description":"CDOTABaseGameMode_ClearModifierGainedFilter:\nClear the script filter that controls the modifier filter.\nreturn void",
		"prefix":"ClearModifierGainedFilter"
	},
	"CDOTABaseGameMode_ClearModifyExperienceFilter":
	{
		"body":"ClearModifyExperienceFilter()",
		"description":"CDOTABaseGameMode_ClearModifyExperienceFilter:\nClear the script filter that controls how hero experience is modified.\nreturn void",
		"prefix":"ClearModifyExperienceFilter"
	},
	"CDOTABaseGameMode_ClearModifyGoldFilter":
	{
		"body":"ClearModifyGoldFilter()",
		"description":"CDOTABaseGameMode_ClearModifyGoldFilter:\nClear the script filter that controls how hero gold is modified.\nreturn void",
		"prefix":"ClearModifyGoldFilter"
	},
	"CDOTABaseGameMode_ClearRuneSpawnFilter":
	{
		"body":"ClearRuneSpawnFilter()",
		"description":"CDOTABaseGameMode_ClearRuneSpawnFilter:\nClear the script filter that controls what rune spawns.\nreturn void",
		"prefix":"ClearRuneSpawnFilter"
	},
	"CDOTABaseGameMode_ClearTrackingProjectileFilter":
	{
		"body":"ClearTrackingProjectileFilter()",
		"description":"CDOTABaseGameMode_ClearTrackingProjectileFilter:\nClear the script filter that controls when tracking projectiles are launched.\nreturn void",
		"prefix":"ClearTrackingProjectileFilter"
	},
	"CDOTABaseGameMode_DisableHudFlip":
	{
		"body":"DisableHudFlip(${bDisable})",
		"description":"CDOTABaseGameMode_DisableHudFlip:\nUse to disable hud flip for this mod\nreturn void",
		"prefix":"DisableHudFlip"
	},
	"CDOTABaseGameMode_GetAlwaysShowPlayerInventory":
	{
		"body":"GetAlwaysShowPlayerInventory()",
		"description":"CDOTABaseGameMode_GetAlwaysShowPlayerInventory:\nShow the player hero's inventory in the HUD, regardless of what unit is selected.\nreturn bool",
		"prefix":"GetAlwaysShowPlayerInventory"
	},
	"CDOTABaseGameMode_GetAlwaysShowPlayerNames":
	{
		"body":"GetAlwaysShowPlayerNames()",
		"description":"CDOTABaseGameMode_GetAlwaysShowPlayerNames:\nGet whether player names are always shown, regardless of client setting.\nreturn bool",
		"prefix":"GetAlwaysShowPlayerNames"
	},
	"CDOTABaseGameMode_GetAnnouncerDisabled":
	{
		"body":"GetAnnouncerDisabled()",
		"description":"CDOTABaseGameMode_GetAnnouncerDisabled:\nAre in-game announcers disabled?\nreturn bool",
		"prefix":"GetAnnouncerDisabled"
	},
	"CDOTABaseGameMode_GetCameraDistanceOverride":
	{
		"body":"GetCameraDistanceOverride()",
		"description":"CDOTABaseGameMode_GetCameraDistanceOverride:\nSet a different camera distance; dota default is 1134.\nreturn float",
		"prefix":"GetCameraDistanceOverride"
	},
	"CDOTABaseGameMode_GetCustomAttributeDerivedStatValue":
	{
		"body":"GetCustomAttributeDerivedStatValue(${nDerivedStatType}, ${hHero})",
		"description":"CDOTABaseGameMode_GetCustomAttributeDerivedStatValue:\nGet current derived stat value constant.\nreturn float",
		"prefix":"GetCustomAttributeDerivedStatValue"
	},
	"CDOTABaseGameMode_GetCustomBuybackCooldownEnabled":
	{
		"body":"GetCustomBuybackCooldownEnabled()",
		"description":"CDOTABaseGameMode_GetCustomBuybackCooldownEnabled:\nTurns on capability to define custom buyback cooldowns.\nreturn bool",
		"prefix":"GetCustomBuybackCooldownEnabled"
	},
	"CDOTABaseGameMode_GetCustomBuybackCostEnabled":
	{
		"body":"GetCustomBuybackCostEnabled()",
		"description":"CDOTABaseGameMode_GetCustomBuybackCostEnabled:\nTurns on capability to define custom buyback costs.\nreturn bool",
		"prefix":"GetCustomBuybackCostEnabled"
	},
	"CDOTABaseGameMode_GetCustomHeroMaxLevel":
	{
		"body":"GetCustomHeroMaxLevel()",
		"description":"CDOTABaseGameMode_GetCustomHeroMaxLevel:\nAllows definition of the max level heroes can achieve (default is 25).\nreturn int",
		"prefix":"GetCustomHeroMaxLevel"
	},
	"CDOTABaseGameMode_GetCustomScanCooldown":
	{
		"body":"GetCustomScanCooldown()",
		"description":"CDOTABaseGameMode_GetCustomScanCooldown:\nGet the current custom scan cooldown.\nreturn float",
		"prefix":"GetCustomScanCooldown"
	},
	"CDOTABaseGameMode_GetFixedRespawnTime":
	{
		"body":"GetFixedRespawnTime()",
		"description":"CDOTABaseGameMode_GetFixedRespawnTime:\nGets the fixed respawn time.\nreturn float",
		"prefix":"GetFixedRespawnTime"
	},
	"CDOTABaseGameMode_GetFogOfWarDisabled":
	{
		"body":"GetFogOfWarDisabled()",
		"description":"CDOTABaseGameMode_GetFogOfWarDisabled:\nTurn the fog of war on or off.\nreturn bool",
		"prefix":"GetFogOfWarDisabled"
	},
	"CDOTABaseGameMode_GetGoldSoundDisabled":
	{
		"body":"GetGoldSoundDisabled()",
		"description":"CDOTABaseGameMode_GetGoldSoundDisabled:\nTurn the sound when gold is acquired off/on.\nreturn bool",
		"prefix":"GetGoldSoundDisabled"
	},
	"CDOTABaseGameMode_GetHUDVisible":
	{
		"body":"GetHUDVisible(${iElement})",
		"description":"CDOTABaseGameMode_GetHUDVisible:\nReturns the HUD element visibility.\nreturn bool",
		"prefix":"GetHUDVisible"
	},
	"CDOTABaseGameMode_GetMaximumAttackSpeed":
	{
		"body":"GetMaximumAttackSpeed()",
		"description":"CDOTABaseGameMode_GetMaximumAttackSpeed:\nGet the maximum attack speed for units.\nreturn int",
		"prefix":"GetMaximumAttackSpeed"
	},
	"CDOTABaseGameMode_GetMinimumAttackSpeed":
	{
		"body":"GetMinimumAttackSpeed()",
		"description":"CDOTABaseGameMode_GetMinimumAttackSpeed:\nGet the minimum attack speed for units.\nreturn int",
		"prefix":"GetMinimumAttackSpeed"
	},
	"CDOTABaseGameMode_GetRecommendedItemsDisabled":
	{
		"body":"GetRecommendedItemsDisabled()",
		"description":"CDOTABaseGameMode_GetRecommendedItemsDisabled:\nTurn the panel for showing recommended items at the shop off/on.\nreturn bool",
		"prefix":"GetRecommendedItemsDisabled"
	},
	"CDOTABaseGameMode_GetRespawnTimeScale":
	{
		"body":"GetRespawnTimeScale()",
		"description":"CDOTABaseGameMode_GetRespawnTimeScale:\nReturns the scale applied to non-fixed respawn times.\nreturn float",
		"prefix":"GetRespawnTimeScale"
	},
	"CDOTABaseGameMode_GetStashPurchasingDisabled":
	{
		"body":"GetStashPurchasingDisabled()",
		"description":"CDOTABaseGameMode_GetStashPurchasingDisabled:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.\nreturn bool",
		"prefix":"GetStashPurchasingDisabled"
	},
	"CDOTABaseGameMode_GetStickyItemDisabled":
	{
		"body":"GetStickyItemDisabled()",
		"description":"CDOTABaseGameMode_GetStickyItemDisabled:\nHide the sticky item in the quickbuy.\nreturn bool",
		"prefix":"GetStickyItemDisabled"
	},
	"CDOTABaseGameMode_GetTopBarTeamValuesOverride":
	{
		"body":"GetTopBarTeamValuesOverride()",
		"description":"CDOTABaseGameMode_GetTopBarTeamValuesOverride:\nOverride the values of the team values on the top game bar.\nreturn bool",
		"prefix":"GetTopBarTeamValuesOverride"
	},
	"CDOTABaseGameMode_GetTopBarTeamValuesVisible":
	{
		"body":"GetTopBarTeamValuesVisible()",
		"description":"CDOTABaseGameMode_GetTopBarTeamValuesVisible:\nTurning on/off the team values on the top game bar.\nreturn bool",
		"prefix":"GetTopBarTeamValuesVisible"
	},
	"CDOTABaseGameMode_GetTowerBackdoorProtectionEnabled":
	{
		"body":"GetTowerBackdoorProtectionEnabled()",
		"description":"CDOTABaseGameMode_GetTowerBackdoorProtectionEnabled:\nGets whether tower backdoor protection is enabled or not.\nreturn bool",
		"prefix":"GetTowerBackdoorProtectionEnabled"
	},
	"CDOTABaseGameMode_GetUseCustomHeroLevels":
	{
		"body":"GetUseCustomHeroLevels()",
		"description":"CDOTABaseGameMode_GetUseCustomHeroLevels:\nAre custom-defined XP values for hero level ups in use?\nreturn bool",
		"prefix":"GetUseCustomHeroLevels"
	},
	"CDOTABaseGameMode_IsBuybackEnabled":
	{
		"body":"IsBuybackEnabled()",
		"description":"CDOTABaseGameMode_IsBuybackEnabled:\nEnables or disables buyback completely.\nreturn bool",
		"prefix":"IsBuybackEnabled"
	},
	"CDOTABaseGameMode_IsDaynightCycleDisabled":
	{
		"body":"IsDaynightCycleDisabled()",
		"description":"CDOTABaseGameMode_IsDaynightCycleDisabled:\nIs the day/night cycle disabled?\nreturn bool",
		"prefix":"IsDaynightCycleDisabled"
	},
	"CDOTABaseGameMode_SetAbilityTuningValueFilter":
	{
		"body":"SetAbilityTuningValueFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetAbilityTuningValueFilter:\nSet a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)\nreturn void",
		"prefix":"SetAbilityTuningValueFilter"
	},
	"CDOTABaseGameMode_SetAlwaysShowPlayerInventory":
	{
		"body":"SetAlwaysShowPlayerInventory(${bAlwaysShow})",
		"description":"CDOTABaseGameMode_SetAlwaysShowPlayerInventory:\nShow the player hero's inventory in the HUD, regardless of what unit is selected.\nreturn void",
		"prefix":"SetAlwaysShowPlayerInventory"
	},
	"CDOTABaseGameMode_SetAlwaysShowPlayerNames":
	{
		"body":"SetAlwaysShowPlayerNames(${bEnabled})",
		"description":"CDOTABaseGameMode_SetAlwaysShowPlayerNames:\nSet whether player names are always shown, regardless of client setting.\nreturn void",
		"prefix":"SetAlwaysShowPlayerNames"
	},
	"CDOTABaseGameMode_SetAnnouncerDisabled":
	{
		"body":"SetAnnouncerDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetAnnouncerDisabled:\nMutes the in-game announcer.\nreturn void",
		"prefix":"SetAnnouncerDisabled"
	},
	"CDOTABaseGameMode_SetBotThinkingEnabled":
	{
		"body":"SetBotThinkingEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetBotThinkingEnabled:\nEnables/Disables bots in custom games. Note: this will only work with default heroes in the dota map.\nreturn void",
		"prefix":"SetBotThinkingEnabled"
	},
	"CDOTABaseGameMode_SetBotsAlwaysPushWithHuman":
	{
		"body":"SetBotsAlwaysPushWithHuman(${bAlwaysPush})",
		"description":"CDOTABaseGameMode_SetBotsAlwaysPushWithHuman:\nSet if the bots should try their best to push with a human player.\nreturn void",
		"prefix":"SetBotsAlwaysPushWithHuman"
	},
	"CDOTABaseGameMode_SetBotsInLateGame":
	{
		"body":"SetBotsInLateGame(${bLateGame})",
		"description":"CDOTABaseGameMode_SetBotsInLateGame:\nSet if bots should enable their late game behavior.\nreturn void",
		"prefix":"SetBotsInLateGame"
	},
	"CDOTABaseGameMode_SetBotsMaxPushTier":
	{
		"body":"SetBotsMaxPushTier(${nMaxTier})",
		"description":"CDOTABaseGameMode_SetBotsMaxPushTier:\nSet the max tier of tower that bots want to push. (-1 to disable)\nreturn void",
		"prefix":"SetBotsMaxPushTier"
	},
	"CDOTABaseGameMode_SetBountyRunePickupFilter":
	{
		"body":"SetBountyRunePickupFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetBountyRunePickupFilter:\nSet a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetBountyRunePickupFilter"
	},
	"CDOTABaseGameMode_SetBountyRuneSpawnInterval":
	{
		"body":"SetBountyRuneSpawnInterval(${flInterval})",
		"description":"CDOTABaseGameMode_SetBountyRuneSpawnInterval:\nSet bounty rune spawn rate\nreturn void",
		"prefix":"SetBountyRuneSpawnInterval"
	},
	"CDOTABaseGameMode_SetBuybackEnabled":
	{
		"body":"SetBuybackEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetBuybackEnabled:\nEnables or disables buyback completely.\nreturn void",
		"prefix":"SetBuybackEnabled"
	},
	"CDOTABaseGameMode_SetCameraDistanceOverride":
	{
		"body":"SetCameraDistanceOverride(${flCameraDistanceOverride})",
		"description":"CDOTABaseGameMode_SetCameraDistanceOverride:\nSet a different camera distance; dota default is 1134.\nreturn void",
		"prefix":"SetCameraDistanceOverride"
	},
	"CDOTABaseGameMode_SetCameraSmoothCountOverride":
	{
		"body":"SetCameraSmoothCountOverride(${nSmoothCount})",
		"description":"CDOTABaseGameMode_SetCameraSmoothCountOverride:\nSet a different camera smooth count; dota default is 8.\nreturn void",
		"prefix":"SetCameraSmoothCountOverride"
	},
	"CDOTABaseGameMode_SetCustomAttributeDerivedStatValue":
	{
		"body":"SetCustomAttributeDerivedStatValue(${nStatType}, ${flNewValue})",
		"description":"CDOTABaseGameMode_SetCustomAttributeDerivedStatValue:\nModify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue.\nreturn void",
		"prefix":"SetCustomAttributeDerivedStatValue"
	},
	"CDOTABaseGameMode_SetCustomBuybackCooldownEnabled":
	{
		"body":"SetCustomBuybackCooldownEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetCustomBuybackCooldownEnabled:\nTurns on capability to define custom buyback cooldowns.\nreturn void",
		"prefix":"SetCustomBuybackCooldownEnabled"
	},
	"CDOTABaseGameMode_SetCustomBuybackCostEnabled":
	{
		"body":"SetCustomBuybackCostEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetCustomBuybackCostEnabled:\nTurns on capability to define custom buyback costs.\nreturn void",
		"prefix":"SetCustomBuybackCostEnabled"
	},
	"CDOTABaseGameMode_SetCustomGameForceHero":
	{
		"body":"SetCustomGameForceHero(${pHeroName})",
		"description":"CDOTABaseGameMode_SetCustomGameForceHero:\nForce all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection.\nreturn void",
		"prefix":"SetCustomGameForceHero"
	},
	"CDOTABaseGameMode_SetCustomHeroMaxLevel":
	{
		"body":"SetCustomHeroMaxLevel(${defaultis25})",
		"description":"CDOTABaseGameMode_SetCustomHeroMaxLevel:\nAllows definition of the max level heroes can achieve (default is 25).\nreturn void",
		"prefix":"SetCustomHeroMaxLevel"
	},
	"CDOTABaseGameMode_SetCustomScanCooldown":
	{
		"body":"SetCustomScanCooldown(${flCooldown})",
		"description":"CDOTABaseGameMode_SetCustomScanCooldown:\nSet a custom cooldown for team Scan ability.\nreturn void",
		"prefix":"SetCustomScanCooldown"
	},
	"CDOTABaseGameMode_SetCustomTerrainWeatherEffect":
	{
		"body":"SetCustomTerrainWeatherEffect(${pszEffectName})",
		"description":"CDOTABaseGameMode_SetCustomTerrainWeatherEffect:\nSet the effect used as a custom weather effect, when units are on non-default terrain, in this mode.\nreturn void",
		"prefix":"SetCustomTerrainWeatherEffect"
	},
	"CDOTABaseGameMode_SetCustomXPRequiredToReachNextLevel":
	{
		"body":"SetCustomXPRequiredToReachNextLevel(${hTable})",
		"description":"CDOTABaseGameMode_SetCustomXPRequiredToReachNextLevel:\nAllows definition of a table of hero XP values.\nreturn void",
		"prefix":"SetCustomXPRequiredToReachNextLevel"
	},
	"CDOTABaseGameMode_SetDamageFilter":
	{
		"body":"SetDamageFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetDamageFilter:\nSet a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetDamageFilter"
	},
	"CDOTABaseGameMode_SetDaynightCycleDisabled":
	{
		"body":"SetDaynightCycleDisabled(${bDisable})",
		"description":"CDOTABaseGameMode_SetDaynightCycleDisabled:\nEnable or disable the day/night cycle.\nreturn void",
		"prefix":"SetDaynightCycleDisabled"
	},
	"CDOTABaseGameMode_SetDeathOverlayDisabled":
	{
		"body":"SetDeathOverlayDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetDeathOverlayDisabled:\nSpecify whether the full screen death overlay effect plays when the selected hero dies.\nreturn void",
		"prefix":"SetDeathOverlayDisabled"
	},
	"CDOTABaseGameMode_SetDraftingBanningTimeOverride":
	{
		"body":"SetDraftingBanningTimeOverride(${flValue})",
		"description":"CDOTABaseGameMode_SetDraftingBanningTimeOverride:\nSet drafting hero banning time\nreturn void",
		"prefix":"SetDraftingBanningTimeOverride"
	},
	"CDOTABaseGameMode_SetDraftingHeroPickSelectTimeOverride":
	{
		"body":"SetDraftingHeroPickSelectTimeOverride(${flValue})",
		"description":"CDOTABaseGameMode_SetDraftingHeroPickSelectTimeOverride:\nSet drafting hero pick time\nreturn void",
		"prefix":"SetDraftingHeroPickSelectTimeOverride"
	},
	"CDOTABaseGameMode_SetExecuteOrderFilter":
	{
		"body":"SetExecuteOrderFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetExecuteOrderFilter:\nSet a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetExecuteOrderFilter"
	},
	"CDOTABaseGameMode_SetFixedRespawnTime":
	{
		"body":"SetFixedRespawnTime(${flFixedRespawnTime})",
		"description":"CDOTABaseGameMode_SetFixedRespawnTime:\nSet a fixed delay for all players to respawn after.\nreturn void",
		"prefix":"SetFixedRespawnTime"
	},
	"CDOTABaseGameMode_SetFogOfWarDisabled":
	{
		"body":"SetFogOfWarDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetFogOfWarDisabled:\nTurn the fog of war on or off.\nreturn void",
		"prefix":"SetFogOfWarDisabled"
	},
	"CDOTABaseGameMode_SetFountainConstantManaRegen":
	{
		"body":"SetFountainConstantManaRegen(${flConstantManaRegen})",
		"description":"CDOTABaseGameMode_SetFountainConstantManaRegen:\nSet the constant rate that the fountain will regen mana. (-1 for default)\nreturn void",
		"prefix":"SetFountainConstantManaRegen"
	},
	"CDOTABaseGameMode_SetFountainPercentageHealthRegen":
	{
		"body":"SetFountainPercentageHealthRegen(${flPercentageHealthRegen})",
		"description":"CDOTABaseGameMode_SetFountainPercentageHealthRegen:\nSet the percentage rate that the fountain will regen health. (-1 for default)\nreturn void",
		"prefix":"SetFountainPercentageHealthRegen"
	},
	"CDOTABaseGameMode_SetFountainPercentageManaRegen":
	{
		"body":"SetFountainPercentageManaRegen(${flPercentageManaRegen})",
		"description":"CDOTABaseGameMode_SetFountainPercentageManaRegen:\nSet the percentage rate that the fountain will regen mana. (-1 for default)\nreturn void",
		"prefix":"SetFountainPercentageManaRegen"
	},
	"CDOTABaseGameMode_SetFriendlyBuildingMoveToEnabled":
	{
		"body":"SetFriendlyBuildingMoveToEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetFriendlyBuildingMoveToEnabled:\nAllows clicks on friendly buildings to be handled normally.\nreturn void",
		"prefix":"SetFriendlyBuildingMoveToEnabled"
	},
	"CDOTABaseGameMode_SetGoldSoundDisabled":
	{
		"body":"SetGoldSoundDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetGoldSoundDisabled:\nTurn the sound when gold is acquired off/on.\nreturn void",
		"prefix":"SetGoldSoundDisabled"
	},
	"CDOTABaseGameMode_SetHUDVisible":
	{
		"body":"SetHUDVisible(${iHUDElement}, ${bVisible})",
		"description":"CDOTABaseGameMode_SetHUDVisible:\nSet the HUD element visibility.\nreturn void",
		"prefix":"SetHUDVisible"
	},
	"CDOTABaseGameMode_SetHealingFilter":
	{
		"body":"SetHealingFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetHealingFilter:\nSet a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetHealingFilter"
	},
	"CDOTABaseGameMode_SetHudCombatEventsDisabled":
	{
		"body":"SetHudCombatEventsDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetHudCombatEventsDisabled:\nSpecify whether the default combat events will show in the HUD.\nreturn void",
		"prefix":"SetHudCombatEventsDisabled"
	},
	"CDOTABaseGameMode_SetItemAddedToInventoryFilter":
	{
		"body":"SetItemAddedToInventoryFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetItemAddedToInventoryFilter:\nSet a filter function to control what happens to items that are added to an inventory, return false to cancel the event\nreturn void",
		"prefix":"SetItemAddedToInventoryFilter"
	},
	"CDOTABaseGameMode_SetKillableTombstones":
	{
		"body":"SetKillableTombstones(${bEnabled})",
		"description":"CDOTABaseGameMode_SetKillableTombstones:\nSet whether tombstones can be channeled to be removed by enemy heroes.\nreturn void",
		"prefix":"SetKillableTombstones"
	},
	"CDOTABaseGameMode_SetKillingSpreeAnnouncerDisabled":
	{
		"body":"SetKillingSpreeAnnouncerDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetKillingSpreeAnnouncerDisabled:\nMutes the in-game killing spree announcer.\nreturn void",
		"prefix":"SetKillingSpreeAnnouncerDisabled"
	},
	"CDOTABaseGameMode_SetLoseGoldOnDeath":
	{
		"body":"SetLoseGoldOnDeath(${bEnabled})",
		"description":"CDOTABaseGameMode_SetLoseGoldOnDeath:\nUse to disable gold loss on death.\nreturn void",
		"prefix":"SetLoseGoldOnDeath"
	},
	"CDOTABaseGameMode_SetMaximumAttackSpeed":
	{
		"body":"SetMaximumAttackSpeed(${nMaxSpeed})",
		"description":"CDOTABaseGameMode_SetMaximumAttackSpeed:\nSet the maximum attack speed for units.\nreturn void",
		"prefix":"SetMaximumAttackSpeed"
	},
	"CDOTABaseGameMode_SetMinimumAttackSpeed":
	{
		"body":"SetMinimumAttackSpeed(${nMinSpeed})",
		"description":"CDOTABaseGameMode_SetMinimumAttackSpeed:\nSet the minimum attack speed for units.\nreturn void",
		"prefix":"SetMinimumAttackSpeed"
	},
	"CDOTABaseGameMode_SetModifierGainedFilter":
	{
		"body":"SetModifierGainedFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetModifierGainedFilter:\nSet a filter function to control modifiers that are gained, return false to destroy modifier.\nreturn void",
		"prefix":"SetModifierGainedFilter"
	},
	"CDOTABaseGameMode_SetModifyExperienceFilter":
	{
		"body":"SetModifyExperienceFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetModifyExperienceFilter:\nSet a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetModifyExperienceFilter"
	},
	"CDOTABaseGameMode_SetModifyGoldFilter":
	{
		"body":"SetModifyGoldFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetModifyGoldFilter:\nSet a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetModifyGoldFilter"
	},
	"CDOTABaseGameMode_SetOverrideSelectionEntity":
	{
		"body":"SetOverrideSelectionEntity(${hOverrideEntity})",
		"description":"CDOTABaseGameMode_SetOverrideSelectionEntity:\nSet an override for the default selection entity, instead of each player's hero.\nreturn void",
		"prefix":"SetOverrideSelectionEntity"
	},
	"CDOTABaseGameMode_SetPauseEnabled":
	{
		"body":"SetPauseEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetPauseEnabled:\nSet pausing enabled/disabled\nreturn void",
		"prefix":"SetPauseEnabled"
	},
	"CDOTABaseGameMode_SetPowerRuneSpawnInterval":
	{
		"body":"SetPowerRuneSpawnInterval(${flInterval})",
		"description":"CDOTABaseGameMode_SetPowerRuneSpawnInterval:\nSet power rune spawn rate\nreturn void",
		"prefix":"SetPowerRuneSpawnInterval"
	},
	"CDOTABaseGameMode_SetRecommendedItemsDisabled":
	{
		"body":"SetRecommendedItemsDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetRecommendedItemsDisabled:\nTurn the panel for showing recommended items at the shop off/on.\nreturn void",
		"prefix":"SetRecommendedItemsDisabled"
	},
	"CDOTABaseGameMode_SetRemoveIllusionsOnDeath":
	{
		"body":"SetRemoveIllusionsOnDeath(${bRemove})",
		"description":"CDOTABaseGameMode_SetRemoveIllusionsOnDeath:\nMake it so illusions are immediately removed upon death, rather than sticking around for a few seconds.\nreturn void",
		"prefix":"SetRemoveIllusionsOnDeath"
	},
	"CDOTABaseGameMode_SetRespawnTimeScale":
	{
		"body":"SetRespawnTimeScale(${flValue})",
		"description":"CDOTABaseGameMode_SetRespawnTimeScale:\nSets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations.\nreturn void",
		"prefix":"SetRespawnTimeScale"
	},
	"CDOTABaseGameMode_SetRuneEnabled":
	{
		"body":"SetRuneEnabled(${nRune}, ${bEnabled})",
		"description":"CDOTABaseGameMode_SetRuneEnabled:\nSet if a given type of rune is enabled.\nreturn void",
		"prefix":"SetRuneEnabled"
	},
	"CDOTABaseGameMode_SetRuneSpawnFilter":
	{
		"body":"SetRuneSpawnFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetRuneSpawnFilter:\nSet a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetRuneSpawnFilter"
	},
	"CDOTABaseGameMode_SetSelectionGoldPenaltyEnabled":
	{
		"body":"SetSelectionGoldPenaltyEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetSelectionGoldPenaltyEnabled:\nEnable/disable gold penalty for late picking.\nreturn void",
		"prefix":"SetSelectionGoldPenaltyEnabled"
	},
	"CDOTABaseGameMode_SetStashPurchasingDisabled":
	{
		"body":"SetStashPurchasingDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetStashPurchasingDisabled:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.\nreturn void",
		"prefix":"SetStashPurchasingDisabled"
	},
	"CDOTABaseGameMode_SetStickyItemDisabled":
	{
		"body":"SetStickyItemDisabled(${bDisabled})",
		"description":"CDOTABaseGameMode_SetStickyItemDisabled:\nHide the sticky item in the quickbuy.\nreturn void",
		"prefix":"SetStickyItemDisabled"
	},
	"CDOTABaseGameMode_SetTopBarTeamValue":
	{
		"body":"SetTopBarTeamValue(${iTeam}, ${nValue})",
		"description":"CDOTABaseGameMode_SetTopBarTeamValue:\nSet the team values on the top game bar.\nreturn void",
		"prefix":"SetTopBarTeamValue"
	},
	"CDOTABaseGameMode_SetTopBarTeamValuesOverride":
	{
		"body":"SetTopBarTeamValuesOverride(${bOverride})",
		"description":"CDOTABaseGameMode_SetTopBarTeamValuesOverride:\nOverride the values of the team values on the top game bar.\nreturn void",
		"prefix":"SetTopBarTeamValuesOverride"
	},
	"CDOTABaseGameMode_SetTopBarTeamValuesVisible":
	{
		"body":"SetTopBarTeamValuesVisible(${bVisible})",
		"description":"CDOTABaseGameMode_SetTopBarTeamValuesVisible:\nTurning on/off the team values on the top game bar.\nreturn void",
		"prefix":"SetTopBarTeamValuesVisible"
	},
	"CDOTABaseGameMode_SetTowerBackdoorProtectionEnabled":
	{
		"body":"SetTowerBackdoorProtectionEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetTowerBackdoorProtectionEnabled:\nEnables/Disables tower backdoor protection.\nreturn void",
		"prefix":"SetTowerBackdoorProtectionEnabled"
	},
	"CDOTABaseGameMode_SetTrackingProjectileFilter":
	{
		"body":"SetTrackingProjectileFilter(${hFunction}, ${hContext})",
		"description":"CDOTABaseGameMode_SetTrackingProjectileFilter:\nSet a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)\nreturn void",
		"prefix":"SetTrackingProjectileFilter"
	},
	"CDOTABaseGameMode_SetUnseenFogOfWarEnabled":
	{
		"body":"SetUnseenFogOfWarEnabled(${bEnabled})",
		"description":"CDOTABaseGameMode_SetUnseenFogOfWarEnabled:\nEnable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war.\nreturn void",
		"prefix":"SetUnseenFogOfWarEnabled"
	},
	"CDOTABaseGameMode_SetUseCustomHeroLevels":
	{
		"body":"SetUseCustomHeroLevels(${bEnabled})",
		"description":"CDOTABaseGameMode_SetUseCustomHeroLevels:\nTurn on custom-defined XP values for hero level ups.  The table should be defined before switching this on.\nreturn void",
		"prefix":"SetUseCustomHeroLevels"
	},
	"CDOTABaseGameMode_SetUseDefaultDOTARuneSpawnLogic":
	{
		"body":"SetUseDefaultDOTARuneSpawnLogic(${bEnabled})",
		"description":"CDOTABaseGameMode_SetUseDefaultDOTARuneSpawnLogic:\nIf set to true, use current rune spawn rules.  Either setting respects custom spawn intervals.\nreturn void",
		"prefix":"SetUseDefaultDOTARuneSpawnLogic"
	},
	"CDOTABaseGameMode_SetWeatherEffectsDisabled":
	{
		"body":"SetWeatherEffectsDisabled(${bDisable})",
		"description":"CDOTABaseGameMode_SetWeatherEffectsDisabled:\nSet if weather effects are disabled.\nreturn void",
		"prefix":"SetWeatherEffectsDisabled"
	},
	"CDOTAGameManager_GetHeroDataByName_Script":
	{
		"body":"GetHeroDataByName_Script(${string_1})",
		"description":"CDOTAGameManager_GetHeroDataByName_Script:\nGet the hero unit \nreturn table",
		"prefix":"GetHeroDataByName_Script"
	},
	"CDOTAGameManager_GetHeroIDByName":
	{
		"body":"GetHeroIDByName(${string_1})",
		"description":"CDOTAGameManager_GetHeroIDByName:\nGet the hero ID given the hero name.\nreturn int",
		"prefix":"GetHeroIDByName"
	},
	"CDOTAGameManager_GetHeroNameByID":
	{
		"body":"GetHeroNameByID(${int_1})",
		"description":"CDOTAGameManager_GetHeroNameByID:\nGet the hero name given a hero ID.\nreturn string",
		"prefix":"GetHeroNameByID"
	},
	"CDOTAGameManager_GetHeroNameForUnitName":
	{
		"body":"GetHeroNameForUnitName(${string_1})",
		"description":"CDOTAGameManager_GetHeroNameForUnitName:\nGet the hero name given a unit name.\nreturn string",
		"prefix":"GetHeroNameForUnitName"
	},
	"CDOTAGameManager_GetHeroUnitNameByID":
	{
		"body":"GetHeroUnitNameByID(${int_1})",
		"description":"CDOTAGameManager_GetHeroUnitNameByID:\nGet the hero unit name given the hero ID.\nreturn string",
		"prefix":"GetHeroUnitNameByID"
	},
	"CDOTAGamerules_AddEventMetadataLeaderboardEntry":
	{
		"body":"AddEventMetadataLeaderboardEntry(${stringszNameSuffix}, ${intnStars}, ${intnMaxStars}, ${intnExtraData1}, ${intnExtraData2}, ${unsigned_6}, ${unsigned_7}, ${unsigned_8}, ${unsigned_9})",
		"description":"CDOTAGamerules_AddEventMetadataLeaderboardEntry:\nEvent-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 )\nreturn bool",
		"prefix":"AddEventMetadataLeaderboardEntry"
	},
	"CDOTAGamerules_AddMinimapDebugPoint":
	{
		"body":"AddMinimapDebugPoint(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})",
		"description":"CDOTAGamerules_AddMinimapDebugPoint:\nAdd a point on the minimap.\nreturn void",
		"prefix":"AddMinimapDebugPoint"
	},
	"CDOTAGamerules_AddMinimapDebugPointForTeam":
	{
		"body":"AddMinimapDebugPointForTeam(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7}, ${int_8})",
		"description":"CDOTAGamerules_AddMinimapDebugPointForTeam:\nAdd a point on the minimap for a specific team.\nreturn void",
		"prefix":"AddMinimapDebugPointForTeam"
	},
	"CDOTAGamerules_BeginNightstalkerNight":
	{
		"body":"BeginNightstalkerNight(${float_1})",
		"description":"CDOTAGamerules_BeginNightstalkerNight:\nBegin night stalker night.\nreturn void",
		"prefix":"BeginNightstalkerNight"
	},
	"CDOTAGamerules_BeginTemporaryNight":
	{
		"body":"BeginTemporaryNight(${float_1})",
		"description":"CDOTAGamerules_BeginTemporaryNight:\nBegin temporary night.\nreturn void",
		"prefix":"BeginTemporaryNight"
	},
	"CDOTAGamerules_BotPopulate":
	{
		"body":"BotPopulate()",
		"description":"CDOTAGamerules_BotPopulate:\nFills all the teams with bots if cheat mode is enabled.\nreturn void",
		"prefix":"BotPopulate"
	},
	"CDOTAGamerules_Defeated":
	{
		"body":"Defeated()",
		"description":"CDOTAGamerules_Defeated:\nKills the ancient, etc.\nreturn void",
		"prefix":"Defeated"
	},
	"CDOTAGamerules_DidMatchSignoutTimeOut":
	{
		"body":"DidMatchSignoutTimeOut()",
		"description":"CDOTAGamerules_DidMatchSignoutTimeOut:\ntrue when we have waited some time after end of the game and not received signout\nreturn bool",
		"prefix":"DidMatchSignoutTimeOut"
	},
	"CDOTAGamerules_EnableCustomGameSetupAutoLaunch":
	{
		"body":"EnableCustomGameSetupAutoLaunch(${true})",
		"description":"CDOTAGamerules_EnableCustomGameSetupAutoLaunch:\nEnabled (true) or disable (false) auto launch for custom game setup.\nreturn void",
		"prefix":"EnableCustomGameSetupAutoLaunch"
	},
	"CDOTAGamerules_FinishCustomGameSetup":
	{
		"body":"FinishCustomGameSetup()",
		"description":"CDOTAGamerules_FinishCustomGameSetup:\nIndicate that the custom game setup phase is complete, and advance to the game.\nreturn void",
		"prefix":"FinishCustomGameSetup"
	},
	"CDOTAGamerules_GetCustomGameDifficulty":
	{
		"body":"GetCustomGameDifficulty()",
		"description":"CDOTAGamerules_GetCustomGameDifficulty:\nReturns the difficulty level of the custom game mode\nreturn int",
		"prefix":"GetCustomGameDifficulty"
	},
	"CDOTAGamerules_GetCustomGameTeamMaxPlayers":
	{
		"body":"GetCustomGameTeamMaxPlayers(${int_1})",
		"description":"CDOTAGamerules_GetCustomGameTeamMaxPlayers:\nGet whether a team is selectable during game setup\nreturn int",
		"prefix":"GetCustomGameTeamMaxPlayers"
	},
	"CDOTAGamerules_GetDOTATime":
	{
		"body":"GetDOTATime(${bIncludePregameTimebIncludeNegativeTime}, ${bool_2})",
		"description":"CDOTAGamerules_GetDOTATime:\n(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.\nreturn float",
		"prefix":"GetDOTATime"
	},
	"CDOTAGamerules_GetDifficulty":
	{
		"body":"GetDifficulty()",
		"description":"CDOTAGamerules_GetDifficulty:\nReturns difficulty level of the custom game mode\nreturn int",
		"prefix":"GetDifficulty"
	},
	"CDOTAGamerules_GetDroppedItem":
	{
		"body":"GetDroppedItem(${int_1})",
		"description":"CDOTAGamerules_GetDroppedItem:\nGets the Xth dropped item\nreturn handle",
		"prefix":"GetDroppedItem"
	},
	"CDOTAGamerules_GetGameFrameTime":
	{
		"body":"GetGameFrameTime()",
		"description":"CDOTAGamerules_GetGameFrameTime:\nReturns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused\nreturn float",
		"prefix":"GetGameFrameTime"
	},
	"CDOTAGamerules_GetGameModeEntity":
	{
		"body":"GetGameModeEntity()",
		"description":"CDOTAGamerules_GetGameModeEntity:\nGet the game mode entity\nreturn handle",
		"prefix":"GetGameModeEntity"
	},
	"CDOTAGamerules_GetGameSessionConfigValue":
	{
		"body":"GetGameSessionConfigValue(${mapoptions}, ${string_2})",
		"description":"CDOTAGamerules_GetGameSessionConfigValue:\nGet a string value from the game session config (map options)\nreturn string",
		"prefix":"GetGameSessionConfigValue"
	},
	"CDOTAGamerules_GetGameTime":
	{
		"body":"GetGameTime()",
		"description":"CDOTAGamerules_GetGameTime:\nReturns the number of seconds elapsed since map start. This time doesn't count up when the game is paused\nreturn float",
		"prefix":"GetGameTime"
	},
	"CDOTAGamerules_GetMatchID":
	{
		"body":"GetMatchID()",
		"description":"CDOTAGamerules_GetMatchID:\nGet the MatchID for this game.\nreturn uint64",
		"prefix":"GetMatchID"
	},
	"CDOTAGamerules_GetMatchSignoutComplete":
	{
		"body":"GetMatchSignoutComplete()",
		"description":"CDOTAGamerules_GetMatchSignoutComplete:\nHave we received the post match signout message that includes reward information\nreturn bool",
		"prefix":"GetMatchSignoutComplete"
	},
	"CDOTAGamerules_GetNianTotalDamageTaken":
	{
		"body":"GetNianTotalDamageTaken()",
		"description":"CDOTAGamerules_GetNianTotalDamageTaken:\nFor New Bloom, get total damage taken by the Nian / Year Beast\nreturn int",
		"prefix":"GetNianTotalDamageTaken"
	},
	"CDOTAGamerules_GetPlayerCustomGameAccountRecord":
	{
		"body":"GetPlayerCustomGameAccountRecord(${Preview/Unreleased})",
		"description":"CDOTAGamerules_GetPlayerCustomGameAccountRecord:\n(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session\nreturn table",
		"prefix":"GetPlayerCustomGameAccountRecord"
	},
	"CDOTAGamerules_GetStateTransitionTime":
	{
		"body":"GetStateTransitionTime()",
		"description":"CDOTAGamerules_GetStateTransitionTime:\nGet time remaining between state changes.\nreturn float",
		"prefix":"GetStateTransitionTime"
	},
	"CDOTAGamerules_GetTimeOfDay":
	{
		"body":"GetTimeOfDay()",
		"description":"CDOTAGamerules_GetTimeOfDay:\nGet the time of day\nreturn float",
		"prefix":"GetTimeOfDay"
	},
	"CDOTAGamerules_GetWeatherWindDirection":
	{
		"body":"GetWeatherWindDirection()",
		"description":"CDOTAGamerules_GetWeatherWindDirection:\nGet Weather Wind Direction Vector\nreturn Vector",
		"prefix":"GetWeatherWindDirection"
	},
	"CDOTAGamerules_IsCheatMode":
	{
		"body":"IsCheatMode()",
		"description":"CDOTAGamerules_IsCheatMode:\nAre cheats enabled on the server\nreturn bool",
		"prefix":"IsCheatMode"
	},
	"CDOTAGamerules_IsDaytime":
	{
		"body":"IsDaytime()",
		"description":"CDOTAGamerules_IsDaytime:\nIs it day time?\nreturn bool",
		"prefix":"IsDaytime"
	},
	"CDOTAGamerules_IsGamePaused":
	{
		"body":"IsGamePaused()",
		"description":"CDOTAGamerules_IsGamePaused:\nReturns whether the game is paused.\nreturn bool",
		"prefix":"IsGamePaused"
	},
	"CDOTAGamerules_IsHeroRespawnEnabled":
	{
		"body":"IsHeroRespawnEnabled()",
		"description":"CDOTAGamerules_IsHeroRespawnEnabled:\nReturns whether hero respawn is enabled.\nreturn bool",
		"prefix":"IsHeroRespawnEnabled"
	},
	"CDOTAGamerules_IsInBanPhase":
	{
		"body":"IsInBanPhase()",
		"description":"CDOTAGamerules_IsInBanPhase:\nAre we in the ban phase of hero pick?\nreturn bool",
		"prefix":"IsInBanPhase"
	},
	"CDOTAGamerules_IsNightstalkerNight":
	{
		"body":"IsNightstalkerNight()",
		"description":"CDOTAGamerules_IsNightstalkerNight:\nIs it night stalker night-time?\nreturn bool",
		"prefix":"IsNightstalkerNight"
	},
	"CDOTAGamerules_IsTemporaryNight":
	{
		"body":"IsTemporaryNight()",
		"description":"CDOTAGamerules_IsTemporaryNight:\nIs it temporarily night-time?\nreturn bool",
		"prefix":"IsTemporaryNight"
	},
	"CDOTAGamerules_LockCustomGameSetupTeamAssignment":
	{
		"body":"LockCustomGameSetupTeamAssignment(${true})",
		"description":"CDOTAGamerules_LockCustomGameSetupTeamAssignment:\nLock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.\nreturn void",
		"prefix":"LockCustomGameSetupTeamAssignment"
	},
	"CDOTAGamerules_MakeTeamLose":
	{
		"body":"MakeTeamLose(${int_1})",
		"description":"CDOTAGamerules_MakeTeamLose:\nMakes the specified team lose\nreturn void",
		"prefix":"MakeTeamLose"
	},
	"CDOTAGamerules_NumDroppedItems":
	{
		"body":"NumDroppedItems()",
		"description":"CDOTAGamerules_NumDroppedItems:\nReturns the number of items currently dropped on the ground\nreturn int",
		"prefix":"NumDroppedItems"
	},
	"CDOTAGamerules_PlayerHasCustomGameHostPrivileges":
	{
		"body":"PlayerHasCustomGameHostPrivileges(${shuffleteams})",
		"description":"CDOTAGamerules_PlayerHasCustomGameHostPrivileges:\nWhether a player has custom game host privileges (shuffle teams, etc.)\nreturn bool",
		"prefix":"PlayerHasCustomGameHostPrivileges"
	},
	"CDOTAGamerules_Playtesting_UpdateAddOnKeyValues":
	{
		"body":"Playtesting_UpdateAddOnKeyValues()",
		"description":"CDOTAGamerules_Playtesting_UpdateAddOnKeyValues:\nUpdates custom hero, unit and ability KeyValues in memory with the latest values from disk\nreturn void",
		"prefix":"Playtesting_UpdateAddOnKeyValues"
	},
	"CDOTAGamerules_ResetDefeated":
	{
		"body":"ResetDefeated()",
		"description":"CDOTAGamerules_ResetDefeated:\nRestart after killing the ancient, etc.\nreturn void",
		"prefix":"ResetDefeated"
	},
	"CDOTAGamerules_ResetToHeroSelection":
	{
		"body":"ResetToHeroSelection()",
		"description":"CDOTAGamerules_ResetToHeroSelection:\nRestart the game at hero selection\nreturn void",
		"prefix":"ResetToHeroSelection"
	},
	"CDOTAGamerules_SendCustomMessage":
	{
		"body":"SendCustomMessage(${string_1}, ${int_2}, ${int_3})",
		"description":"CDOTAGamerules_SendCustomMessage:\nSends a message on behalf of a player.\nreturn void",
		"prefix":"SendCustomMessage"
	},
	"CDOTAGamerules_SendCustomMessageToTeam":
	{
		"body":"SendCustomMessageToTeam(${string_1}, ${int_2}, ${int_3}, ${int_4})",
		"description":"CDOTAGamerules_SendCustomMessageToTeam:\nSends a message on behalf of a player to the specified team.\nreturn void",
		"prefix":"SendCustomMessageToTeam"
	},
	"CDOTAGamerules_SetCreepMinimapIconScale":
	{
		"body":"SetCreepMinimapIconScale(${flMinimapCreepIconScale})",
		"description":"CDOTAGamerules_SetCreepMinimapIconScale:\n(flMinimapCreepIconScale) - Scale the creep icons on the minimap.\nreturn void",
		"prefix":"SetCreepMinimapIconScale"
	},
	"CDOTAGamerules_SetCreepSpawningEnabled":
	{
		"body":"SetCreepSpawningEnabled(${bool_1})",
		"description":"CDOTAGamerules_SetCreepSpawningEnabled:\nSets whether the regular Dota creeps spawn.\nreturn void",
		"prefix":"SetCreepSpawningEnabled"
	},
	"CDOTAGamerules_SetCustomGameAccountRecordSaveFunction":
	{
		"body":"SetCustomGameAccountRecordSaveFunction(${Preview/Unreleased}, ${handle_2})",
		"description":"CDOTAGamerules_SetCustomGameAccountRecordSaveFunction:\n(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)\nreturn void",
		"prefix":"SetCustomGameAccountRecordSaveFunction"
	},
	"CDOTAGamerules_SetCustomGameAllowBattleMusic":
	{
		"body":"SetCustomGameAllowBattleMusic(${bool_1})",
		"description":"CDOTAGamerules_SetCustomGameAllowBattleMusic:\nSets a flag to enable/disable the default music handling code for custom games\nreturn void",
		"prefix":"SetCustomGameAllowBattleMusic"
	},
	"CDOTAGamerules_SetCustomGameAllowHeroPickMusic":
	{
		"body":"SetCustomGameAllowHeroPickMusic(${bool_1})",
		"description":"CDOTAGamerules_SetCustomGameAllowHeroPickMusic:\nSets a flag to enable/disable the default music handling code for custom games\nreturn void",
		"prefix":"SetCustomGameAllowHeroPickMusic"
	},
	"CDOTAGamerules_SetCustomGameAllowMusicAtGameStart":
	{
		"body":"SetCustomGameAllowMusicAtGameStart(${bool_1})",
		"description":"CDOTAGamerules_SetCustomGameAllowMusicAtGameStart:\nSets a flag to enable/disable the default music handling code for custom games\nreturn void",
		"prefix":"SetCustomGameAllowMusicAtGameStart"
	},
	"CDOTAGamerules_SetCustomGameDifficulty":
	{
		"body":"SetCustomGameDifficulty(${int_1})",
		"description":"CDOTAGamerules_SetCustomGameDifficulty:\nSet the difficulty level of the custom game mode\nreturn void",
		"prefix":"SetCustomGameDifficulty"
	},
	"CDOTAGamerules_SetCustomGameEndDelay":
	{
		"body":"SetCustomGameEndDelay(${float_1})",
		"description":"CDOTAGamerules_SetCustomGameEndDelay:\nSets the game end delay.\nreturn void",
		"prefix":"SetCustomGameEndDelay"
	},
	"CDOTAGamerules_SetCustomGameSetupAutoLaunchDelay":
	{
		"body":"SetCustomGameSetupAutoLaunchDelay(${float_1})",
		"description":"CDOTAGamerules_SetCustomGameSetupAutoLaunchDelay:\nSet the amount of time to wait for auto launch.\nreturn void",
		"prefix":"SetCustomGameSetupAutoLaunchDelay"
	},
	"CDOTAGamerules_SetCustomGameSetupRemainingTime":
	{
		"body":"SetCustomGameSetupRemainingTime(${float_1})",
		"description":"CDOTAGamerules_SetCustomGameSetupRemainingTime:\nSet the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever\nreturn void",
		"prefix":"SetCustomGameSetupRemainingTime"
	},
	"CDOTAGamerules_SetCustomGameSetupTimeout":
	{
		"body":"SetCustomGameSetupTimeout(${pre-gameplay})",
		"description":"CDOTAGamerules_SetCustomGameSetupTimeout:\nSetup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)\nreturn void",
		"prefix":"SetCustomGameSetupTimeout"
	},
	"CDOTAGamerules_SetCustomGameTeamMaxPlayers":
	{
		"body":"SetCustomGameTeamMaxPlayers(${int_1}, ${int_2})",
		"description":"CDOTAGamerules_SetCustomGameTeamMaxPlayers:\nSet whether a team is selectable during game setup\nreturn void",
		"prefix":"SetCustomGameTeamMaxPlayers"
	},
	"CDOTAGamerules_SetCustomVictoryMessage":
	{
		"body":"SetCustomVictoryMessage(${string_1})",
		"description":"CDOTAGamerules_SetCustomVictoryMessage:\nSets the victory message.\nreturn void",
		"prefix":"SetCustomVictoryMessage"
	},
	"CDOTAGamerules_SetCustomVictoryMessageDuration":
	{
		"body":"SetCustomVictoryMessageDuration(${float_1})",
		"description":"CDOTAGamerules_SetCustomVictoryMessageDuration:\nSets the victory message duration.\nreturn void",
		"prefix":"SetCustomVictoryMessageDuration"
	},
	"CDOTAGamerules_SetEventMetadataCustomTable":
	{
		"body":"SetEventMetadataCustomTable(${tablehMetadataTable})",
		"description":"CDOTAGamerules_SetEventMetadataCustomTable:\nEvent-only ( table hMetadataTable )\nreturn bool",
		"prefix":"SetEventMetadataCustomTable"
	},
	"CDOTAGamerules_SetEventSignoutCustomTable":
	{
		"body":"SetEventSignoutCustomTable(${tablehMetadataTable})",
		"description":"CDOTAGamerules_SetEventSignoutCustomTable:\nEvent-only ( table hMetadataTable )\nreturn bool",
		"prefix":"SetEventSignoutCustomTable"
	},
	"CDOTAGamerules_SetFirstBloodActive":
	{
		"body":"SetFirstBloodActive(${bool_1})",
		"description":"CDOTAGamerules_SetFirstBloodActive:\nSets whether First Blood has been triggered.\nreturn void",
		"prefix":"SetFirstBloodActive"
	},
	"CDOTAGamerules_SetGameWinner":
	{
		"body":"SetGameWinner(${int_1})",
		"description":"CDOTAGamerules_SetGameWinner:\nMakes the specified team win\nreturn void",
		"prefix":"SetGameWinner"
	},
	"CDOTAGamerules_SetGoldPerTick":
	{
		"body":"SetGoldPerTick(${int_1})",
		"description":"CDOTAGamerules_SetGoldPerTick:\nSet the auto gold increase per timed interval.\nreturn void",
		"prefix":"SetGoldPerTick"
	},
	"CDOTAGamerules_SetGoldTickTime":
	{
		"body":"SetGoldTickTime(${float_1})",
		"description":"CDOTAGamerules_SetGoldTickTime:\nSet the time interval between auto gold increases.\nreturn void",
		"prefix":"SetGoldTickTime"
	},
	"CDOTAGamerules_SetHeroMinimapIconScale":
	{
		"body":"SetHeroMinimapIconScale(${flMinimapHeroIconScale})",
		"description":"CDOTAGamerules_SetHeroMinimapIconScale:\n(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.\nreturn void",
		"prefix":"SetHeroMinimapIconScale"
	},
	"CDOTAGamerules_SetHeroRespawnEnabled":
	{
		"body":"SetHeroRespawnEnabled(${bool_1})",
		"description":"CDOTAGamerules_SetHeroRespawnEnabled:\nControl if the normal DOTA hero respawn rules apply.\nreturn void",
		"prefix":"SetHeroRespawnEnabled"
	},
	"CDOTAGamerules_SetHeroSelectPenaltyTime":
	{
		"body":"SetHeroSelectPenaltyTime(${float_1})",
		"description":"CDOTAGamerules_SetHeroSelectPenaltyTime:\nSets amount of penalty time before randoming a hero\nreturn void",
		"prefix":"SetHeroSelectPenaltyTime"
	},
	"CDOTAGamerules_SetHeroSelectionTime":
	{
		"body":"SetHeroSelectionTime(${float_1})",
		"description":"CDOTAGamerules_SetHeroSelectionTime:\nSets the amount of time players have to pick their hero.\nreturn void",
		"prefix":"SetHeroSelectionTime"
	},
	"CDOTAGamerules_SetHideKillMessageHeaders":
	{
		"body":"SetHideKillMessageHeaders(${bool_1})",
		"description":"CDOTAGamerules_SetHideKillMessageHeaders:\nSets whether the multikill, streak, and first-blood banners appear at the top of the screen.\nreturn void",
		"prefix":"SetHideKillMessageHeaders"
	},
	"CDOTAGamerules_SetOverlayHealthBarUnit":
	{
		"body":"SetOverlayHealthBarUnit(${handle_1}, ${int_2})",
		"description":"CDOTAGamerules_SetOverlayHealthBarUnit:\nShow this unit's health on the overlay health bar\nreturn void",
		"prefix":"SetOverlayHealthBarUnit"
	},
	"CDOTAGamerules_SetPostGameTime":
	{
		"body":"SetPostGameTime(${float_1})",
		"description":"CDOTAGamerules_SetPostGameTime:\nSets the amount of time players have between the game ending and the server disconnecting them.\nreturn void",
		"prefix":"SetPostGameTime"
	},
	"CDOTAGamerules_SetPreGameTime":
	{
		"body":"SetPreGameTime(${float_1})",
		"description":"CDOTAGamerules_SetPreGameTime:\nSets the amount of time players have between picking their hero and game start.\nreturn void",
		"prefix":"SetPreGameTime"
	},
	"CDOTAGamerules_SetRuneMinimapIconScale":
	{
		"body":"SetRuneMinimapIconScale(${flMinimapRuneIconScale})",
		"description":"CDOTAGamerules_SetRuneMinimapIconScale:\n(flMinimapRuneIconScale) - Scale the rune icons on the minimap.\nreturn void",
		"prefix":"SetRuneMinimapIconScale"
	},
	"CDOTAGamerules_SetRuneSpawnTime":
	{
		"body":"SetRuneSpawnTime(${float_1})",
		"description":"CDOTAGamerules_SetRuneSpawnTime:\nSets the amount of time between rune spawns.\nreturn void",
		"prefix":"SetRuneSpawnTime"
	},
	"CDOTAGamerules_SetSafeToLeave":
	{
		"body":"SetSafeToLeave(${bSafeToLeave})",
		"description":"CDOTAGamerules_SetSafeToLeave:\n(bSafeToLeave) - Mark this game as safe to leave.\nreturn void",
		"prefix":"SetSafeToLeave"
	},
	"CDOTAGamerules_SetSameHeroSelectionEnabled":
	{
		"body":"SetSameHeroSelectionEnabled(${bool_1})",
		"description":"CDOTAGamerules_SetSameHeroSelectionEnabled:\nWhen true, players can repeatedly pick the same hero.\nreturn void",
		"prefix":"SetSameHeroSelectionEnabled"
	},
	"CDOTAGamerules_SetShowcaseTime":
	{
		"body":"SetShowcaseTime(${float_1})",
		"description":"CDOTAGamerules_SetShowcaseTime:\nSets the amount of time players have between the strategy phase and entering the pre-game phase.\nreturn void",
		"prefix":"SetShowcaseTime"
	},
	"CDOTAGamerules_SetStartingGold":
	{
		"body":"SetStartingGold(${int_1})",
		"description":"CDOTAGamerules_SetStartingGold:\nSet the starting gold amount.\nreturn void",
		"prefix":"SetStartingGold"
	},
	"CDOTAGamerules_SetStrategyTime":
	{
		"body":"SetStrategyTime(${float_1})",
		"description":"CDOTAGamerules_SetStrategyTime:\nSets the amount of time players have between the hero selection and entering the showcase phase.\nreturn void",
		"prefix":"SetStrategyTime"
	},
	"CDOTAGamerules_SetTimeOfDay":
	{
		"body":"SetTimeOfDay(${float_1})",
		"description":"CDOTAGamerules_SetTimeOfDay:\nSet the time of day.\nreturn void",
		"prefix":"SetTimeOfDay"
	},
	"CDOTAGamerules_SetTreeRegrowTime":
	{
		"body":"SetTreeRegrowTime(${float_1})",
		"description":"CDOTAGamerules_SetTreeRegrowTime:\nSets the tree regrow time in seconds.\nreturn void",
		"prefix":"SetTreeRegrowTime"
	},
	"CDOTAGamerules_SetUseBaseGoldBountyOnHeroes":
	{
		"body":"SetUseBaseGoldBountyOnHeroes(${bool_1})",
		"description":"CDOTAGamerules_SetUseBaseGoldBountyOnHeroes:\nHeroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.\nreturn void",
		"prefix":"SetUseBaseGoldBountyOnHeroes"
	},
	"CDOTAGamerules_SetUseCustomHeroXPValues":
	{
		"body":"SetUseCustomHeroXPValues(${thisvaluemustbeset})",
		"description":"CDOTAGamerules_SetUseCustomHeroXPValues:\nAllows heroes in the map to give a specific amount of XP (this value must be set).\nreturn void",
		"prefix":"SetUseCustomHeroXPValues"
	},
	"CDOTAGamerules_SetUseUniversalShopMode":
	{
		"body":"SetUseUniversalShopMode(${bool_1})",
		"description":"CDOTAGamerules_SetUseUniversalShopMode:\nWhen true, all items are available at as long as any shop is in range.\nreturn void",
		"prefix":"SetUseUniversalShopMode"
	},
	"CDOTAGamerules_SetWeatherWindDirection":
	{
		"body":"SetWeatherWindDirection(${Vector_1})",
		"description":"CDOTAGamerules_SetWeatherWindDirection:\nSet Weather Wind Direction Vector\nreturn void",
		"prefix":"SetWeatherWindDirection"
	},
	"CDOTAGamerules_State_Get":
	{
		"body":"State_Get()",
		"description":"CDOTAGamerules_State_Get:\nGet the current Gamerules state\nreturn int",
		"prefix":"State_Get"
	},
	"CDOTAPlayer_GetAssignedHero":
	{
		"body":"GetAssignedHero()",
		"description":"CDOTAPlayer_GetAssignedHero:\nGet the player's hero.\nreturn handle",
		"prefix":"GetAssignedHero"
	},
	"CDOTAPlayer_GetPlayerID":
	{
		"body":"GetPlayerID()",
		"description":"CDOTAPlayer_GetPlayerID:\nGet the player's official PlayerID; notably is -1 when the player isn't yet on a team.\nreturn int",
		"prefix":"GetPlayerID"
	},
	"CDOTAPlayer_MakeRandomHeroSelection":
	{
		"body":"MakeRandomHeroSelection()",
		"description":"CDOTAPlayer_MakeRandomHeroSelection:\nRandoms this player's hero.\nreturn void",
		"prefix":"MakeRandomHeroSelection"
	},
	"CDOTAPlayer_SetKillCamUnit":
	{
		"body":"SetKillCamUnit(${hEntity})",
		"description":"CDOTAPlayer_SetKillCamUnit:\nSet the kill cam unit for this hero.\nreturn void",
		"prefix":"SetKillCamUnit"
	},
	"CDOTAPlayer_SetMusicStatus":
	{
		"body":"SetMusicStatus(${nMusicStatus}, ${flIntensity})",
		"description":"CDOTAPlayer_SetMusicStatus:\n(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off.\nreturn void",
		"prefix":"SetMusicStatus"
	},
	"CDOTAPlayer_SetSelectedHero":
	{
		"body":"SetSelectedHero(${pszHeroName})",
		"description":"CDOTAPlayer_SetSelectedHero:\nSets this player's hero selection.\nreturn void",
		"prefix":"SetSelectedHero"
	},
	"CDOTATutorial_AddBot":
	{
		"body":"AddBot(${string_1}, ${string_2}, ${string_3}, ${bool_4})",
		"description":"CDOTATutorial_AddBot:\nAdd a computer controlled bot.\nreturn bool",
		"prefix":"AddBot"
	},
	"CDOTATutorial_AddQuest":
	{
		"body":"AddQuest(${string_1}, ${int_2}, ${string_3}, ${string_4})",
		"description":"CDOTATutorial_AddQuest:\nAdd a quest to the quest log\nreturn void",
		"prefix":"AddQuest"
	},
	"CDOTATutorial_AddShopWhitelistItem":
	{
		"body":"AddShopWhitelistItem(${string_1})",
		"description":"CDOTATutorial_AddShopWhitelistItem:\nAdd an item to the shop whitelist.\nreturn void",
		"prefix":"AddShopWhitelistItem"
	},
	"CDOTATutorial_CompleteQuest":
	{
		"body":"CompleteQuest(${string_1})",
		"description":"CDOTATutorial_CompleteQuest:\nComplete a quest,\nreturn void",
		"prefix":"CompleteQuest"
	},
	"CDOTATutorial_CreateLocationTask":
	{
		"body":"CreateLocationTask(${Vector_1})",
		"description":"CDOTATutorial_CreateLocationTask:\nAdd a task to move to a specific location\nreturn void",
		"prefix":"CreateLocationTask"
	},
	"CDOTATutorial_EnableCreepAggroViz":
	{
		"body":"EnableCreepAggroViz(${bool_1})",
		"description":"CDOTATutorial_EnableCreepAggroViz:\nAlert the player when a creep becomes agro to their hero.\nreturn void",
		"prefix":"EnableCreepAggroViz"
	},
	"CDOTATutorial_EnablePlayerOffscreenTip":
	{
		"body":"EnablePlayerOffscreenTip(${bool_1})",
		"description":"CDOTATutorial_EnablePlayerOffscreenTip:\nEnable the tip to alert players how to find their hero.\nreturn void",
		"prefix":"EnablePlayerOffscreenTip"
	},
	"CDOTATutorial_EnableTowerAggroViz":
	{
		"body":"EnableTowerAggroViz(${bool_1})",
		"description":"CDOTATutorial_EnableTowerAggroViz:\nAlert the player when a tower becomes agro to their hero.\nreturn void",
		"prefix":"EnableTowerAggroViz"
	},
	"CDOTATutorial_FinishTutorial":
	{
		"body":"FinishTutorial()",
		"description":"CDOTATutorial_FinishTutorial:\nEnd the tutorial.\nreturn void",
		"prefix":"FinishTutorial"
	},
	"CDOTATutorial_ForceGameStart":
	{
		"body":"ForceGameStart()",
		"description":"CDOTATutorial_ForceGameStart:\nForce the start of the game.\nreturn void",
		"prefix":"ForceGameStart"
	},
	"CDOTATutorial_GetTimeFrozen":
	{
		"body":"GetTimeFrozen()",
		"description":"CDOTATutorial_GetTimeFrozen:\nIs our time frozen?\nreturn bool",
		"prefix":"GetTimeFrozen"
	},
	"CDOTATutorial_IsItemInWhiteList":
	{
		"body":"IsItemInWhiteList(${string_1})",
		"description":"CDOTATutorial_IsItemInWhiteList:\nIs this item currently in the white list.\nreturn bool",
		"prefix":"IsItemInWhiteList"
	},
	"CDOTATutorial_RemoveShopWhitelistItem":
	{
		"body":"RemoveShopWhitelistItem(${string_1})",
		"description":"CDOTATutorial_RemoveShopWhitelistItem:\nRemove an item from the shop whitelist.\nreturn void",
		"prefix":"RemoveShopWhitelistItem"
	},
	"CDOTATutorial_SelectHero":
	{
		"body":"SelectHero(${string_1})",
		"description":"CDOTATutorial_SelectHero:\nSelect a hero for the local player\nreturn void",
		"prefix":"SelectHero"
	},
	"CDOTATutorial_SelectPlayerTeam":
	{
		"body":"SelectPlayerTeam(${string_1})",
		"description":"CDOTATutorial_SelectPlayerTeam:\nSelect the team for the local player\nreturn void",
		"prefix":"SelectPlayerTeam"
	},
	"CDOTATutorial_SetItemGuide":
	{
		"body":"SetItemGuide(${string_1})",
		"description":"CDOTATutorial_SetItemGuide:\nSet the current item guide.\nreturn void",
		"prefix":"SetItemGuide"
	},
	"CDOTATutorial_SetOrModifyPlayerGold":
	{
		"body":"SetOrModifyPlayerGold(${int}, ${bool_2})",
		"description":"CDOTATutorial_SetOrModifyPlayerGold:\nSet gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify\nreturn void",
		"prefix":"SetOrModifyPlayerGold"
	},
	"CDOTATutorial_SetQuickBuy":
	{
		"body":"SetQuickBuy(${string_1})",
		"description":"CDOTATutorial_SetQuickBuy:\nSet players quick buy item.\nreturn void",
		"prefix":"SetQuickBuy"
	},
	"CDOTATutorial_SetShopOpen":
	{
		"body":"SetShopOpen(${bool_1})",
		"description":"CDOTATutorial_SetShopOpen:\nSet the shop open or closed.\nreturn void",
		"prefix":"SetShopOpen"
	},
	"CDOTATutorial_SetTimeFrozen":
	{
		"body":"SetTimeFrozen(${bool_1})",
		"description":"CDOTATutorial_SetTimeFrozen:\nSet if we should freeze time or not.\nreturn void",
		"prefix":"SetTimeFrozen"
	},
	"CDOTATutorial_SetTutorialConvar":
	{
		"body":"SetTutorialConvar(${string_1}, ${string_2})",
		"description":"CDOTATutorial_SetTutorialConvar:\nSet a tutorial convar\nreturn void",
		"prefix":"SetTutorialConvar"
	},
	"CDOTATutorial_SetTutorialUI":
	{
		"body":"SetTutorialUI(${int_1})",
		"description":"CDOTATutorial_SetTutorialUI:\nSet the UI to use a reduced version to focus attention to specific elements.\nreturn void",
		"prefix":"SetTutorialUI"
	},
	"CDOTATutorial_SetWhiteListEnabled":
	{
		"body":"SetWhiteListEnabled(${bool_1})",
		"description":"CDOTATutorial_SetWhiteListEnabled:\nSet if we should whitelist shop items.\nreturn void",
		"prefix":"SetWhiteListEnabled"
	},
	"CDOTATutorial_StartTutorialMode":
	{
		"body":"StartTutorialMode()",
		"description":"CDOTATutorial_StartTutorialMode:\nInitialize Tutorial Mode\nreturn void",
		"prefix":"StartTutorialMode"
	},
	"CDOTATutorial_UpgradePlayerAbility":
	{
		"body":"UpgradePlayerAbility(${string_1})",
		"description":"CDOTATutorial_UpgradePlayerAbility:\nUpgrade a specific ability for the local hero\nreturn void",
		"prefix":"UpgradePlayerAbility"
	},
	"CDOTAVoteSystem_StartVote":
	{
		"body":"StartVote(${handle_1})",
		"description":"CDOTAVoteSystem_StartVote:\nStarts a vote, based upon a table of parameters\nreturn void",
		"prefix":"StartVote"
	},
	"CDOTA_Ability_Animation_Attack_SetPlaybackRate":
	{
		"body":"SetPlaybackRate(${flRate})",
		"description":"CDOTA_Ability_Animation_Attack_SetPlaybackRate:\nOverride playbackrate\nreturn void",
		"prefix":"SetPlaybackRate"
	},
	"CDOTA_Ability_Animation_TailSpin_SetPlaybackRate":
	{
		"body":"SetPlaybackRate(${flRate})",
		"description":"CDOTA_Ability_Animation_TailSpin_SetPlaybackRate:\nOverride playbackrate\nreturn void",
		"prefix":"SetPlaybackRate"
	},
	"CDOTA_Ability_DataDriven_ApplyDataDrivenModifier":
	{
		"body":"ApplyDataDrivenModifier(${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable})",
		"description":"CDOTA_Ability_DataDriven_ApplyDataDrivenModifier:\nApplies a data driven modifier to the target\nreturn handle",
		"prefix":"ApplyDataDrivenModifier"
	},
	"CDOTA_Ability_DataDriven_ApplyDataDrivenThinker":
	{
		"body":"ApplyDataDrivenThinker(${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable})",
		"description":"CDOTA_Ability_DataDriven_ApplyDataDrivenThinker:\nApplies a data driven thinker at the location\nreturn handle",
		"prefix":"ApplyDataDrivenThinker"
	},
	"CDOTA_Ability_Lua_CastFilterResult":
	{
		"body":"CastFilterResult()",
		"description":"CDOTA_Ability_Lua_CastFilterResult:\nDetermine whether an issued command with no target is valid.\nreturn int",
		"prefix":"CastFilterResult"
	},
	"CDOTA_Ability_Lua_CastFilterResultLocation":
	{
		"body":"CastFilterResultLocation(${vLocation})",
		"description":"CDOTA_Ability_Lua_CastFilterResultLocation:\n(Vector vLocation) Determine whether an issued command on a location is valid.\nreturn int",
		"prefix":"CastFilterResultLocation"
	},
	"CDOTA_Ability_Lua_CastFilterResultTarget":
	{
		"body":"CastFilterResultTarget(${hTarget})",
		"description":"CDOTA_Ability_Lua_CastFilterResultTarget:\n(HSCRIPT hTarget) Determine whether an issued command on a target is valid.\nreturn int",
		"prefix":"CastFilterResultTarget"
	},
	"CDOTA_Ability_Lua_GetAOERadius":
	{
		"body":"GetAOERadius()",
		"description":"CDOTA_Ability_Lua_GetAOERadius:\nControls the size of the AOE casting cursor.\nreturn float",
		"prefix":"GetAOERadius"
	},
	"CDOTA_Ability_Lua_GetAssociatedPrimaryAbilities":
	{
		"body":"GetAssociatedPrimaryAbilities()",
		"description":"CDOTA_Ability_Lua_GetAssociatedPrimaryAbilities:\nReturns abilities that are stolen simultaneously, or otherwise related in functionality.\nreturn string",
		"prefix":"GetAssociatedPrimaryAbilities"
	},
	"CDOTA_Ability_Lua_GetAssociatedSecondaryAbilities":
	{
		"body":"GetAssociatedSecondaryAbilities()",
		"description":"CDOTA_Ability_Lua_GetAssociatedSecondaryAbilities:\nReturns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.\nreturn string",
		"prefix":"GetAssociatedSecondaryAbilities"
	},
	"CDOTA_Ability_Lua_GetBehavior":
	{
		"body":"GetBehavior()",
		"description":"CDOTA_Ability_Lua_GetBehavior:\nReturn cast behavior type of this ability.\nreturn int",
		"prefix":"GetBehavior"
	},
	"CDOTA_Ability_Lua_GetCastAnimation":
	{
		"body":"GetCastAnimation()",
		"description":"CDOTA_Ability_Lua_GetCastAnimation:\nReturn casting animation of this ability.\nreturn int",
		"prefix":"GetCastAnimation"
	},
	"CDOTA_Ability_Lua_GetCastPoint":
	{
		"body":"GetCastPoint()",
		"description":"CDOTA_Ability_Lua_GetCastPoint:\nReturn cast point of this ability.\nreturn float",
		"prefix":"GetCastPoint"
	},
	"CDOTA_Ability_Lua_GetCastRange":
	{
		"body":"GetCastRange(${vLocation}, ${hTarget})",
		"description":"CDOTA_Ability_Lua_GetCastRange:\nReturn cast range of this ability.\nreturn int",
		"prefix":"GetCastRange"
	},
	"CDOTA_Ability_Lua_GetChannelAnimation":
	{
		"body":"GetChannelAnimation()",
		"description":"CDOTA_Ability_Lua_GetChannelAnimation:\nReturn channel animation of this ability.\nreturn int",
		"prefix":"GetChannelAnimation"
	},
	"CDOTA_Ability_Lua_GetChannelTime":
	{
		"body":"GetChannelTime()",
		"description":"CDOTA_Ability_Lua_GetChannelTime:\nReturn the channel time of this ability.\nreturn float",
		"prefix":"GetChannelTime"
	},
	"CDOTA_Ability_Lua_GetChannelledManaCostPerSecond":
	{
		"body":"GetChannelledManaCostPerSecond(${iLevel})",
		"description":"CDOTA_Ability_Lua_GetChannelledManaCostPerSecond:\nReturn mana cost at the given level per second while channeling (-1 is current).\nreturn int",
		"prefix":"GetChannelledManaCostPerSecond"
	},
	"CDOTA_Ability_Lua_GetConceptRecipientType":
	{
		"body":"GetConceptRecipientType()",
		"description":"CDOTA_Ability_Lua_GetConceptRecipientType:\nReturn who hears speech when this spell is cast.\nreturn int",
		"prefix":"GetConceptRecipientType"
	},
	"CDOTA_Ability_Lua_GetCooldown":
	{
		"body":"GetCooldown(${iLevel})",
		"description":"CDOTA_Ability_Lua_GetCooldown:\nReturn cooldown of this ability.\nreturn float",
		"prefix":"GetCooldown"
	},
	"CDOTA_Ability_Lua_GetCustomCastError":
	{
		"body":"GetCustomCastError()",
		"description":"CDOTA_Ability_Lua_GetCustomCastError:\nReturn the error string of a failed command with no target.\nreturn string",
		"prefix":"GetCustomCastError"
	},
	"CDOTA_Ability_Lua_GetCustomCastErrorLocation":
	{
		"body":"GetCustomCastErrorLocation(${vLocation})",
		"description":"CDOTA_Ability_Lua_GetCustomCastErrorLocation:\n(Vector vLocation) Return the error string of a failed command on a location.\nreturn string",
		"prefix":"GetCustomCastErrorLocation"
	},
	"CDOTA_Ability_Lua_GetCustomCastErrorTarget":
	{
		"body":"GetCustomCastErrorTarget(${hTarget})",
		"description":"CDOTA_Ability_Lua_GetCustomCastErrorTarget:\n(HSCRIPT hTarget) Return the error string of a failed command on a target.\nreturn string",
		"prefix":"GetCustomCastErrorTarget"
	},
	"CDOTA_Ability_Lua_GetGoldCost":
	{
		"body":"GetGoldCost(${iLevel})",
		"description":"CDOTA_Ability_Lua_GetGoldCost:\nReturn gold cost at the given level (-1 is current).\nreturn int",
		"prefix":"GetGoldCost"
	},
	"CDOTA_Ability_Lua_GetIntrinsicModifierName":
	{
		"body":"GetIntrinsicModifierName()",
		"description":"CDOTA_Ability_Lua_GetIntrinsicModifierName:\nReturns the name of the modifier applied passively by this ability.\nreturn string",
		"prefix":"GetIntrinsicModifierName"
	},
	"CDOTA_Ability_Lua_GetManaCost":
	{
		"body":"GetManaCost(${iLevel})",
		"description":"CDOTA_Ability_Lua_GetManaCost:\nReturn mana cost at the given level (-1 is current).\nreturn int",
		"prefix":"GetManaCost"
	},
	"CDOTA_Ability_Lua_GetPlaybackRateOverride":
	{
		"body":"GetPlaybackRateOverride()",
		"description":"CDOTA_Ability_Lua_GetPlaybackRateOverride:\nReturn the animation rate of the cast animation.\nreturn float",
		"prefix":"GetPlaybackRateOverride"
	},
	"CDOTA_Ability_Lua_IsHiddenAbilityCastable":
	{
		"body":"IsHiddenAbilityCastable()",
		"description":"CDOTA_Ability_Lua_IsHiddenAbilityCastable:\nReturns true if this ability can be used when not on the action panel.\nreturn bool",
		"prefix":"IsHiddenAbilityCastable"
	},
	"CDOTA_Ability_Lua_IsHiddenWhenStolen":
	{
		"body":"IsHiddenWhenStolen()",
		"description":"CDOTA_Ability_Lua_IsHiddenWhenStolen:\nReturns true if this ability is hidden when stolen by Spell Steal.\nreturn bool",
		"prefix":"IsHiddenWhenStolen"
	},
	"CDOTA_Ability_Lua_IsRefreshable":
	{
		"body":"IsRefreshable()",
		"description":"CDOTA_Ability_Lua_IsRefreshable:\nReturns true if this ability is refreshed by Refresher Orb.\nreturn bool",
		"prefix":"IsRefreshable"
	},
	"CDOTA_Ability_Lua_IsStealable":
	{
		"body":"IsStealable()",
		"description":"CDOTA_Ability_Lua_IsStealable:\nReturns true if this ability can be stolen by Spell Steal.\nreturn bool",
		"prefix":"IsStealable"
	},
	"CDOTA_Ability_Lua_OnAbilityPhaseInterrupted":
	{
		"body":"OnAbilityPhaseInterrupted()",
		"description":"CDOTA_Ability_Lua_OnAbilityPhaseInterrupted:\nCast time did not complete successfully.\nreturn void",
		"prefix":"OnAbilityPhaseInterrupted"
	},
	"CDOTA_Ability_Lua_OnAbilityPhaseStart":
	{
		"body":"OnAbilityPhaseStart()",
		"description":"CDOTA_Ability_Lua_OnAbilityPhaseStart:\nCast time begins (return true for successful cast).\nreturn bool",
		"prefix":"OnAbilityPhaseStart"
	},
	"CDOTA_Ability_Lua_OnChannelFinish":
	{
		"body":"OnChannelFinish(${bInterrupted})",
		"description":"CDOTA_Ability_Lua_OnChannelFinish:\n(bool bInterrupted) Channel finished.\nreturn void",
		"prefix":"OnChannelFinish"
	},
	"CDOTA_Ability_Lua_OnChannelThink":
	{
		"body":"OnChannelThink(${flInterval})",
		"description":"CDOTA_Ability_Lua_OnChannelThink:\n(float flInterval) Channeling is taking place.\nreturn void",
		"prefix":"OnChannelThink"
	},
	"CDOTA_Ability_Lua_OnHeroCalculateStatBonus":
	{
		"body":"OnHeroCalculateStatBonus()",
		"description":"CDOTA_Ability_Lua_OnHeroCalculateStatBonus:\nCaster (hero only) gained a level, skilled an ability, or received a new stat bonus.\nreturn void",
		"prefix":"OnHeroCalculateStatBonus"
	},
	"CDOTA_Ability_Lua_OnHeroDiedNearby":
	{
		"body":"OnHeroDiedNearby(${unit}, ${attacker}, ${table})",
		"description":"CDOTA_Ability_Lua_OnHeroDiedNearby:\nA hero has died in the vicinity (ie Urn), takes table of params.\nreturn void",
		"prefix":"OnHeroDiedNearby"
	},
	"CDOTA_Ability_Lua_OnHeroLevelUp":
	{
		"body":"OnHeroLevelUp()",
		"description":"CDOTA_Ability_Lua_OnHeroLevelUp:\nCaster gained a level.\nreturn void",
		"prefix":"OnHeroLevelUp"
	},
	"CDOTA_Ability_Lua_OnInventoryContentsChanged":
	{
		"body":"OnInventoryContentsChanged()",
		"description":"CDOTA_Ability_Lua_OnInventoryContentsChanged:\nCaster inventory changed.\nreturn void",
		"prefix":"OnInventoryContentsChanged"
	},
	"CDOTA_Ability_Lua_OnItemEquipped":
	{
		"body":"OnItemEquipped(${hItem})",
		"description":"CDOTA_Ability_Lua_OnItemEquipped:\n( HSCRIPT hItem ) Caster equipped item.\nreturn void",
		"prefix":"OnItemEquipped"
	},
	"CDOTA_Ability_Lua_OnOwnerDied":
	{
		"body":"OnOwnerDied()",
		"description":"CDOTA_Ability_Lua_OnOwnerDied:\nCaster died.\nreturn void",
		"prefix":"OnOwnerDied"
	},
	"CDOTA_Ability_Lua_OnOwnerSpawned":
	{
		"body":"OnOwnerSpawned()",
		"description":"CDOTA_Ability_Lua_OnOwnerSpawned:\nCaster respawned or spawned for the first time.\nreturn void",
		"prefix":"OnOwnerSpawned"
	},
	"CDOTA_Ability_Lua_OnProjectileHit":
	{
		"body":"OnProjectileHit(${hTarget}, ${vLocation})",
		"description":"CDOTA_Ability_Lua_OnProjectileHit:\n(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).\nreturn bool",
		"prefix":"OnProjectileHit"
	},
	"CDOTA_Ability_Lua_OnProjectileHitHandle":
	{
		"body":"OnProjectileHitHandle(${hTarget}, ${vLocation}, ${iProjectileHandle})",
		"description":"CDOTA_Ability_Lua_OnProjectileHitHandle:\n(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).\nreturn bool",
		"prefix":"OnProjectileHitHandle"
	},
	"CDOTA_Ability_Lua_OnProjectileHit_ExtraData":
	{
		"body":"OnProjectileHit_ExtraData(${hTarget}, ${vLocation}, ${table})",
		"description":"CDOTA_Ability_Lua_OnProjectileHit_ExtraData:\n(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid).\nreturn bool",
		"prefix":"OnProjectileHit_ExtraData"
	},
	"CDOTA_Ability_Lua_OnProjectileThink":
	{
		"body":"OnProjectileThink(${vLocation})",
		"description":"CDOTA_Ability_Lua_OnProjectileThink:\n(Vector vLocation) Projectile is actively moving.\nreturn void",
		"prefix":"OnProjectileThink"
	},
	"CDOTA_Ability_Lua_OnProjectileThinkHandle":
	{
		"body":"OnProjectileThinkHandle(${iProjectileHandle})",
		"description":"CDOTA_Ability_Lua_OnProjectileThinkHandle:\n(int nProjectileHandle) Projectile is actively moving.\nreturn void",
		"prefix":"OnProjectileThinkHandle"
	},
	"CDOTA_Ability_Lua_OnProjectileThink_ExtraData":
	{
		"body":"OnProjectileThink_ExtraData(${vLocation}, ${table})",
		"description":"CDOTA_Ability_Lua_OnProjectileThink_ExtraData:\n(Vector vLocation, table kv ) Projectile is actively moving.\nreturn void",
		"prefix":"OnProjectileThink_ExtraData"
	},
	"CDOTA_Ability_Lua_OnSpellStart":
	{
		"body":"OnSpellStart()",
		"description":"CDOTA_Ability_Lua_OnSpellStart:\nCast time finished, spell effects begin.\nreturn void",
		"prefix":"OnSpellStart"
	},
	"CDOTA_Ability_Lua_OnStolen":
	{
		"body":"OnStolen(${hSourceAbility})",
		"description":"CDOTA_Ability_Lua_OnStolen:\n( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.\nreturn void",
		"prefix":"OnStolen"
	},
	"CDOTA_Ability_Lua_OnToggle":
	{
		"body":"OnToggle()",
		"description":"CDOTA_Ability_Lua_OnToggle:\nAbility is toggled on/off.\nreturn void",
		"prefix":"OnToggle"
	},
	"CDOTA_Ability_Lua_OnUnStolen":
	{
		"body":"OnUnStolen()",
		"description":"CDOTA_Ability_Lua_OnUnStolen:\nSpecial behavior when lost by Spell Steal.\nreturn void",
		"prefix":"OnUnStolen"
	},
	"CDOTA_Ability_Lua_OnUpgrade":
	{
		"body":"OnUpgrade()",
		"description":"CDOTA_Ability_Lua_OnUpgrade:\nAbility gained a level.\nreturn void",
		"prefix":"OnUpgrade"
	},
	"CDOTA_Ability_Lua_ProcsMagicStick":
	{
		"body":"ProcsMagicStick()",
		"description":"CDOTA_Ability_Lua_ProcsMagicStick:\nReturns true if this ability will generate magic stick charges for nearby enemies.\nreturn bool",
		"prefix":"ProcsMagicStick"
	},
	"CDOTA_Ability_Lua_SpeakTrigger":
	{
		"body":"SpeakTrigger()",
		"description":"CDOTA_Ability_Lua_SpeakTrigger:\nReturn the type of speech used.\nreturn int",
		"prefix":"SpeakTrigger"
	},
	"CDOTA_Ability_Nian_Dive_SetPlaybackRate":
	{
		"body":"SetPlaybackRate(${flRate})",
		"description":"CDOTA_Ability_Nian_Dive_SetPlaybackRate:\nOverride playbackrate\nreturn void",
		"prefix":"SetPlaybackRate"
	},
	"CDOTA_Ability_Nian_Leap_SetPlaybackRate":
	{
		"body":"SetPlaybackRate(${flRate})",
		"description":"CDOTA_Ability_Nian_Leap_SetPlaybackRate:\nOverride playbackrate\nreturn void",
		"prefix":"SetPlaybackRate"
	},
	"CDOTA_Ability_Nian_Roar_GetCastCount":
	{
		"body":"GetCastCount()",
		"description":"CDOTA_Ability_Nian_Roar_GetCastCount:\nNumber of times Nian has used the roar\nreturn int",
		"prefix":"GetCastCount"
	},
	"CDOTA_BaseNPC_AddAbility":
	{
		"body":"AddAbility(${pszAbilityName})",
		"description":"CDOTA_BaseNPC_AddAbility:\nAdd an ability to this unit by name.\nreturn handle",
		"prefix":"AddAbility"
	},
	"CDOTA_BaseNPC_AddItem":
	{
		"body":"AddItem(${hItem})",
		"description":"CDOTA_BaseNPC_AddItem:\nAdd an item to this unit's inventory.\nreturn handle",
		"prefix":"AddItem"
	},
	"CDOTA_BaseNPC_AddItemByName":
	{
		"body":"AddItemByName(${pszItemName})",
		"description":"CDOTA_BaseNPC_AddItemByName:\nAdd an item to this unit's inventory.\nreturn handle",
		"prefix":"AddItemByName"
	},
	"CDOTA_BaseNPC_AddNewModifier":
	{
		"body":"AddNewModifier(${hCaster}, ${hAbility}, ${pszScriptName}, ${hModifierTable})",
		"description":"CDOTA_BaseNPC_AddNewModifier:\nAdd a modifier to this unit.\nreturn handle",
		"prefix":"AddNewModifier"
	},
	"CDOTA_BaseNPC_AddNoDraw":
	{
		"body":"AddNoDraw()",
		"description":"CDOTA_BaseNPC_AddNoDraw:\nAdds the no draw flag.\nreturn void",
		"prefix":"AddNoDraw"
	},
	"CDOTA_BaseNPC_AddSpeechBubble":
	{
		"body":"AddSpeechBubble(${iBubble}, ${pszSpeech}, ${flDuration}, ${unOffsetX}, ${unOffsetY})",
		"description":"CDOTA_BaseNPC_AddSpeechBubble:\nAdd a speech bubble(1-4 live at a time) to this NPC.\nreturn void",
		"prefix":"AddSpeechBubble"
	},
	"CDOTA_BaseNPC_AlertNearbyUnits":
	{
		"body":"AlertNearbyUnits(${hAttacker}, ${hAbility})",
		"description":"CDOTA_BaseNPC_AlertNearbyUnits:\n\nreturn void",
		"prefix":"AlertNearbyUnits"
	},
	"CDOTA_BaseNPC_AngerNearbyUnits":
	{
		"body":"AngerNearbyUnits()",
		"description":"CDOTA_BaseNPC_AngerNearbyUnits:\n\nreturn void",
		"prefix":"AngerNearbyUnits"
	},
	"CDOTA_BaseNPC_AttackNoEarlierThan":
	{
		"body":"AttackNoEarlierThan(${flTime})",
		"description":"CDOTA_BaseNPC_AttackNoEarlierThan:\n\nreturn void",
		"prefix":"AttackNoEarlierThan"
	},
	"CDOTA_BaseNPC_AttackReady":
	{
		"body":"AttackReady()",
		"description":"CDOTA_BaseNPC_AttackReady:\n\nreturn bool",
		"prefix":"AttackReady"
	},
	"CDOTA_BaseNPC_BoundingRadius2D":
	{
		"body":"BoundingRadius2D()",
		"description":"CDOTA_BaseNPC_BoundingRadius2D:\n\nreturn float",
		"prefix":"BoundingRadius2D"
	},
	"CDOTA_BaseNPC_CanEntityBeSeenByMyTeam":
	{
		"body":"CanEntityBeSeenByMyTeam(${hEntity})",
		"description":"CDOTA_BaseNPC_CanEntityBeSeenByMyTeam:\nCheck FoW to see if an entity is visible.\nreturn bool",
		"prefix":"CanEntityBeSeenByMyTeam"
	},
	"CDOTA_BaseNPC_CanSellItems":
	{
		"body":"CanSellItems()",
		"description":"CDOTA_BaseNPC_CanSellItems:\nQuery if this unit can sell items.\nreturn bool",
		"prefix":"CanSellItems"
	},
	"CDOTA_BaseNPC_CastAbilityImmediately":
	{
		"body":"CastAbilityImmediately(${hAbility}, ${iPlayerIndex})",
		"description":"CDOTA_BaseNPC_CastAbilityImmediately:\nCast an ability immediately.\nreturn void",
		"prefix":"CastAbilityImmediately"
	},
	"CDOTA_BaseNPC_CastAbilityNoTarget":
	{
		"body":"CastAbilityNoTarget(${hAbility}, ${iPlayerIndex})",
		"description":"CDOTA_BaseNPC_CastAbilityNoTarget:\nCast an ability with no target.\nreturn void",
		"prefix":"CastAbilityNoTarget"
	},
	"CDOTA_BaseNPC_CastAbilityOnPosition":
	{
		"body":"CastAbilityOnPosition(${vPosition}, ${hAbility}, ${iPlayerIndex})",
		"description":"CDOTA_BaseNPC_CastAbilityOnPosition:\nCast an ability on a position.\nreturn void",
		"prefix":"CastAbilityOnPosition"
	},
	"CDOTA_BaseNPC_CastAbilityOnTarget":
	{
		"body":"CastAbilityOnTarget(${hTarget}, ${hAbility}, ${iPlayerIndex})",
		"description":"CDOTA_BaseNPC_CastAbilityOnTarget:\nCast an ability on a target entity.\nreturn void",
		"prefix":"CastAbilityOnTarget"
	},
	"CDOTA_BaseNPC_CastAbilityToggle":
	{
		"body":"CastAbilityToggle(${hAbility}, ${iPlayerIndex})",
		"description":"CDOTA_BaseNPC_CastAbilityToggle:\nToggle an ability.\nreturn void",
		"prefix":"CastAbilityToggle"
	},
	"CDOTA_BaseNPC_DestroyAllSpeechBubbles":
	{
		"body":"DestroyAllSpeechBubbles()",
		"description":"CDOTA_BaseNPC_DestroyAllSpeechBubbles:\n\nreturn void",
		"prefix":"DestroyAllSpeechBubbles"
	},
	"CDOTA_BaseNPC_DisassembleItem":
	{
		"body":"DisassembleItem(${hItem})",
		"description":"CDOTA_BaseNPC_DisassembleItem:\nDisassemble the passed item in this unit's inventory.\nreturn void",
		"prefix":"DisassembleItem"
	},
	"CDOTA_BaseNPC_DropItemAtPosition":
	{
		"body":"DropItemAtPosition(${vDest}, ${hItem})",
		"description":"CDOTA_BaseNPC_DropItemAtPosition:\nDrop an item at a given point.\nreturn void",
		"prefix":"DropItemAtPosition"
	},
	"CDOTA_BaseNPC_DropItemAtPositionImmediate":
	{
		"body":"DropItemAtPositionImmediate(${hItem}, ${vPosition})",
		"description":"CDOTA_BaseNPC_DropItemAtPositionImmediate:\nImmediately drop a carried item at a given position.\nreturn void",
		"prefix":"DropItemAtPositionImmediate"
	},
	"CDOTA_BaseNPC_EjectItemFromStash":
	{
		"body":"EjectItemFromStash(${hItem})",
		"description":"CDOTA_BaseNPC_EjectItemFromStash:\nDrops the selected item out of this unit's stash.\nreturn void",
		"prefix":"EjectItemFromStash"
	},
	"CDOTA_BaseNPC_FaceTowards":
	{
		"body":"FaceTowards(${vTarget})",
		"description":"CDOTA_BaseNPC_FaceTowards:\nThis unit will be set to face the target point.\nreturn void",
		"prefix":"FaceTowards"
	},
	"CDOTA_BaseNPC_FadeGesture":
	{
		"body":"FadeGesture(${nActivity})",
		"description":"CDOTA_BaseNPC_FadeGesture:\nFade and remove the given gesture activity.\nreturn void",
		"prefix":"FadeGesture"
	},
	"CDOTA_BaseNPC_FindAbilityByName":
	{
		"body":"FindAbilityByName(${pAbilityName})",
		"description":"CDOTA_BaseNPC_FindAbilityByName:\nRetrieve an ability by name from the unit.\nreturn handle",
		"prefix":"FindAbilityByName"
	},
	"CDOTA_BaseNPC_FindAllModifiers":
	{
		"body":"FindAllModifiers()",
		"description":"CDOTA_BaseNPC_FindAllModifiers:\nReturns a table of all of the modifiers on the NPC.\nreturn table",
		"prefix":"FindAllModifiers"
	},
	"CDOTA_BaseNPC_FindAllModifiersByName":
	{
		"body":"FindAllModifiersByName(${pszScriptName})",
		"description":"CDOTA_BaseNPC_FindAllModifiersByName:\nReturns a table of all of the modifiers on the NPC with the passed name (modifierName)\nreturn table",
		"prefix":"FindAllModifiersByName"
	},
	"CDOTA_BaseNPC_FindItemInInventory":
	{
		"body":"FindItemInInventory(${pszItemName})",
		"description":"CDOTA_BaseNPC_FindItemInInventory:\nGet handle to first item in inventory, else nil.\nreturn handle",
		"prefix":"FindItemInInventory"
	},
	"CDOTA_BaseNPC_FindModifierByName":
	{
		"body":"FindModifierByName(${pszScriptName})",
		"description":"CDOTA_BaseNPC_FindModifierByName:\nReturn a handle to the modifier of the given name if found, else nil (string Name )\nreturn handle",
		"prefix":"FindModifierByName"
	},
	"CDOTA_BaseNPC_FindModifierByNameAndCaster":
	{
		"body":"FindModifierByNameAndCaster(${pszScriptName}, ${hCaster})",
		"description":"CDOTA_BaseNPC_FindModifierByNameAndCaster:\nReturn a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )\nreturn handle",
		"prefix":"FindModifierByNameAndCaster"
	},
	"CDOTA_BaseNPC_ForceKill":
	{
		"body":"ForceKill(${bReincarnate})",
		"description":"CDOTA_BaseNPC_ForceKill:\nKill this unit immediately.\nreturn void",
		"prefix":"ForceKill"
	},
	"CDOTA_BaseNPC_ForcePlayActivityOnce":
	{
		"body":"ForcePlayActivityOnce(${nActivity})",
		"description":"CDOTA_BaseNPC_ForcePlayActivityOnce:\nPlay an activity once, and then go back to idle.\nreturn void",
		"prefix":"ForcePlayActivityOnce"
	},
	"CDOTA_BaseNPC_GetAbilityByIndex":
	{
		"body":"GetAbilityByIndex(${iIndex})",
		"description":"CDOTA_BaseNPC_GetAbilityByIndex:\nRetrieve an ability by index from the unit.\nreturn handle",
		"prefix":"GetAbilityByIndex"
	},
	"CDOTA_BaseNPC_GetAbilityCount":
	{
		"body":"GetAbilityCount()",
		"description":"CDOTA_BaseNPC_GetAbilityCount:\n\nreturn int",
		"prefix":"GetAbilityCount"
	},
	"CDOTA_BaseNPC_GetAcquisitionRange":
	{
		"body":"GetAcquisitionRange()",
		"description":"CDOTA_BaseNPC_GetAcquisitionRange:\nGets the range at which this unit will auto-acquire.\nreturn float",
		"prefix":"GetAcquisitionRange"
	},
	"CDOTA_BaseNPC_GetAdditionalBattleMusicWeight":
	{
		"body":"GetAdditionalBattleMusicWeight()",
		"description":"CDOTA_BaseNPC_GetAdditionalBattleMusicWeight:\nCombat involving this creature will have this weight added to the music calcuations.\nreturn float",
		"prefix":"GetAdditionalBattleMusicWeight"
	},
	"CDOTA_BaseNPC_GetAggroTarget":
	{
		"body":"GetAggroTarget()",
		"description":"CDOTA_BaseNPC_GetAggroTarget:\nReturns this unit's aggro target.\nreturn handle",
		"prefix":"GetAggroTarget"
	},
	"CDOTA_BaseNPC_GetAttackAnimationPoint":
	{
		"body":"GetAttackAnimationPoint()",
		"description":"CDOTA_BaseNPC_GetAttackAnimationPoint:\n\nreturn float",
		"prefix":"GetAttackAnimationPoint"
	},
	"CDOTA_BaseNPC_GetAttackCapability":
	{
		"body":"GetAttackCapability()",
		"description":"CDOTA_BaseNPC_GetAttackCapability:\n\nreturn int",
		"prefix":"GetAttackCapability"
	},
	"CDOTA_BaseNPC_GetAttackDamage":
	{
		"body":"GetAttackDamage()",
		"description":"CDOTA_BaseNPC_GetAttackDamage:\nReturns a random integer between the minimum and maximum base damage of the unit.\nreturn int",
		"prefix":"GetAttackDamage"
	},
	"CDOTA_BaseNPC_GetAttackRangeBuffer":
	{
		"body":"GetAttackRangeBuffer()",
		"description":"CDOTA_BaseNPC_GetAttackRangeBuffer:\nGets the attack range buffer.\nreturn float",
		"prefix":"GetAttackRangeBuffer"
	},
	"CDOTA_BaseNPC_GetAttackSpeed":
	{
		"body":"GetAttackSpeed()",
		"description":"CDOTA_BaseNPC_GetAttackSpeed:\n\nreturn float",
		"prefix":"GetAttackSpeed"
	},
	"CDOTA_BaseNPC_GetAttackTarget":
	{
		"body":"GetAttackTarget()",
		"description":"CDOTA_BaseNPC_GetAttackTarget:\n\nreturn handle",
		"prefix":"GetAttackTarget"
	},
	"CDOTA_BaseNPC_GetAttacksPerSecond":
	{
		"body":"GetAttacksPerSecond()",
		"description":"CDOTA_BaseNPC_GetAttacksPerSecond:\n\nreturn float",
		"prefix":"GetAttacksPerSecond"
	},
	"CDOTA_BaseNPC_GetAverageTrueAttackDamage":
	{
		"body":"GetAverageTrueAttackDamage(${hTarget})",
		"description":"CDOTA_BaseNPC_GetAverageTrueAttackDamage:\nReturns the average value of the minimum and maximum damage values.\nreturn int",
		"prefix":"GetAverageTrueAttackDamage"
	},
	"CDOTA_BaseNPC_GetBaseAttackRange":
	{
		"body":"GetBaseAttackRange()",
		"description":"CDOTA_BaseNPC_GetBaseAttackRange:\n\nreturn int",
		"prefix":"GetBaseAttackRange"
	},
	"CDOTA_BaseNPC_GetBaseAttackTime":
	{
		"body":"GetBaseAttackTime()",
		"description":"CDOTA_BaseNPC_GetBaseAttackTime:\n\nreturn float",
		"prefix":"GetBaseAttackTime"
	},
	"CDOTA_BaseNPC_GetBaseDamageMax":
	{
		"body":"GetBaseDamageMax()",
		"description":"CDOTA_BaseNPC_GetBaseDamageMax:\nGet the maximum attack damage of this unit.\nreturn int",
		"prefix":"GetBaseDamageMax"
	},
	"CDOTA_BaseNPC_GetBaseDamageMin":
	{
		"body":"GetBaseDamageMin()",
		"description":"CDOTA_BaseNPC_GetBaseDamageMin:\nGet the minimum attack damage of this unit.\nreturn int",
		"prefix":"GetBaseDamageMin"
	},
	"CDOTA_BaseNPC_GetBaseDayTimeVisionRange":
	{
		"body":"GetBaseDayTimeVisionRange()",
		"description":"CDOTA_BaseNPC_GetBaseDayTimeVisionRange:\nReturns the vision range before modifiers.\nreturn int",
		"prefix":"GetBaseDayTimeVisionRange"
	},
	"CDOTA_BaseNPC_GetBaseHealthRegen":
	{
		"body":"GetBaseHealthRegen()",
		"description":"CDOTA_BaseNPC_GetBaseHealthRegen:\n\nreturn float",
		"prefix":"GetBaseHealthRegen"
	},
	"CDOTA_BaseNPC_GetBaseMagicalResistanceValue":
	{
		"body":"GetBaseMagicalResistanceValue()",
		"description":"CDOTA_BaseNPC_GetBaseMagicalResistanceValue:\nReturns base magical armor value.\nreturn float",
		"prefix":"GetBaseMagicalResistanceValue"
	},
	"CDOTA_BaseNPC_GetBaseMaxHealth":
	{
		"body":"GetBaseMaxHealth()",
		"description":"CDOTA_BaseNPC_GetBaseMaxHealth:\nGets the base max health value.\nreturn float",
		"prefix":"GetBaseMaxHealth"
	},
	"CDOTA_BaseNPC_GetBaseMoveSpeed":
	{
		"body":"GetBaseMoveSpeed()",
		"description":"CDOTA_BaseNPC_GetBaseMoveSpeed:\n\nreturn float",
		"prefix":"GetBaseMoveSpeed"
	},
	"CDOTA_BaseNPC_GetBaseNightTimeVisionRange":
	{
		"body":"GetBaseNightTimeVisionRange()",
		"description":"CDOTA_BaseNPC_GetBaseNightTimeVisionRange:\nReturns the vision range after modifiers.\nreturn int",
		"prefix":"GetBaseNightTimeVisionRange"
	},
	"CDOTA_BaseNPC_GetBonusManaRegen":
	{
		"body":"GetBonusManaRegen()",
		"description":"CDOTA_BaseNPC_GetBonusManaRegen:\nThis Mana regen is derived from constant bonuses like Basilius.\nreturn float",
		"prefix":"GetBonusManaRegen"
	},
	"CDOTA_BaseNPC_GetCastPoint":
	{
		"body":"GetCastPoint(${bAttack})",
		"description":"CDOTA_BaseNPC_GetCastPoint:\n\nreturn float",
		"prefix":"GetCastPoint"
	},
	"CDOTA_BaseNPC_GetCloneSource":
	{
		"body":"GetCloneSource()",
		"description":"CDOTA_BaseNPC_GetCloneSource:\nGet clone source (Meepo Prime, if this is a Meepo)\nreturn handle",
		"prefix":"GetCloneSource"
	},
	"CDOTA_BaseNPC_GetCollisionPadding":
	{
		"body":"GetCollisionPadding()",
		"description":"CDOTA_BaseNPC_GetCollisionPadding:\nReturns the size of the collision padding around the hull.\nreturn float",
		"prefix":"GetCollisionPadding"
	},
	"CDOTA_BaseNPC_GetCreationTime":
	{
		"body":"GetCreationTime()",
		"description":"CDOTA_BaseNPC_GetCreationTime:\n\nreturn float",
		"prefix":"GetCreationTime"
	},
	"CDOTA_BaseNPC_GetCurrentActiveAbility":
	{
		"body":"GetCurrentActiveAbility()",
		"description":"CDOTA_BaseNPC_GetCurrentActiveAbility:\nGet the ability this unit is currently casting.\nreturn handle",
		"prefix":"GetCurrentActiveAbility"
	},
	"CDOTA_BaseNPC_GetCurrentVisionRange":
	{
		"body":"GetCurrentVisionRange()",
		"description":"CDOTA_BaseNPC_GetCurrentVisionRange:\nGets the current vision range.\nreturn int",
		"prefix":"GetCurrentVisionRange"
	},
	"CDOTA_BaseNPC_GetCursorCastTarget":
	{
		"body":"GetCursorCastTarget()",
		"description":"CDOTA_BaseNPC_GetCursorCastTarget:\n\nreturn handle",
		"prefix":"GetCursorCastTarget"
	},
	"CDOTA_BaseNPC_GetCursorPosition":
	{
		"body":"GetCursorPosition()",
		"description":"CDOTA_BaseNPC_GetCursorPosition:\n\nreturn Vector",
		"prefix":"GetCursorPosition"
	},
	"CDOTA_BaseNPC_GetCursorTargetingNothing":
	{
		"body":"GetCursorTargetingNothing()",
		"description":"CDOTA_BaseNPC_GetCursorTargetingNothing:\n\nreturn bool",
		"prefix":"GetCursorTargetingNothing"
	},
	"CDOTA_BaseNPC_GetDayTimeVisionRange":
	{
		"body":"GetDayTimeVisionRange()",
		"description":"CDOTA_BaseNPC_GetDayTimeVisionRange:\nReturns the vision range after modifiers.\nreturn int",
		"prefix":"GetDayTimeVisionRange"
	},
	"CDOTA_BaseNPC_GetDeathXP":
	{
		"body":"GetDeathXP()",
		"description":"CDOTA_BaseNPC_GetDeathXP:\nGet the XP bounty on this unit.\nreturn int",
		"prefix":"GetDeathXP"
	},
	"CDOTA_BaseNPC_GetEvasion":
	{
		"body":"GetEvasion()",
		"description":"CDOTA_BaseNPC_GetEvasion:\n\nreturn float",
		"prefix":"GetEvasion"
	},
	"CDOTA_BaseNPC_GetForceAttackTarget":
	{
		"body":"GetForceAttackTarget()",
		"description":"CDOTA_BaseNPC_GetForceAttackTarget:\n\nreturn handle",
		"prefix":"GetForceAttackTarget"
	},
	"CDOTA_BaseNPC_GetGoldBounty":
	{
		"body":"GetGoldBounty()",
		"description":"CDOTA_BaseNPC_GetGoldBounty:\nGet the gold bounty on this unit.\nreturn int",
		"prefix":"GetGoldBounty"
	},
	"CDOTA_BaseNPC_GetHasteFactor":
	{
		"body":"GetHasteFactor()",
		"description":"CDOTA_BaseNPC_GetHasteFactor:\n\nreturn float",
		"prefix":"GetHasteFactor"
	},
	"CDOTA_BaseNPC_GetHealthDeficit":
	{
		"body":"GetHealthDeficit()",
		"description":"CDOTA_BaseNPC_GetHealthDeficit:\nReturns integer amount of health missing from max.\nreturn int",
		"prefix":"GetHealthDeficit"
	},
	"CDOTA_BaseNPC_GetHealthPercent":
	{
		"body":"GetHealthPercent()",
		"description":"CDOTA_BaseNPC_GetHealthPercent:\nGet the current health percent of the unit.\nreturn int",
		"prefix":"GetHealthPercent"
	},
	"CDOTA_BaseNPC_GetHealthRegen":
	{
		"body":"GetHealthRegen()",
		"description":"CDOTA_BaseNPC_GetHealthRegen:\n\nreturn float",
		"prefix":"GetHealthRegen"
	},
	"CDOTA_BaseNPC_GetHullRadius":
	{
		"body":"GetHullRadius()",
		"description":"CDOTA_BaseNPC_GetHullRadius:\nGet the collision hull radius of this NPC.\nreturn float",
		"prefix":"GetHullRadius"
	},
	"CDOTA_BaseNPC_GetIdealSpeed":
	{
		"body":"GetIdealSpeed()",
		"description":"CDOTA_BaseNPC_GetIdealSpeed:\nReturns speed after all modifiers.\nreturn float",
		"prefix":"GetIdealSpeed"
	},
	"CDOTA_BaseNPC_GetIdealSpeedNoSlows":
	{
		"body":"GetIdealSpeedNoSlows()",
		"description":"CDOTA_BaseNPC_GetIdealSpeedNoSlows:\nReturns speed after all modifiers, but excluding those that reduce speed.\nreturn float",
		"prefix":"GetIdealSpeedNoSlows"
	},
	"CDOTA_BaseNPC_GetIncreasedAttackSpeed":
	{
		"body":"GetIncreasedAttackSpeed()",
		"description":"CDOTA_BaseNPC_GetIncreasedAttackSpeed:\n\nreturn float",
		"prefix":"GetIncreasedAttackSpeed"
	},
	"CDOTA_BaseNPC_GetInitialGoalEntity":
	{
		"body":"GetInitialGoalEntity()",
		"description":"CDOTA_BaseNPC_GetInitialGoalEntity:\nReturns the initial waypoint goal for this NPC.\nreturn handle",
		"prefix":"GetInitialGoalEntity"
	},
	"CDOTA_BaseNPC_GetInitialGoalPosition":
	{
		"body":"GetInitialGoalPosition()",
		"description":"CDOTA_BaseNPC_GetInitialGoalPosition:\nGet waypoint position for this NPC.\nreturn Vector",
		"prefix":"GetInitialGoalPosition"
	},
	"CDOTA_BaseNPC_GetItemInSlot":
	{
		"body":"GetItemInSlot(${i})",
		"description":"CDOTA_BaseNPC_GetItemInSlot:\nReturns nth item in inventory slot (index is zero based).\nreturn handle",
		"prefix":"GetItemInSlot"
	},
	"CDOTA_BaseNPC_GetLastAttackTime":
	{
		"body":"GetLastAttackTime()",
		"description":"CDOTA_BaseNPC_GetLastAttackTime:\n\nreturn float",
		"prefix":"GetLastAttackTime"
	},
	"CDOTA_BaseNPC_GetLastIdleChangeTime":
	{
		"body":"GetLastIdleChangeTime()",
		"description":"CDOTA_BaseNPC_GetLastIdleChangeTime:\nGet the last game time that this unit switched to/from idle state.\nreturn float",
		"prefix":"GetLastIdleChangeTime"
	},
	"CDOTA_BaseNPC_GetLevel":
	{
		"body":"GetLevel()",
		"description":"CDOTA_BaseNPC_GetLevel:\nReturns the level of this unit.\nreturn int",
		"prefix":"GetLevel"
	},
	"CDOTA_BaseNPC_GetMagicalArmorValue":
	{
		"body":"GetMagicalArmorValue()",
		"description":"CDOTA_BaseNPC_GetMagicalArmorValue:\nReturns current magical armor value.\nreturn float",
		"prefix":"GetMagicalArmorValue"
	},
	"CDOTA_BaseNPC_GetMainControllingPlayer":
	{
		"body":"GetMainControllingPlayer()",
		"description":"CDOTA_BaseNPC_GetMainControllingPlayer:\nReturns the player ID of the controlling player.\nreturn int",
		"prefix":"GetMainControllingPlayer"
	},
	"CDOTA_BaseNPC_GetMana":
	{
		"body":"GetMana()",
		"description":"CDOTA_BaseNPC_GetMana:\nGet the mana on this unit.\nreturn float",
		"prefix":"GetMana"
	},
	"CDOTA_BaseNPC_GetManaPercent":
	{
		"body":"GetManaPercent()",
		"description":"CDOTA_BaseNPC_GetManaPercent:\nGet the percent of mana remaining.\nreturn int",
		"prefix":"GetManaPercent"
	},
	"CDOTA_BaseNPC_GetManaRegen":
	{
		"body":"GetManaRegen()",
		"description":"CDOTA_BaseNPC_GetManaRegen:\n\nreturn float",
		"prefix":"GetManaRegen"
	},
	"CDOTA_BaseNPC_GetMaxMana":
	{
		"body":"GetMaxMana()",
		"description":"CDOTA_BaseNPC_GetMaxMana:\nGet the maximum mana of this unit.\nreturn float",
		"prefix":"GetMaxMana"
	},
	"CDOTA_BaseNPC_GetMaximumGoldBounty":
	{
		"body":"GetMaximumGoldBounty()",
		"description":"CDOTA_BaseNPC_GetMaximumGoldBounty:\nGet the maximum gold bounty for this unit.\nreturn int",
		"prefix":"GetMaximumGoldBounty"
	},
	"CDOTA_BaseNPC_GetMinimumGoldBounty":
	{
		"body":"GetMinimumGoldBounty()",
		"description":"CDOTA_BaseNPC_GetMinimumGoldBounty:\nGet the minimum gold bounty for this unit.\nreturn int",
		"prefix":"GetMinimumGoldBounty"
	},
	"CDOTA_BaseNPC_GetModelRadius":
	{
		"body":"GetModelRadius()",
		"description":"CDOTA_BaseNPC_GetModelRadius:\n\nreturn float",
		"prefix":"GetModelRadius"
	},
	"CDOTA_BaseNPC_GetModifierCount":
	{
		"body":"GetModifierCount()",
		"description":"CDOTA_BaseNPC_GetModifierCount:\nHow many modifiers does this unit have?\nreturn int",
		"prefix":"GetModifierCount"
	},
	"CDOTA_BaseNPC_GetModifierNameByIndex":
	{
		"body":"GetModifierNameByIndex(${nIndex})",
		"description":"CDOTA_BaseNPC_GetModifierNameByIndex:\nGet a modifier name by index.\nreturn string",
		"prefix":"GetModifierNameByIndex"
	},
	"CDOTA_BaseNPC_GetModifierStackCount":
	{
		"body":"GetModifierStackCount(${pszScriptName}, ${hCaster})",
		"description":"CDOTA_BaseNPC_GetModifierStackCount:\nGets the stack count of a given modifier.\nreturn int",
		"prefix":"GetModifierStackCount"
	},
	"CDOTA_BaseNPC_GetMoveSpeedModifier":
	{
		"body":"GetMoveSpeedModifier(${flBaseSpeed}, ${bReturnUnslowed})",
		"description":"CDOTA_BaseNPC_GetMoveSpeedModifier:\n\nreturn float",
		"prefix":"GetMoveSpeedModifier"
	},
	"CDOTA_BaseNPC_GetMustReachEachGoalEntity":
	{
		"body":"GetMustReachEachGoalEntity()",
		"description":"CDOTA_BaseNPC_GetMustReachEachGoalEntity:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.\nreturn bool",
		"prefix":"GetMustReachEachGoalEntity"
	},
	"CDOTA_BaseNPC_GetNeverMoveToClearSpace":
	{
		"body":"GetNeverMoveToClearSpace()",
		"description":"CDOTA_BaseNPC_GetNeverMoveToClearSpace:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases.\nreturn bool",
		"prefix":"GetNeverMoveToClearSpace"
	},
	"CDOTA_BaseNPC_GetNightTimeVisionRange":
	{
		"body":"GetNightTimeVisionRange()",
		"description":"CDOTA_BaseNPC_GetNightTimeVisionRange:\nReturns the vision range after modifiers.\nreturn int",
		"prefix":"GetNightTimeVisionRange"
	},
	"CDOTA_BaseNPC_GetOpposingTeamNumber":
	{
		"body":"GetOpposingTeamNumber()",
		"description":"CDOTA_BaseNPC_GetOpposingTeamNumber:\n\nreturn int",
		"prefix":"GetOpposingTeamNumber"
	},
	"CDOTA_BaseNPC_GetPaddedCollisionRadius":
	{
		"body":"GetPaddedCollisionRadius()",
		"description":"CDOTA_BaseNPC_GetPaddedCollisionRadius:\nGet the collision hull radius (including padding) of this NPC.\nreturn float",
		"prefix":"GetPaddedCollisionRadius"
	},
	"CDOTA_BaseNPC_GetPhysicalArmorBaseValue":
	{
		"body":"GetPhysicalArmorBaseValue()",
		"description":"CDOTA_BaseNPC_GetPhysicalArmorBaseValue:\nReturns base physical armor value.\nreturn float",
		"prefix":"GetPhysicalArmorBaseValue"
	},
	"CDOTA_BaseNPC_GetPhysicalArmorValue":
	{
		"body":"GetPhysicalArmorValue()",
		"description":"CDOTA_BaseNPC_GetPhysicalArmorValue:\nReturns current physical armor value.\nreturn float",
		"prefix":"GetPhysicalArmorValue"
	},
	"CDOTA_BaseNPC_GetPlayerOwner":
	{
		"body":"GetPlayerOwner()",
		"description":"CDOTA_BaseNPC_GetPlayerOwner:\nReturns the player that owns this unit.\nreturn handle",
		"prefix":"GetPlayerOwner"
	},
	"CDOTA_BaseNPC_GetPlayerOwnerID":
	{
		"body":"GetPlayerOwnerID()",
		"description":"CDOTA_BaseNPC_GetPlayerOwnerID:\nGet the owner player ID for this unit.\nreturn int",
		"prefix":"GetPlayerOwnerID"
	},
	"CDOTA_BaseNPC_GetProjectileSpeed":
	{
		"body":"GetProjectileSpeed()",
		"description":"CDOTA_BaseNPC_GetProjectileSpeed:\n\nreturn int",
		"prefix":"GetProjectileSpeed"
	},
	"CDOTA_BaseNPC_GetRangeToUnit":
	{
		"body":"GetRangeToUnit(${hNPC})",
		"description":"CDOTA_BaseNPC_GetRangeToUnit:\n\nreturn float",
		"prefix":"GetRangeToUnit"
	},
	"CDOTA_BaseNPC_GetRangedProjectileName":
	{
		"body":"GetRangedProjectileName()",
		"description":"CDOTA_BaseNPC_GetRangedProjectileName:\n\nreturn string",
		"prefix":"GetRangedProjectileName"
	},
	"CDOTA_BaseNPC_GetSecondsPerAttack":
	{
		"body":"GetSecondsPerAttack()",
		"description":"CDOTA_BaseNPC_GetSecondsPerAttack:\n\nreturn float",
		"prefix":"GetSecondsPerAttack"
	},
	"CDOTA_BaseNPC_GetSpellAmplification":
	{
		"body":"GetSpellAmplification(${bBaseOnly})",
		"description":"CDOTA_BaseNPC_GetSpellAmplification:\n\nreturn float",
		"prefix":"GetSpellAmplification"
	},
	"CDOTA_BaseNPC_GetStatusResistance":
	{
		"body":"GetStatusResistance()",
		"description":"CDOTA_BaseNPC_GetStatusResistance:\n\nreturn float",
		"prefix":"GetStatusResistance"
	},
	"CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost":
	{
		"body":"GetTotalPurchasedUpgradeGoldCost()",
		"description":"CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost:\nGet how much gold has been spent on ability upgrades.\nreturn int",
		"prefix":"GetTotalPurchasedUpgradeGoldCost"
	},
	"CDOTA_BaseNPC_GetUnitLabel":
	{
		"body":"GetUnitLabel()",
		"description":"CDOTA_BaseNPC_GetUnitLabel:\n\nreturn string",
		"prefix":"GetUnitLabel"
	},
	"CDOTA_BaseNPC_GetUnitName":
	{
		"body":"GetUnitName()",
		"description":"CDOTA_BaseNPC_GetUnitName:\nGet the name of this unit.\nreturn string",
		"prefix":"GetUnitName"
	},
	"CDOTA_BaseNPC_GiveMana":
	{
		"body":"GiveMana(${flMana})",
		"description":"CDOTA_BaseNPC_GiveMana:\nGive mana to this unit, this can be used for mana gained by abilities or item usage.\nreturn void",
		"prefix":"GiveMana"
	},
	"CDOTA_BaseNPC_HasAbility":
	{
		"body":"HasAbility(${pszAbilityName})",
		"description":"CDOTA_BaseNPC_HasAbility:\nSee whether this unit has an ability by name.\nreturn bool",
		"prefix":"HasAbility"
	},
	"CDOTA_BaseNPC_HasAnyActiveAbilities":
	{
		"body":"HasAnyActiveAbilities()",
		"description":"CDOTA_BaseNPC_HasAnyActiveAbilities:\n\nreturn bool",
		"prefix":"HasAnyActiveAbilities"
	},
	"CDOTA_BaseNPC_HasAttackCapability":
	{
		"body":"HasAttackCapability()",
		"description":"CDOTA_BaseNPC_HasAttackCapability:\n\nreturn bool",
		"prefix":"HasAttackCapability"
	},
	"CDOTA_BaseNPC_HasFlyMovementCapability":
	{
		"body":"HasFlyMovementCapability()",
		"description":"CDOTA_BaseNPC_HasFlyMovementCapability:\n\nreturn bool",
		"prefix":"HasFlyMovementCapability"
	},
	"CDOTA_BaseNPC_HasFlyingVision":
	{
		"body":"HasFlyingVision()",
		"description":"CDOTA_BaseNPC_HasFlyingVision:\n\nreturn bool",
		"prefix":"HasFlyingVision"
	},
	"CDOTA_BaseNPC_HasGroundMovementCapability":
	{
		"body":"HasGroundMovementCapability()",
		"description":"CDOTA_BaseNPC_HasGroundMovementCapability:\n\nreturn bool",
		"prefix":"HasGroundMovementCapability"
	},
	"CDOTA_BaseNPC_HasInventory":
	{
		"body":"HasInventory()",
		"description":"CDOTA_BaseNPC_HasInventory:\nDoes this unit have an inventory.\nreturn bool",
		"prefix":"HasInventory"
	},
	"CDOTA_BaseNPC_HasItemInInventory":
	{
		"body":"HasItemInInventory(${pItemName})",
		"description":"CDOTA_BaseNPC_HasItemInInventory:\nSee whether this unit has an item by name.\nreturn bool",
		"prefix":"HasItemInInventory"
	},
	"CDOTA_BaseNPC_HasModifier":
	{
		"body":"HasModifier(${pszScriptName})",
		"description":"CDOTA_BaseNPC_HasModifier:\nSees if this unit has a given modifier.\nreturn bool",
		"prefix":"HasModifier"
	},
	"CDOTA_BaseNPC_HasMovementCapability":
	{
		"body":"HasMovementCapability()",
		"description":"CDOTA_BaseNPC_HasMovementCapability:\n\nreturn bool",
		"prefix":"HasMovementCapability"
	},
	"CDOTA_BaseNPC_HasScepter":
	{
		"body":"HasScepter()",
		"description":"CDOTA_BaseNPC_HasScepter:\n\nreturn bool",
		"prefix":"HasScepter"
	},
	"CDOTA_BaseNPC_Heal":
	{
		"body":"Heal(${flAmount}, ${hInflictor})",
		"description":"CDOTA_BaseNPC_Heal:\nHeal this unit.\nreturn void",
		"prefix":"Heal"
	},
	"CDOTA_BaseNPC_Hold":
	{
		"body":"Hold()",
		"description":"CDOTA_BaseNPC_Hold:\nHold position.\nreturn void",
		"prefix":"Hold"
	},
	"CDOTA_BaseNPC_Interrupt":
	{
		"body":"Interrupt()",
		"description":"CDOTA_BaseNPC_Interrupt:\n\nreturn void",
		"prefix":"Interrupt"
	},
	"CDOTA_BaseNPC_InterruptChannel":
	{
		"body":"InterruptChannel()",
		"description":"CDOTA_BaseNPC_InterruptChannel:\n\nreturn void",
		"prefix":"InterruptChannel"
	},
	"CDOTA_BaseNPC_InterruptMotionControllers":
	{
		"body":"InterruptMotionControllers(${bFindClearSpace})",
		"description":"CDOTA_BaseNPC_InterruptMotionControllers:\n\nreturn void",
		"prefix":"InterruptMotionControllers"
	},
	"CDOTA_BaseNPC_IsAlive":
	{
		"body":"IsAlive()",
		"description":"CDOTA_BaseNPC_IsAlive:\nIs this unit alive?\nreturn bool",
		"prefix":"IsAlive"
	},
	"CDOTA_BaseNPC_IsAncient":
	{
		"body":"IsAncient()",
		"description":"CDOTA_BaseNPC_IsAncient:\nIs this unit an Ancient?\nreturn bool",
		"prefix":"IsAncient"
	},
	"CDOTA_BaseNPC_IsAttackImmune":
	{
		"body":"IsAttackImmune()",
		"description":"CDOTA_BaseNPC_IsAttackImmune:\n\nreturn bool",
		"prefix":"IsAttackImmune"
	},
	"CDOTA_BaseNPC_IsAttacking":
	{
		"body":"IsAttacking()",
		"description":"CDOTA_BaseNPC_IsAttacking:\n\nreturn bool",
		"prefix":"IsAttacking"
	},
	"CDOTA_BaseNPC_IsAttackingEntity":
	{
		"body":"IsAttackingEntity(${hEntity})",
		"description":"CDOTA_BaseNPC_IsAttackingEntity:\n\nreturn bool",
		"prefix":"IsAttackingEntity"
	},
	"CDOTA_BaseNPC_IsBarracks":
	{
		"body":"IsBarracks()",
		"description":"CDOTA_BaseNPC_IsBarracks:\nIs this unit a Barracks?\nreturn bool",
		"prefix":"IsBarracks"
	},
	"CDOTA_BaseNPC_IsBlind":
	{
		"body":"IsBlind()",
		"description":"CDOTA_BaseNPC_IsBlind:\n\nreturn bool",
		"prefix":"IsBlind"
	},
	"CDOTA_BaseNPC_IsBlockDisabled":
	{
		"body":"IsBlockDisabled()",
		"description":"CDOTA_BaseNPC_IsBlockDisabled:\n\nreturn bool",
		"prefix":"IsBlockDisabled"
	},
	"CDOTA_BaseNPC_IsBoss":
	{
		"body":"IsBoss()",
		"description":"CDOTA_BaseNPC_IsBoss:\nIs this unit a boss?\nreturn bool",
		"prefix":"IsBoss"
	},
	"CDOTA_BaseNPC_IsBuilding":
	{
		"body":"IsBuilding()",
		"description":"CDOTA_BaseNPC_IsBuilding:\nIs this unit a building?\nreturn bool",
		"prefix":"IsBuilding"
	},
	"CDOTA_BaseNPC_IsChanneling":
	{
		"body":"IsChanneling()",
		"description":"CDOTA_BaseNPC_IsChanneling:\nIs this unit currently channeling a spell?\nreturn bool",
		"prefix":"IsChanneling"
	},
	"CDOTA_BaseNPC_IsClone":
	{
		"body":"IsClone()",
		"description":"CDOTA_BaseNPC_IsClone:\nIs this unit a clone? (Meepo)\nreturn bool",
		"prefix":"IsClone"
	},
	"CDOTA_BaseNPC_IsCommandRestricted":
	{
		"body":"IsCommandRestricted()",
		"description":"CDOTA_BaseNPC_IsCommandRestricted:\n\nreturn bool",
		"prefix":"IsCommandRestricted"
	},
	"CDOTA_BaseNPC_IsConsideredHero":
	{
		"body":"IsConsideredHero()",
		"description":"CDOTA_BaseNPC_IsConsideredHero:\nIs this unit a considered a hero for targeting purposes?\nreturn bool",
		"prefix":"IsConsideredHero"
	},
	"CDOTA_BaseNPC_IsControllableByAnyPlayer":
	{
		"body":"IsControllableByAnyPlayer()",
		"description":"CDOTA_BaseNPC_IsControllableByAnyPlayer:\nIs this unit controlled by any non-bot player?\nreturn bool",
		"prefix":"IsControllableByAnyPlayer"
	},
	"CDOTA_BaseNPC_IsCourier":
	{
		"body":"IsCourier()",
		"description":"CDOTA_BaseNPC_IsCourier:\nIs this unit a courier?\nreturn bool",
		"prefix":"IsCourier"
	},
	"CDOTA_BaseNPC_IsCreature":
	{
		"body":"IsCreature()",
		"description":"CDOTA_BaseNPC_IsCreature:\nIs this a Creature type NPC?\nreturn bool",
		"prefix":"IsCreature"
	},
	"CDOTA_BaseNPC_IsCreep":
	{
		"body":"IsCreep()",
		"description":"CDOTA_BaseNPC_IsCreep:\nIs this unit a creep?\nreturn bool",
		"prefix":"IsCreep"
	},
	"CDOTA_BaseNPC_IsDeniable":
	{
		"body":"IsDeniable()",
		"description":"CDOTA_BaseNPC_IsDeniable:\n\nreturn bool",
		"prefix":"IsDeniable"
	},
	"CDOTA_BaseNPC_IsDisarmed":
	{
		"body":"IsDisarmed()",
		"description":"CDOTA_BaseNPC_IsDisarmed:\n\nreturn bool",
		"prefix":"IsDisarmed"
	},
	"CDOTA_BaseNPC_IsDominated":
	{
		"body":"IsDominated()",
		"description":"CDOTA_BaseNPC_IsDominated:\n\nreturn bool",
		"prefix":"IsDominated"
	},
	"CDOTA_BaseNPC_IsEvadeDisabled":
	{
		"body":"IsEvadeDisabled()",
		"description":"CDOTA_BaseNPC_IsEvadeDisabled:\n\nreturn bool",
		"prefix":"IsEvadeDisabled"
	},
	"CDOTA_BaseNPC_IsFort":
	{
		"body":"IsFort()",
		"description":"CDOTA_BaseNPC_IsFort:\nIs this unit an Ancient?\nreturn bool",
		"prefix":"IsFort"
	},
	"CDOTA_BaseNPC_IsFrozen":
	{
		"body":"IsFrozen()",
		"description":"CDOTA_BaseNPC_IsFrozen:\n\nreturn bool",
		"prefix":"IsFrozen"
	},
	"CDOTA_BaseNPC_IsHero":
	{
		"body":"IsHero()",
		"description":"CDOTA_BaseNPC_IsHero:\nIs this a hero or hero illusion?\nreturn bool",
		"prefix":"IsHero"
	},
	"CDOTA_BaseNPC_IsHexed":
	{
		"body":"IsHexed()",
		"description":"CDOTA_BaseNPC_IsHexed:\n\nreturn bool",
		"prefix":"IsHexed"
	},
	"CDOTA_BaseNPC_IsIdle":
	{
		"body":"IsIdle()",
		"description":"CDOTA_BaseNPC_IsIdle:\nIs this creature currently idle?\nreturn bool",
		"prefix":"IsIdle"
	},
	"CDOTA_BaseNPC_IsIllusion":
	{
		"body":"IsIllusion()",
		"description":"CDOTA_BaseNPC_IsIllusion:\n\nreturn bool",
		"prefix":"IsIllusion"
	},
	"CDOTA_BaseNPC_IsInvisible":
	{
		"body":"IsInvisible()",
		"description":"CDOTA_BaseNPC_IsInvisible:\n\nreturn bool",
		"prefix":"IsInvisible"
	},
	"CDOTA_BaseNPC_IsInvulnerable":
	{
		"body":"IsInvulnerable()",
		"description":"CDOTA_BaseNPC_IsInvulnerable:\n\nreturn bool",
		"prefix":"IsInvulnerable"
	},
	"CDOTA_BaseNPC_IsLowAttackPriority":
	{
		"body":"IsLowAttackPriority()",
		"description":"CDOTA_BaseNPC_IsLowAttackPriority:\n\nreturn bool",
		"prefix":"IsLowAttackPriority"
	},
	"CDOTA_BaseNPC_IsMagicImmune":
	{
		"body":"IsMagicImmune()",
		"description":"CDOTA_BaseNPC_IsMagicImmune:\n\nreturn bool",
		"prefix":"IsMagicImmune"
	},
	"CDOTA_BaseNPC_IsMovementImpaired":
	{
		"body":"IsMovementImpaired()",
		"description":"CDOTA_BaseNPC_IsMovementImpaired:\n\nreturn bool",
		"prefix":"IsMovementImpaired"
	},
	"CDOTA_BaseNPC_IsMoving":
	{
		"body":"IsMoving()",
		"description":"CDOTA_BaseNPC_IsMoving:\nIs this unit moving?\nreturn bool",
		"prefix":"IsMoving"
	},
	"CDOTA_BaseNPC_IsMuted":
	{
		"body":"IsMuted()",
		"description":"CDOTA_BaseNPC_IsMuted:\n\nreturn bool",
		"prefix":"IsMuted"
	},
	"CDOTA_BaseNPC_IsNeutralUnitType":
	{
		"body":"IsNeutralUnitType()",
		"description":"CDOTA_BaseNPC_IsNeutralUnitType:\nIs this a neutral?\nreturn bool",
		"prefix":"IsNeutralUnitType"
	},
	"CDOTA_BaseNPC_IsNightmared":
	{
		"body":"IsNightmared()",
		"description":"CDOTA_BaseNPC_IsNightmared:\n\nreturn bool",
		"prefix":"IsNightmared"
	},
	"CDOTA_BaseNPC_IsOpposingTeam":
	{
		"body":"IsOpposingTeam(${nTeam})",
		"description":"CDOTA_BaseNPC_IsOpposingTeam:\n\nreturn bool",
		"prefix":"IsOpposingTeam"
	},
	"CDOTA_BaseNPC_IsOther":
	{
		"body":"IsOther()",
		"description":"CDOTA_BaseNPC_IsOther:\nIs this unit a ward-type unit?\nreturn bool",
		"prefix":"IsOther"
	},
	"CDOTA_BaseNPC_IsOutOfGame":
	{
		"body":"IsOutOfGame()",
		"description":"CDOTA_BaseNPC_IsOutOfGame:\n\nreturn bool",
		"prefix":"IsOutOfGame"
	},
	"CDOTA_BaseNPC_IsOwnedByAnyPlayer":
	{
		"body":"IsOwnedByAnyPlayer()",
		"description":"CDOTA_BaseNPC_IsOwnedByAnyPlayer:\nIs this unit owned by any non-bot player?\nreturn bool",
		"prefix":"IsOwnedByAnyPlayer"
	},
	"CDOTA_BaseNPC_IsPhantom":
	{
		"body":"IsPhantom()",
		"description":"CDOTA_BaseNPC_IsPhantom:\nIs this a phantom unit?\nreturn bool",
		"prefix":"IsPhantom"
	},
	"CDOTA_BaseNPC_IsPhantomBlocker":
	{
		"body":"IsPhantomBlocker()",
		"description":"CDOTA_BaseNPC_IsPhantomBlocker:\n\nreturn bool",
		"prefix":"IsPhantomBlocker"
	},
	"CDOTA_BaseNPC_IsPhased":
	{
		"body":"IsPhased()",
		"description":"CDOTA_BaseNPC_IsPhased:\n\nreturn bool",
		"prefix":"IsPhased"
	},
	"CDOTA_BaseNPC_IsPositionInRange":
	{
		"body":"IsPositionInRange(${vPosition}, ${flRange})",
		"description":"CDOTA_BaseNPC_IsPositionInRange:\n\nreturn bool",
		"prefix":"IsPositionInRange"
	},
	"CDOTA_BaseNPC_IsRangedAttacker":
	{
		"body":"IsRangedAttacker()",
		"description":"CDOTA_BaseNPC_IsRangedAttacker:\nIs this unit a ranged attacker?\nreturn bool",
		"prefix":"IsRangedAttacker"
	},
	"CDOTA_BaseNPC_IsRealHero":
	{
		"body":"IsRealHero()",
		"description":"CDOTA_BaseNPC_IsRealHero:\nIs this a real hero?\nreturn bool",
		"prefix":"IsRealHero"
	},
	"CDOTA_BaseNPC_IsRooted":
	{
		"body":"IsRooted()",
		"description":"CDOTA_BaseNPC_IsRooted:\n\nreturn bool",
		"prefix":"IsRooted"
	},
	"CDOTA_BaseNPC_IsShrine":
	{
		"body":"IsShrine()",
		"description":"CDOTA_BaseNPC_IsShrine:\nIs this a shrine?\nreturn bool",
		"prefix":"IsShrine"
	},
	"CDOTA_BaseNPC_IsSilenced":
	{
		"body":"IsSilenced()",
		"description":"CDOTA_BaseNPC_IsSilenced:\n\nreturn bool",
		"prefix":"IsSilenced"
	},
	"CDOTA_BaseNPC_IsSpeciallyDeniable":
	{
		"body":"IsSpeciallyDeniable()",
		"description":"CDOTA_BaseNPC_IsSpeciallyDeniable:\n\nreturn bool",
		"prefix":"IsSpeciallyDeniable"
	},
	"CDOTA_BaseNPC_IsStunned":
	{
		"body":"IsStunned()",
		"description":"CDOTA_BaseNPC_IsStunned:\n\nreturn bool",
		"prefix":"IsStunned"
	},
	"CDOTA_BaseNPC_IsSummoned":
	{
		"body":"IsSummoned()",
		"description":"CDOTA_BaseNPC_IsSummoned:\nIs this unit summoned?\nreturn bool",
		"prefix":"IsSummoned"
	},
	"CDOTA_BaseNPC_IsTempestDouble":
	{
		"body":"IsTempestDouble()",
		"description":"CDOTA_BaseNPC_IsTempestDouble:\n\nreturn bool",
		"prefix":"IsTempestDouble"
	},
	"CDOTA_BaseNPC_IsTower":
	{
		"body":"IsTower()",
		"description":"CDOTA_BaseNPC_IsTower:\nIs this a tower?\nreturn bool",
		"prefix":"IsTower"
	},
	"CDOTA_BaseNPC_IsUnableToMiss":
	{
		"body":"IsUnableToMiss()",
		"description":"CDOTA_BaseNPC_IsUnableToMiss:\n\nreturn bool",
		"prefix":"IsUnableToMiss"
	},
	"CDOTA_BaseNPC_IsUnselectable":
	{
		"body":"IsUnselectable()",
		"description":"CDOTA_BaseNPC_IsUnselectable:\n\nreturn bool",
		"prefix":"IsUnselectable"
	},
	"CDOTA_BaseNPC_IsUntargetable":
	{
		"body":"IsUntargetable()",
		"description":"CDOTA_BaseNPC_IsUntargetable:\n\nreturn bool",
		"prefix":"IsUntargetable"
	},
	"CDOTA_BaseNPC_Kill":
	{
		"body":"Kill(${hAbility}, ${hAttacker})",
		"description":"CDOTA_BaseNPC_Kill:\nKills this NPC, with the params Ability and Attacker.\nreturn void",
		"prefix":"Kill"
	},
	"CDOTA_BaseNPC_MakeIllusion":
	{
		"body":"MakeIllusion()",
		"description":"CDOTA_BaseNPC_MakeIllusion:\n\nreturn void",
		"prefix":"MakeIllusion"
	},
	"CDOTA_BaseNPC_MakePhantomBlocker":
	{
		"body":"MakePhantomBlocker()",
		"description":"CDOTA_BaseNPC_MakePhantomBlocker:\n\nreturn void",
		"prefix":"MakePhantomBlocker"
	},
	"CDOTA_BaseNPC_MakeVisibleDueToAttack":
	{
		"body":"MakeVisibleDueToAttack(${iTeam}, ${flRadius})",
		"description":"CDOTA_BaseNPC_MakeVisibleDueToAttack:\n\nreturn void",
		"prefix":"MakeVisibleDueToAttack"
	},
	"CDOTA_BaseNPC_MakeVisibleToTeam":
	{
		"body":"MakeVisibleToTeam(${iTeam}, ${flDuration})",
		"description":"CDOTA_BaseNPC_MakeVisibleToTeam:\n\nreturn void",
		"prefix":"MakeVisibleToTeam"
	},
	"CDOTA_BaseNPC_ManageModelChanges":
	{
		"body":"ManageModelChanges()",
		"description":"CDOTA_BaseNPC_ManageModelChanges:\n\nreturn void",
		"prefix":"ManageModelChanges"
	},
	"CDOTA_BaseNPC_ModifyHealth":
	{
		"body":"ModifyHealth(${iDesiredHealthValue}, ${hAbility}, ${bLethal}, ${iAdditionalFlags})",
		"description":"CDOTA_BaseNPC_ModifyHealth:\nSets the health to a specific value, with optional flags or inflictors.\nreturn void",
		"prefix":"ModifyHealth"
	},
	"CDOTA_BaseNPC_MoveToNPC":
	{
		"body":"MoveToNPC(${hNPC})",
		"description":"CDOTA_BaseNPC_MoveToNPC:\nMove to follow a unit.\nreturn void",
		"prefix":"MoveToNPC"
	},
	"CDOTA_BaseNPC_MoveToNPCToGiveItem":
	{
		"body":"MoveToNPCToGiveItem(${hNPC}, ${hItem})",
		"description":"CDOTA_BaseNPC_MoveToNPCToGiveItem:\nGive an item to another unit.\nreturn void",
		"prefix":"MoveToNPCToGiveItem"
	},
	"CDOTA_BaseNPC_MoveToPosition":
	{
		"body":"MoveToPosition(${vDest})",
		"description":"CDOTA_BaseNPC_MoveToPosition:\nIssue a Move-To command.\nreturn void",
		"prefix":"MoveToPosition"
	},
	"CDOTA_BaseNPC_MoveToPositionAggressive":
	{
		"body":"MoveToPositionAggressive(${vDest})",
		"description":"CDOTA_BaseNPC_MoveToPositionAggressive:\nIssue an Attack-Move-To command.\nreturn void",
		"prefix":"MoveToPositionAggressive"
	},
	"CDOTA_BaseNPC_MoveToTargetToAttack":
	{
		"body":"MoveToTargetToAttack(${hTarget})",
		"description":"CDOTA_BaseNPC_MoveToTargetToAttack:\nMove to a target to attack.\nreturn void",
		"prefix":"MoveToTargetToAttack"
	},
	"CDOTA_BaseNPC_NoHealthBar":
	{
		"body":"NoHealthBar()",
		"description":"CDOTA_BaseNPC_NoHealthBar:\n\nreturn bool",
		"prefix":"NoHealthBar"
	},
	"CDOTA_BaseNPC_NoTeamMoveTo":
	{
		"body":"NoTeamMoveTo()",
		"description":"CDOTA_BaseNPC_NoTeamMoveTo:\n\nreturn bool",
		"prefix":"NoTeamMoveTo"
	},
	"CDOTA_BaseNPC_NoTeamSelect":
	{
		"body":"NoTeamSelect()",
		"description":"CDOTA_BaseNPC_NoTeamSelect:\n\nreturn bool",
		"prefix":"NoTeamSelect"
	},
	"CDOTA_BaseNPC_NoUnitCollision":
	{
		"body":"NoUnitCollision()",
		"description":"CDOTA_BaseNPC_NoUnitCollision:\n\nreturn bool",
		"prefix":"NoUnitCollision"
	},
	"CDOTA_BaseNPC_NotOnMinimap":
	{
		"body":"NotOnMinimap()",
		"description":"CDOTA_BaseNPC_NotOnMinimap:\n\nreturn bool",
		"prefix":"NotOnMinimap"
	},
	"CDOTA_BaseNPC_NotOnMinimapForEnemies":
	{
		"body":"NotOnMinimapForEnemies()",
		"description":"CDOTA_BaseNPC_NotOnMinimapForEnemies:\n\nreturn bool",
		"prefix":"NotOnMinimapForEnemies"
	},
	"CDOTA_BaseNPC_NotifyWearablesOfModelChange":
	{
		"body":"NotifyWearablesOfModelChange(${bOriginalModel})",
		"description":"CDOTA_BaseNPC_NotifyWearablesOfModelChange:\n\nreturn void",
		"prefix":"NotifyWearablesOfModelChange"
	},
	"CDOTA_BaseNPC_PassivesDisabled":
	{
		"body":"PassivesDisabled()",
		"description":"CDOTA_BaseNPC_PassivesDisabled:\n\nreturn bool",
		"prefix":"PassivesDisabled"
	},
	"CDOTA_BaseNPC_PatrolToPosition":
	{
		"body":"PatrolToPosition(${vDest})",
		"description":"CDOTA_BaseNPC_PatrolToPosition:\nIssue a Patrol-To command.\nreturn void",
		"prefix":"PatrolToPosition"
	},
	"CDOTA_BaseNPC_PerformAttack":
	{
		"body":"PerformAttack(${hTarget}, ${bUseCastAttackOrb}, ${bProcessProcs}, ${bSkipCooldown}, ${bIgnoreInvis}, ${bUseProjectile}, ${bFakeAttack}, ${bNeverMiss})",
		"description":"CDOTA_BaseNPC_PerformAttack:\nPerforms an attack on a target.\nreturn void",
		"prefix":"PerformAttack"
	},
	"CDOTA_BaseNPC_PickupDroppedItem":
	{
		"body":"PickupDroppedItem(${hItem})",
		"description":"CDOTA_BaseNPC_PickupDroppedItem:\nPick up a dropped item.\nreturn void",
		"prefix":"PickupDroppedItem"
	},
	"CDOTA_BaseNPC_PickupRune":
	{
		"body":"PickupRune(${hItem})",
		"description":"CDOTA_BaseNPC_PickupRune:\nPick up a rune.\nreturn void",
		"prefix":"PickupRune"
	},
	"CDOTA_BaseNPC_PlayVCD":
	{
		"body":"PlayVCD(${pVCD})",
		"description":"CDOTA_BaseNPC_PlayVCD:\nPlay a VCD on the NPC.\nreturn void",
		"prefix":"PlayVCD"
	},
	"CDOTA_BaseNPC_ProvidesVision":
	{
		"body":"ProvidesVision()",
		"description":"CDOTA_BaseNPC_ProvidesVision:\n\nreturn bool",
		"prefix":"ProvidesVision"
	},
	"CDOTA_BaseNPC_Purge":
	{
		"body":"Purge(${bRemovePositiveBuffs}, ${bRemoveDebuffs}, ${bFrameOnly}, ${bRemoveStuns}, ${bRemoveExceptions})",
		"description":"CDOTA_BaseNPC_Purge:\n(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions\nreturn void",
		"prefix":"Purge"
	},
	"CDOTA_BaseNPC_ReduceMana":
	{
		"body":"ReduceMana(${flAmount})",
		"description":"CDOTA_BaseNPC_ReduceMana:\nRemove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.\nreturn void",
		"prefix":"ReduceMana"
	},
	"CDOTA_BaseNPC_RemoveAbility":
	{
		"body":"RemoveAbility(${pszAbilityName})",
		"description":"CDOTA_BaseNPC_RemoveAbility:\nRemove an ability from this unit by name.\nreturn void",
		"prefix":"RemoveAbility"
	},
	"CDOTA_BaseNPC_RemoveGesture":
	{
		"body":"RemoveGesture(${nActivity})",
		"description":"CDOTA_BaseNPC_RemoveGesture:\nRemove the given gesture activity.\nreturn void",
		"prefix":"RemoveGesture"
	},
	"CDOTA_BaseNPC_RemoveHorizontalMotionController":
	{
		"body":"RemoveHorizontalMotionController(${hBuff})",
		"description":"CDOTA_BaseNPC_RemoveHorizontalMotionController:\n\nreturn void",
		"prefix":"RemoveHorizontalMotionController"
	},
	"CDOTA_BaseNPC_RemoveItem":
	{
		"body":"RemoveItem(${hItem})",
		"description":"CDOTA_BaseNPC_RemoveItem:\nRemoves the passed item from this unit's inventory and deletes it.\nreturn void",
		"prefix":"RemoveItem"
	},
	"CDOTA_BaseNPC_RemoveModifierByName":
	{
		"body":"RemoveModifierByName(${pszScriptName})",
		"description":"CDOTA_BaseNPC_RemoveModifierByName:\nRemoves a modifier.\nreturn void",
		"prefix":"RemoveModifierByName"
	},
	"CDOTA_BaseNPC_RemoveModifierByNameAndCaster":
	{
		"body":"RemoveModifierByNameAndCaster(${pszScriptName}, ${hCaster})",
		"description":"CDOTA_BaseNPC_RemoveModifierByNameAndCaster:\nRemoves a modifier that was cast by the given caster.\nreturn void",
		"prefix":"RemoveModifierByNameAndCaster"
	},
	"CDOTA_BaseNPC_RemoveNoDraw":
	{
		"body":"RemoveNoDraw()",
		"description":"CDOTA_BaseNPC_RemoveNoDraw:\nRemove the no draw flag.\nreturn void",
		"prefix":"RemoveNoDraw"
	},
	"CDOTA_BaseNPC_RemoveVerticalMotionController":
	{
		"body":"RemoveVerticalMotionController(${hBuff})",
		"description":"CDOTA_BaseNPC_RemoveVerticalMotionController:\n\nreturn void",
		"prefix":"RemoveVerticalMotionController"
	},
	"CDOTA_BaseNPC_RespawnUnit":
	{
		"body":"RespawnUnit()",
		"description":"CDOTA_BaseNPC_RespawnUnit:\nRespawns the target unit if it can be respawned.\nreturn void",
		"prefix":"RespawnUnit"
	},
	"CDOTA_BaseNPC_Script_GetAttackRange":
	{
		"body":"Script_GetAttackRange()",
		"description":"CDOTA_BaseNPC_Script_GetAttackRange:\nGets this unit's attack range after all modifiers.\nreturn float",
		"prefix":"Script_GetAttackRange"
	},
	"CDOTA_BaseNPC_SellItem":
	{
		"body":"SellItem(${hItem})",
		"description":"CDOTA_BaseNPC_SellItem:\nSells the passed item in this unit's inventory.\nreturn void",
		"prefix":"SellItem"
	},
	"CDOTA_BaseNPC_SetAbilityByIndex":
	{
		"body":"SetAbilityByIndex(${hAbility}, ${iIndex})",
		"description":"CDOTA_BaseNPC_SetAbilityByIndex:\nSet the ability by index.\nreturn void",
		"prefix":"SetAbilityByIndex"
	},
	"CDOTA_BaseNPC_SetAcquisitionRange":
	{
		"body":"SetAcquisitionRange(${nRange})",
		"description":"CDOTA_BaseNPC_SetAcquisitionRange:\n\nreturn void",
		"prefix":"SetAcquisitionRange"
	},
	"CDOTA_BaseNPC_SetAdditionalBattleMusicWeight":
	{
		"body":"SetAdditionalBattleMusicWeight(${flWeight})",
		"description":"CDOTA_BaseNPC_SetAdditionalBattleMusicWeight:\nCombat involving this creature will have this weight added to the music calcuations.\nreturn void",
		"prefix":"SetAdditionalBattleMusicWeight"
	},
	"CDOTA_BaseNPC_SetAggroTarget":
	{
		"body":"SetAggroTarget(${hAggroTarget})",
		"description":"CDOTA_BaseNPC_SetAggroTarget:\nSet this unit's aggro target to a specified unit.\nreturn void",
		"prefix":"SetAggroTarget"
	},
	"CDOTA_BaseNPC_SetAttackCapability":
	{
		"body":"SetAttackCapability(${iAttackCapabilities})",
		"description":"CDOTA_BaseNPC_SetAttackCapability:\n\nreturn void",
		"prefix":"SetAttackCapability"
	},
	"CDOTA_BaseNPC_SetAttacking":
	{
		"body":"SetAttacking(${hAttackTarget})",
		"description":"CDOTA_BaseNPC_SetAttacking:\n\nreturn void",
		"prefix":"SetAttacking"
	},
	"CDOTA_BaseNPC_SetBaseAttackTime":
	{
		"body":"SetBaseAttackTime(${flBaseAttackTime})",
		"description":"CDOTA_BaseNPC_SetBaseAttackTime:\n\nreturn void",
		"prefix":"SetBaseAttackTime"
	},
	"CDOTA_BaseNPC_SetBaseDamageMax":
	{
		"body":"SetBaseDamageMax(${nMax})",
		"description":"CDOTA_BaseNPC_SetBaseDamageMax:\nSets the maximum base damage.\nreturn void",
		"prefix":"SetBaseDamageMax"
	},
	"CDOTA_BaseNPC_SetBaseDamageMin":
	{
		"body":"SetBaseDamageMin(${nMin})",
		"description":"CDOTA_BaseNPC_SetBaseDamageMin:\nSets the minimum base damage.\nreturn void",
		"prefix":"SetBaseDamageMin"
	},
	"CDOTA_BaseNPC_SetBaseHealthRegen":
	{
		"body":"SetBaseHealthRegen(${flHealthRegen})",
		"description":"CDOTA_BaseNPC_SetBaseHealthRegen:\n\nreturn void",
		"prefix":"SetBaseHealthRegen"
	},
	"CDOTA_BaseNPC_SetBaseMagicalResistanceValue":
	{
		"body":"SetBaseMagicalResistanceValue(${flMagicalResistanceValue})",
		"description":"CDOTA_BaseNPC_SetBaseMagicalResistanceValue:\nSets base magical armor value.\nreturn void",
		"prefix":"SetBaseMagicalResistanceValue"
	},
	"CDOTA_BaseNPC_SetBaseManaRegen":
	{
		"body":"SetBaseManaRegen(${flManaRegen})",
		"description":"CDOTA_BaseNPC_SetBaseManaRegen:\n\nreturn void",
		"prefix":"SetBaseManaRegen"
	},
	"CDOTA_BaseNPC_SetBaseMaxHealth":
	{
		"body":"SetBaseMaxHealth(${flBaseMaxHealth})",
		"description":"CDOTA_BaseNPC_SetBaseMaxHealth:\nSet a new base max health value.\nreturn void",
		"prefix":"SetBaseMaxHealth"
	},
	"CDOTA_BaseNPC_SetBaseMoveSpeed":
	{
		"body":"SetBaseMoveSpeed(${iMoveSpeed})",
		"description":"CDOTA_BaseNPC_SetBaseMoveSpeed:\n\nreturn void",
		"prefix":"SetBaseMoveSpeed"
	},
	"CDOTA_BaseNPC_SetCanSellItems":
	{
		"body":"SetCanSellItems(${bCanSell})",
		"description":"CDOTA_BaseNPC_SetCanSellItems:\nSet whether or not this unit is allowed to sell items (bCanSellItems)\nreturn void",
		"prefix":"SetCanSellItems"
	},
	"CDOTA_BaseNPC_SetControllableByPlayer":
	{
		"body":"SetControllableByPlayer(${iIndex}, ${bSkipAdjustingPosition})",
		"description":"CDOTA_BaseNPC_SetControllableByPlayer:\nSet this unit controllable by the player with the passed ID.\nreturn void",
		"prefix":"SetControllableByPlayer"
	},
	"CDOTA_BaseNPC_SetCursorCastTarget":
	{
		"body":"SetCursorCastTarget(${hEntity})",
		"description":"CDOTA_BaseNPC_SetCursorCastTarget:\n\nreturn void",
		"prefix":"SetCursorCastTarget"
	},
	"CDOTA_BaseNPC_SetCursorPosition":
	{
		"body":"SetCursorPosition(${vLocation})",
		"description":"CDOTA_BaseNPC_SetCursorPosition:\n\nreturn void",
		"prefix":"SetCursorPosition"
	},
	"CDOTA_BaseNPC_SetCursorTargetingNothing":
	{
		"body":"SetCursorTargetingNothing(${bTargetingNothing})",
		"description":"CDOTA_BaseNPC_SetCursorTargetingNothing:\n\nreturn void",
		"prefix":"SetCursorTargetingNothing"
	},
	"CDOTA_BaseNPC_SetCustomHealthLabel":
	{
		"body":"SetCustomHealthLabel(${pLabel}, ${r}, ${g}, ${b})",
		"description":"CDOTA_BaseNPC_SetCustomHealthLabel:\n\nreturn void",
		"prefix":"SetCustomHealthLabel"
	},
	"CDOTA_BaseNPC_SetDayTimeVisionRange":
	{
		"body":"SetDayTimeVisionRange(${iRange})",
		"description":"CDOTA_BaseNPC_SetDayTimeVisionRange:\nSet the base vision range.\nreturn void",
		"prefix":"SetDayTimeVisionRange"
	},
	"CDOTA_BaseNPC_SetDeathXP":
	{
		"body":"SetDeathXP(${iXPBounty})",
		"description":"CDOTA_BaseNPC_SetDeathXP:\nSet the XP bounty on this unit.\nreturn void",
		"prefix":"SetDeathXP"
	},
	"CDOTA_BaseNPC_SetForceAttackTarget":
	{
		"body":"SetForceAttackTarget(${hNPC})",
		"description":"CDOTA_BaseNPC_SetForceAttackTarget:\n\nreturn void",
		"prefix":"SetForceAttackTarget"
	},
	"CDOTA_BaseNPC_SetForceAttackTargetAlly":
	{
		"body":"SetForceAttackTargetAlly(${hNPC})",
		"description":"CDOTA_BaseNPC_SetForceAttackTargetAlly:\n\nreturn void",
		"prefix":"SetForceAttackTargetAlly"
	},
	"CDOTA_BaseNPC_SetHasInventory":
	{
		"body":"SetHasInventory(${bHasInventory})",
		"description":"CDOTA_BaseNPC_SetHasInventory:\nSet if this unit has an inventory.\nreturn void",
		"prefix":"SetHasInventory"
	},
	"CDOTA_BaseNPC_SetHullRadius":
	{
		"body":"SetHullRadius(${flHullRadius})",
		"description":"CDOTA_BaseNPC_SetHullRadius:\nSet the collision hull radius of this NPC.\nreturn void",
		"prefix":"SetHullRadius"
	},
	"CDOTA_BaseNPC_SetIdleAcquire":
	{
		"body":"SetIdleAcquire(${bIdleAcquire})",
		"description":"CDOTA_BaseNPC_SetIdleAcquire:\n\nreturn void",
		"prefix":"SetIdleAcquire"
	},
	"CDOTA_BaseNPC_SetInitialGoalEntity":
	{
		"body":"SetInitialGoalEntity(${hGoal})",
		"description":"CDOTA_BaseNPC_SetInitialGoalEntity:\nSets the initial waypoint goal for this NPC.\nreturn void",
		"prefix":"SetInitialGoalEntity"
	},
	"CDOTA_BaseNPC_SetInitialGoalPosition":
	{
		"body":"SetInitialGoalPosition(${vPosition})",
		"description":"CDOTA_BaseNPC_SetInitialGoalPosition:\nSet waypoint position for this NPC.\nreturn void",
		"prefix":"SetInitialGoalPosition"
	},
	"CDOTA_BaseNPC_SetMana":
	{
		"body":"SetMana(${flMana})",
		"description":"CDOTA_BaseNPC_SetMana:\nSet the mana on this unit.\nreturn void",
		"prefix":"SetMana"
	},
	"CDOTA_BaseNPC_SetMaximumGoldBounty":
	{
		"body":"SetMaximumGoldBounty(${iGoldBountyMax})",
		"description":"CDOTA_BaseNPC_SetMaximumGoldBounty:\nSet the maximum gold bounty for this unit.\nreturn void",
		"prefix":"SetMaximumGoldBounty"
	},
	"CDOTA_BaseNPC_SetMinimumGoldBounty":
	{
		"body":"SetMinimumGoldBounty(${iGoldBountyMin})",
		"description":"CDOTA_BaseNPC_SetMinimumGoldBounty:\nSet the minimum gold bounty for this unit.\nreturn void",
		"prefix":"SetMinimumGoldBounty"
	},
	"CDOTA_BaseNPC_SetModifierStackCount":
	{
		"body":"SetModifierStackCount(${pszScriptName}, ${hCaster}, ${nStackCount})",
		"description":"CDOTA_BaseNPC_SetModifierStackCount:\nSets the stack count of a given modifier.\nreturn void",
		"prefix":"SetModifierStackCount"
	},
	"CDOTA_BaseNPC_SetMoveCapability":
	{
		"body":"SetMoveCapability(${iMoveCapabilities})",
		"description":"CDOTA_BaseNPC_SetMoveCapability:\n\nreturn void",
		"prefix":"SetMoveCapability"
	},
	"CDOTA_BaseNPC_SetMustReachEachGoalEntity":
	{
		"body":"SetMustReachEachGoalEntity(${must})",
		"description":"CDOTA_BaseNPC_SetMustReachEachGoalEntity:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.\nreturn void",
		"prefix":"SetMustReachEachGoalEntity"
	},
	"CDOTA_BaseNPC_SetNeverMoveToClearSpace":
	{
		"body":"SetNeverMoveToClearSpace(${neverMoveToClearSpace})",
		"description":"CDOTA_BaseNPC_SetNeverMoveToClearSpace:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases.\nreturn void",
		"prefix":"SetNeverMoveToClearSpace"
	},
	"CDOTA_BaseNPC_SetNightTimeVisionRange":
	{
		"body":"SetNightTimeVisionRange(${iRange})",
		"description":"CDOTA_BaseNPC_SetNightTimeVisionRange:\nReturns the vision range after modifiers.\nreturn void",
		"prefix":"SetNightTimeVisionRange"
	},
	"CDOTA_BaseNPC_SetOrigin":
	{
		"body":"SetOrigin(${vLocation})",
		"description":"CDOTA_BaseNPC_SetOrigin:\nSet the unit's origin.\nreturn void",
		"prefix":"SetOrigin"
	},
	"CDOTA_BaseNPC_SetOriginalModel":
	{
		"body":"SetOriginalModel(${pszModelName})",
		"description":"CDOTA_BaseNPC_SetOriginalModel:\nSets the original model of this entity, which it will tend to fall back to anytime its state changes.\nreturn void",
		"prefix":"SetOriginalModel"
	},
	"CDOTA_BaseNPC_SetPhysicalArmorBaseValue":
	{
		"body":"SetPhysicalArmorBaseValue(${flPhysicalArmorValue})",
		"description":"CDOTA_BaseNPC_SetPhysicalArmorBaseValue:\nSets base physical armor value.\nreturn void",
		"prefix":"SetPhysicalArmorBaseValue"
	},
	"CDOTA_BaseNPC_SetRangedProjectileName":
	{
		"body":"SetRangedProjectileName(${pProjectileName})",
		"description":"CDOTA_BaseNPC_SetRangedProjectileName:\n\nreturn void",
		"prefix":"SetRangedProjectileName"
	},
	"CDOTA_BaseNPC_SetRevealRadius":
	{
		"body":"SetRevealRadius(${revealRadius})",
		"description":"CDOTA_BaseNPC_SetRevealRadius:\nsets the client side map reveal radius for this unit\nreturn void",
		"prefix":"SetRevealRadius"
	},
	"CDOTA_BaseNPC_SetShouldDoFlyHeightVisual":
	{
		"body":"SetShouldDoFlyHeightVisual(${bShouldVisuallyFly})",
		"description":"CDOTA_BaseNPC_SetShouldDoFlyHeightVisual:\n\nreturn void",
		"prefix":"SetShouldDoFlyHeightVisual"
	},
	"CDOTA_BaseNPC_SetStolenScepter":
	{
		"body":"SetStolenScepter(${bStolenScepter})",
		"description":"CDOTA_BaseNPC_SetStolenScepter:\n\nreturn void",
		"prefix":"SetStolenScepter"
	},
	"CDOTA_BaseNPC_SetUnitCanRespawn":
	{
		"body":"SetUnitCanRespawn(${bCanRespawn})",
		"description":"CDOTA_BaseNPC_SetUnitCanRespawn:\n\nreturn void",
		"prefix":"SetUnitCanRespawn"
	},
	"CDOTA_BaseNPC_SetUnitName":
	{
		"body":"SetUnitName(${pName})",
		"description":"CDOTA_BaseNPC_SetUnitName:\n\nreturn void",
		"prefix":"SetUnitName"
	},
	"CDOTA_BaseNPC_ShouldIdleAcquire":
	{
		"body":"ShouldIdleAcquire()",
		"description":"CDOTA_BaseNPC_ShouldIdleAcquire:\n\nreturn bool",
		"prefix":"ShouldIdleAcquire"
	},
	"CDOTA_BaseNPC_SpendMana":
	{
		"body":"SpendMana(${flManaSpent}, ${hAbility})",
		"description":"CDOTA_BaseNPC_SpendMana:\nSpend mana from this unit, this can be used for spending mana from abilities or item usage.\nreturn void",
		"prefix":"SpendMana"
	},
	"CDOTA_BaseNPC_StartGesture":
	{
		"body":"StartGesture(${nActivity})",
		"description":"CDOTA_BaseNPC_StartGesture:\nAdd the given gesture activity.\nreturn void",
		"prefix":"StartGesture"
	},
	"CDOTA_BaseNPC_StartGestureWithPlaybackRate":
	{
		"body":"StartGestureWithPlaybackRate(${nActivity}, ${flRate})",
		"description":"CDOTA_BaseNPC_StartGestureWithPlaybackRate:\nAdd the given gesture activity with a playback rate override.\nreturn void",
		"prefix":"StartGestureWithPlaybackRate"
	},
	"CDOTA_BaseNPC_Stop":
	{
		"body":"Stop()",
		"description":"CDOTA_BaseNPC_Stop:\nStop the current order.\nreturn void",
		"prefix":"Stop"
	},
	"CDOTA_BaseNPC_StopFacing":
	{
		"body":"StopFacing()",
		"description":"CDOTA_BaseNPC_StopFacing:\n\nreturn void",
		"prefix":"StopFacing"
	},
	"CDOTA_BaseNPC_SwapAbilities":
	{
		"body":"SwapAbilities(${pAbilityName1}, ${pAbilityName2}, ${bEnable1}, ${bEnable2})",
		"description":"CDOTA_BaseNPC_SwapAbilities:\nSwaps the slots of the two passed abilities and sets them enabled/disabled.\nreturn void",
		"prefix":"SwapAbilities"
	},
	"CDOTA_BaseNPC_SwapItems":
	{
		"body":"SwapItems(${nSlot1}, ${nSlot2})",
		"description":"CDOTA_BaseNPC_SwapItems:\nSwap the contents of two item slots (slot1, slot2)\nreturn void",
		"prefix":"SwapItems"
	},
	"CDOTA_BaseNPC_TakeItem":
	{
		"body":"TakeItem(${hItem})",
		"description":"CDOTA_BaseNPC_TakeItem:\nRemoved the passed item from this unit's inventory.\nreturn handle",
		"prefix":"TakeItem"
	},
	"CDOTA_BaseNPC_TimeUntilNextAttack":
	{
		"body":"TimeUntilNextAttack()",
		"description":"CDOTA_BaseNPC_TimeUntilNextAttack:\n\nreturn float",
		"prefix":"TimeUntilNextAttack"
	},
	"CDOTA_BaseNPC_TriggerModifierDodge":
	{
		"body":"TriggerModifierDodge()",
		"description":"CDOTA_BaseNPC_TriggerModifierDodge:\n\nreturn bool",
		"prefix":"TriggerModifierDodge"
	},
	"CDOTA_BaseNPC_TriggerSpellAbsorb":
	{
		"body":"TriggerSpellAbsorb(${hAbility})",
		"description":"CDOTA_BaseNPC_TriggerSpellAbsorb:\n\nreturn bool",
		"prefix":"TriggerSpellAbsorb"
	},
	"CDOTA_BaseNPC_TriggerSpellReflect":
	{
		"body":"TriggerSpellReflect(${hAbility})",
		"description":"CDOTA_BaseNPC_TriggerSpellReflect:\nTrigger the Lotus Orb-like effect.(hAbility)\nreturn void",
		"prefix":"TriggerSpellReflect"
	},
	"CDOTA_BaseNPC_UnHideAbilityToSlot":
	{
		"body":"UnHideAbilityToSlot(${pszAbilityName}, ${pszReplacedAbilityName})",
		"description":"CDOTA_BaseNPC_UnHideAbilityToSlot:\nMakes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot.\nreturn void",
		"prefix":"UnHideAbilityToSlot"
	},
	"CDOTA_BaseNPC_UnitCanRespawn":
	{
		"body":"UnitCanRespawn()",
		"description":"CDOTA_BaseNPC_UnitCanRespawn:\n\nreturn bool",
		"prefix":"UnitCanRespawn"
	},
	"CDOTA_BaseNPC_Building_GetInvulnCount":
	{
		"body":"GetInvulnCount()",
		"description":"CDOTA_BaseNPC_Building_GetInvulnCount:\nGet the invulnerability count for a building.\nreturn int",
		"prefix":"GetInvulnCount"
	},
	"CDOTA_BaseNPC_Building_SetInvulnCount":
	{
		"body":"SetInvulnCount(${nInvulnCount})",
		"description":"CDOTA_BaseNPC_Building_SetInvulnCount:\nSet the invulnerability counter of this building.\nreturn void",
		"prefix":"SetInvulnCount"
	},
	"CDOTA_BaseNPC_Creature_AddItemDrop":
	{
		"body":"AddItemDrop(${hDropData})",
		"description":"CDOTA_BaseNPC_Creature_AddItemDrop:\nAdd the specified item drop to this creature.\nreturn void",
		"prefix":"AddItemDrop"
	},
	"CDOTA_BaseNPC_Creature_CreatureLevelUp":
	{
		"body":"CreatureLevelUp(${iLevels})",
		"description":"CDOTA_BaseNPC_Creature_CreatureLevelUp:\nLevel the creature up by the specified number of levels\nreturn void",
		"prefix":"CreatureLevelUp"
	},
	"CDOTA_BaseNPC_Creature_IsChampion":
	{
		"body":"IsChampion()",
		"description":"CDOTA_BaseNPC_Creature_IsChampion:\nIs this unit a champion?\nreturn bool",
		"prefix":"IsChampion"
	},
	"CDOTA_BaseNPC_Creature_RemoveAllItemDrops":
	{
		"body":"RemoveAllItemDrops()",
		"description":"CDOTA_BaseNPC_Creature_RemoveAllItemDrops:\nRemove all item drops from this creature.\nreturn void",
		"prefix":"RemoveAllItemDrops"
	},
	"CDOTA_BaseNPC_Creature_SetArmorGain":
	{
		"body":"SetArmorGain(${flArmorGain})",
		"description":"CDOTA_BaseNPC_Creature_SetArmorGain:\nSet the armor gained per level on this creature.\nreturn void",
		"prefix":"SetArmorGain"
	},
	"CDOTA_BaseNPC_Creature_SetAttackTimeGain":
	{
		"body":"SetAttackTimeGain(${flAttackTimeGain})",
		"description":"CDOTA_BaseNPC_Creature_SetAttackTimeGain:\nSet the attack time gained per level on this creature.\nreturn void",
		"prefix":"SetAttackTimeGain"
	},
	"CDOTA_BaseNPC_Creature_SetBountyGain":
	{
		"body":"SetBountyGain(${nBountyGain})",
		"description":"CDOTA_BaseNPC_Creature_SetBountyGain:\nSet the bounty gold gained per level on this creature.\nreturn void",
		"prefix":"SetBountyGain"
	},
	"CDOTA_BaseNPC_Creature_SetChampion":
	{
		"body":"SetChampion(${bIsChampion})",
		"description":"CDOTA_BaseNPC_Creature_SetChampion:\nFlag this unit as a champion creature.\nreturn void",
		"prefix":"SetChampion"
	},
	"CDOTA_BaseNPC_Creature_SetDamageGain":
	{
		"body":"SetDamageGain(${nDamageGain})",
		"description":"CDOTA_BaseNPC_Creature_SetDamageGain:\nSet the damage gained per level on this creature.\nreturn void",
		"prefix":"SetDamageGain"
	},
	"CDOTA_BaseNPC_Creature_SetDisableResistanceGain":
	{
		"body":"SetDisableResistanceGain(${flDisableResistanceGain})",
		"description":"CDOTA_BaseNPC_Creature_SetDisableResistanceGain:\nSet the disable resistance gained per level on this creature.\nreturn void",
		"prefix":"SetDisableResistanceGain"
	},
	"CDOTA_BaseNPC_Creature_SetHPGain":
	{
		"body":"SetHPGain(${nHPGain})",
		"description":"CDOTA_BaseNPC_Creature_SetHPGain:\nSet the hit points gained per level on this creature.\nreturn void",
		"prefix":"SetHPGain"
	},
	"CDOTA_BaseNPC_Creature_SetHPRegenGain":
	{
		"body":"SetHPRegenGain(${flHPRegenGain})",
		"description":"CDOTA_BaseNPC_Creature_SetHPRegenGain:\nSet the hit points regen gained per level on this creature.\nreturn void",
		"prefix":"SetHPRegenGain"
	},
	"CDOTA_BaseNPC_Creature_SetMagicResistanceGain":
	{
		"body":"SetMagicResistanceGain(${flMagicResistanceGain})",
		"description":"CDOTA_BaseNPC_Creature_SetMagicResistanceGain:\nSet the magic resistance gained per level on this creature.\nreturn void",
		"prefix":"SetMagicResistanceGain"
	},
	"CDOTA_BaseNPC_Creature_SetManaGain":
	{
		"body":"SetManaGain(${nManaGain})",
		"description":"CDOTA_BaseNPC_Creature_SetManaGain:\nSet the mana points gained per level on this creature.\nreturn void",
		"prefix":"SetManaGain"
	},
	"CDOTA_BaseNPC_Creature_SetManaRegenGain":
	{
		"body":"SetManaRegenGain(${flManaRegenGain})",
		"description":"CDOTA_BaseNPC_Creature_SetManaRegenGain:\nSet the mana points regen gained per level on this creature.\nreturn void",
		"prefix":"SetManaRegenGain"
	},
	"CDOTA_BaseNPC_Creature_SetMoveSpeedGain":
	{
		"body":"SetMoveSpeedGain(${nMoveSpeedGain})",
		"description":"CDOTA_BaseNPC_Creature_SetMoveSpeedGain:\nSet the move speed gained per level on this creature.\nreturn void",
		"prefix":"SetMoveSpeedGain"
	},
	"CDOTA_BaseNPC_Creature_SetRequiresReachingEndPath":
	{
		"body":"SetRequiresReachingEndPath(${bRequiresReachingEndPath})",
		"description":"CDOTA_BaseNPC_Creature_SetRequiresReachingEndPath:\nSet whether creatures require reaching their end path before becoming idle\nreturn void",
		"prefix":"SetRequiresReachingEndPath"
	},
	"CDOTA_BaseNPC_Creature_SetXPGain":
	{
		"body":"SetXPGain(${nXPGain})",
		"description":"CDOTA_BaseNPC_Creature_SetXPGain:\nSet the XP gained per level on this creature.\nreturn void",
		"prefix":"SetXPGain"
	},
	"CDOTA_BaseNPC_Hero_AddExperience":
	{
		"body":"AddExperience(${flXP}, ${nReason}, ${bApplyBotDifficultyScaling}, ${bIncrementTotal})",
		"description":"CDOTA_BaseNPC_Hero_AddExperience:\nParams: Float XP, Bool applyBotDifficultyScaling\nreturn bool",
		"prefix":"AddExperience"
	},
	"CDOTA_BaseNPC_Hero_Buyback":
	{
		"body":"Buyback()",
		"description":"CDOTA_BaseNPC_Hero_Buyback:\nSpend the gold and buyback with this hero.\nreturn void",
		"prefix":"Buyback"
	},
	"CDOTA_BaseNPC_Hero_CalculateStatBonus":
	{
		"body":"CalculateStatBonus()",
		"description":"CDOTA_BaseNPC_Hero_CalculateStatBonus:\nRecalculate all stats after the hero gains stats.\nreturn void",
		"prefix":"CalculateStatBonus"
	},
	"CDOTA_BaseNPC_Hero_CanEarnGold":
	{
		"body":"CanEarnGold()",
		"description":"CDOTA_BaseNPC_Hero_CanEarnGold:\nReturns boolean value result of buyback gold limit time less than game time.\nreturn bool",
		"prefix":"CanEarnGold"
	},
	"CDOTA_BaseNPC_Hero_ClearLastHitMultikill":
	{
		"body":"ClearLastHitMultikill()",
		"description":"CDOTA_BaseNPC_Hero_ClearLastHitMultikill:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"ClearLastHitMultikill"
	},
	"CDOTA_BaseNPC_Hero_ClearLastHitStreak":
	{
		"body":"ClearLastHitStreak()",
		"description":"CDOTA_BaseNPC_Hero_ClearLastHitStreak:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"ClearLastHitStreak"
	},
	"CDOTA_BaseNPC_Hero_ClearStreak":
	{
		"body":"ClearStreak()",
		"description":"CDOTA_BaseNPC_Hero_ClearStreak:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"ClearStreak"
	},
	"CDOTA_BaseNPC_Hero_GetAbilityPoints":
	{
		"body":"GetAbilityPoints()",
		"description":"CDOTA_BaseNPC_Hero_GetAbilityPoints:\nGets the current unspent ability points.\nreturn int",
		"prefix":"GetAbilityPoints"
	},
	"CDOTA_BaseNPC_Hero_GetAdditionalOwnedUnits":
	{
		"body":"GetAdditionalOwnedUnits()",
		"description":"CDOTA_BaseNPC_Hero_GetAdditionalOwnedUnits:\n\nreturn table",
		"prefix":"GetAdditionalOwnedUnits"
	},
	"CDOTA_BaseNPC_Hero_GetAgility":
	{
		"body":"GetAgility()",
		"description":"CDOTA_BaseNPC_Hero_GetAgility:\n\nreturn float",
		"prefix":"GetAgility"
	},
	"CDOTA_BaseNPC_Hero_GetAgilityGain":
	{
		"body":"GetAgilityGain()",
		"description":"CDOTA_BaseNPC_Hero_GetAgilityGain:\n\nreturn float",
		"prefix":"GetAgilityGain"
	},
	"CDOTA_BaseNPC_Hero_GetAssists":
	{
		"body":"GetAssists()",
		"description":"CDOTA_BaseNPC_Hero_GetAssists:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetAssists"
	},
	"CDOTA_BaseNPC_Hero_GetAttacker":
	{
		"body":"GetAttacker(${nIndex})",
		"description":"CDOTA_BaseNPC_Hero_GetAttacker:\n\nreturn int",
		"prefix":"GetAttacker"
	},
	"CDOTA_BaseNPC_Hero_GetBaseAgility":
	{
		"body":"GetBaseAgility()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseAgility:\n\nreturn float",
		"prefix":"GetBaseAgility"
	},
	"CDOTA_BaseNPC_Hero_GetBaseDamageMax":
	{
		"body":"GetBaseDamageMax()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseDamageMax:\nHero damage is also affected by attributes.\nreturn int",
		"prefix":"GetBaseDamageMax"
	},
	"CDOTA_BaseNPC_Hero_GetBaseDamageMin":
	{
		"body":"GetBaseDamageMin()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseDamageMin:\nHero damage is also affected by attributes.\nreturn int",
		"prefix":"GetBaseDamageMin"
	},
	"CDOTA_BaseNPC_Hero_GetBaseIntellect":
	{
		"body":"GetBaseIntellect()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseIntellect:\n\nreturn float",
		"prefix":"GetBaseIntellect"
	},
	"CDOTA_BaseNPC_Hero_GetBaseManaRegen":
	{
		"body":"GetBaseManaRegen()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseManaRegen:\nReturns the base mana regen.\nreturn float",
		"prefix":"GetBaseManaRegen"
	},
	"CDOTA_BaseNPC_Hero_GetBaseStrength":
	{
		"body":"GetBaseStrength()",
		"description":"CDOTA_BaseNPC_Hero_GetBaseStrength:\n\nreturn float",
		"prefix":"GetBaseStrength"
	},
	"CDOTA_BaseNPC_Hero_GetBonusDamageFromPrimaryStat":
	{
		"body":"GetBonusDamageFromPrimaryStat()",
		"description":"CDOTA_BaseNPC_Hero_GetBonusDamageFromPrimaryStat:\n\nreturn int",
		"prefix":"GetBonusDamageFromPrimaryStat"
	},
	"CDOTA_BaseNPC_Hero_GetBuybackCooldownTime":
	{
		"body":"GetBuybackCooldownTime()",
		"description":"CDOTA_BaseNPC_Hero_GetBuybackCooldownTime:\nReturn float value for the amount of time left on cooldown for this hero's buyback.\nreturn float",
		"prefix":"GetBuybackCooldownTime"
	},
	"CDOTA_BaseNPC_Hero_GetBuybackCost":
	{
		"body":"GetBuybackCost(${bReturnOldValues})",
		"description":"CDOTA_BaseNPC_Hero_GetBuybackCost:\nReturn integer value for the gold cost of a buyback.\nreturn int",
		"prefix":"GetBuybackCost"
	},
	"CDOTA_BaseNPC_Hero_GetBuybackGoldLimitTime":
	{
		"body":"GetBuybackGoldLimitTime()",
		"description":"CDOTA_BaseNPC_Hero_GetBuybackGoldLimitTime:\nReturns the amount of time gold gain is limited after buying back.\nreturn float",
		"prefix":"GetBuybackGoldLimitTime"
	},
	"CDOTA_BaseNPC_Hero_GetCurrentXP":
	{
		"body":"GetCurrentXP()",
		"description":"CDOTA_BaseNPC_Hero_GetCurrentXP:\nReturns the amount of XP \nreturn int",
		"prefix":"GetCurrentXP"
	},
	"CDOTA_BaseNPC_Hero_GetDeathGoldCost":
	{
		"body":"GetDeathGoldCost()",
		"description":"CDOTA_BaseNPC_Hero_GetDeathGoldCost:\n\nreturn int",
		"prefix":"GetDeathGoldCost"
	},
	"CDOTA_BaseNPC_Hero_GetDeaths":
	{
		"body":"GetDeaths()",
		"description":"CDOTA_BaseNPC_Hero_GetDeaths:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetDeaths"
	},
	"CDOTA_BaseNPC_Hero_GetDenies":
	{
		"body":"GetDenies()",
		"description":"CDOTA_BaseNPC_Hero_GetDenies:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetDenies"
	},
	"CDOTA_BaseNPC_Hero_GetGold":
	{
		"body":"GetGold()",
		"description":"CDOTA_BaseNPC_Hero_GetGold:\nReturns gold amount for the player owning this hero\nreturn int",
		"prefix":"GetGold"
	},
	"CDOTA_BaseNPC_Hero_GetGoldBounty":
	{
		"body":"GetGoldBounty()",
		"description":"CDOTA_BaseNPC_Hero_GetGoldBounty:\n\nreturn int",
		"prefix":"GetGoldBounty"
	},
	"CDOTA_BaseNPC_Hero_GetIncreasedAttackSpeed":
	{
		"body":"GetIncreasedAttackSpeed()",
		"description":"CDOTA_BaseNPC_Hero_GetIncreasedAttackSpeed:\nHero attack speed is also affected by agility.\nreturn float",
		"prefix":"GetIncreasedAttackSpeed"
	},
	"CDOTA_BaseNPC_Hero_GetIntellect":
	{
		"body":"GetIntellect()",
		"description":"CDOTA_BaseNPC_Hero_GetIntellect:\n\nreturn float",
		"prefix":"GetIntellect"
	},
	"CDOTA_BaseNPC_Hero_GetIntellectGain":
	{
		"body":"GetIntellectGain()",
		"description":"CDOTA_BaseNPC_Hero_GetIntellectGain:\n\nreturn float",
		"prefix":"GetIntellectGain"
	},
	"CDOTA_BaseNPC_Hero_GetKills":
	{
		"body":"GetKills()",
		"description":"CDOTA_BaseNPC_Hero_GetKills:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetKills"
	},
	"CDOTA_BaseNPC_Hero_GetLastHits":
	{
		"body":"GetLastHits()",
		"description":"CDOTA_BaseNPC_Hero_GetLastHits:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetLastHits"
	},
	"CDOTA_BaseNPC_Hero_GetMostRecentDamageTime":
	{
		"body":"GetMostRecentDamageTime()",
		"description":"CDOTA_BaseNPC_Hero_GetMostRecentDamageTime:\n\nreturn float",
		"prefix":"GetMostRecentDamageTime"
	},
	"CDOTA_BaseNPC_Hero_GetMultipleKillCount":
	{
		"body":"GetMultipleKillCount()",
		"description":"CDOTA_BaseNPC_Hero_GetMultipleKillCount:\n\nreturn int",
		"prefix":"GetMultipleKillCount"
	},
	"CDOTA_BaseNPC_Hero_GetNumAttackers":
	{
		"body":"GetNumAttackers()",
		"description":"CDOTA_BaseNPC_Hero_GetNumAttackers:\n\nreturn int",
		"prefix":"GetNumAttackers"
	},
	"CDOTA_BaseNPC_Hero_GetNumItemsInInventory":
	{
		"body":"GetNumItemsInInventory()",
		"description":"CDOTA_BaseNPC_Hero_GetNumItemsInInventory:\n\nreturn int",
		"prefix":"GetNumItemsInInventory"
	},
	"CDOTA_BaseNPC_Hero_GetNumItemsInStash":
	{
		"body":"GetNumItemsInStash()",
		"description":"CDOTA_BaseNPC_Hero_GetNumItemsInStash:\n\nreturn int",
		"prefix":"GetNumItemsInStash"
	},
	"CDOTA_BaseNPC_Hero_GetPhysicalArmorBaseValue":
	{
		"body":"GetPhysicalArmorBaseValue()",
		"description":"CDOTA_BaseNPC_Hero_GetPhysicalArmorBaseValue:\nHero armor is affected by attributes.\nreturn float",
		"prefix":"GetPhysicalArmorBaseValue"
	},
	"CDOTA_BaseNPC_Hero_GetPlayerID":
	{
		"body":"GetPlayerID()",
		"description":"CDOTA_BaseNPC_Hero_GetPlayerID:\nReturns player ID of the player owning this hero\nreturn int",
		"prefix":"GetPlayerID"
	},
	"CDOTA_BaseNPC_Hero_GetPrimaryAttribute":
	{
		"body":"GetPrimaryAttribute()",
		"description":"CDOTA_BaseNPC_Hero_GetPrimaryAttribute:\n0 = strength, 1 = agility, 2 = intelligence.\nreturn int",
		"prefix":"GetPrimaryAttribute"
	},
	"CDOTA_BaseNPC_Hero_GetPrimaryStatValue":
	{
		"body":"GetPrimaryStatValue()",
		"description":"CDOTA_BaseNPC_Hero_GetPrimaryStatValue:\n\nreturn float",
		"prefix":"GetPrimaryStatValue"
	},
	"CDOTA_BaseNPC_Hero_GetRespawnTime":
	{
		"body":"GetRespawnTime()",
		"description":"CDOTA_BaseNPC_Hero_GetRespawnTime:\n\nreturn float",
		"prefix":"GetRespawnTime"
	},
	"CDOTA_BaseNPC_Hero_GetRespawnsDisabled":
	{
		"body":"GetRespawnsDisabled()",
		"description":"CDOTA_BaseNPC_Hero_GetRespawnsDisabled:\nIs this hero prevented from respawning?\nreturn bool",
		"prefix":"GetRespawnsDisabled"
	},
	"CDOTA_BaseNPC_Hero_GetStreak":
	{
		"body":"GetStreak()",
		"description":"CDOTA_BaseNPC_Hero_GetStreak:\nValue is stored in PlayerResource.\nreturn int",
		"prefix":"GetStreak"
	},
	"CDOTA_BaseNPC_Hero_GetStrength":
	{
		"body":"GetStrength()",
		"description":"CDOTA_BaseNPC_Hero_GetStrength:\n\nreturn float",
		"prefix":"GetStrength"
	},
	"CDOTA_BaseNPC_Hero_GetStrengthGain":
	{
		"body":"GetStrengthGain()",
		"description":"CDOTA_BaseNPC_Hero_GetStrengthGain:\n\nreturn float",
		"prefix":"GetStrengthGain"
	},
	"CDOTA_BaseNPC_Hero_GetTimeUntilRespawn":
	{
		"body":"GetTimeUntilRespawn()",
		"description":"CDOTA_BaseNPC_Hero_GetTimeUntilRespawn:\n\nreturn float",
		"prefix":"GetTimeUntilRespawn"
	},
	"CDOTA_BaseNPC_Hero_GetTogglableWearable":
	{
		"body":"GetTogglableWearable(${nSlotType})",
		"description":"CDOTA_BaseNPC_Hero_GetTogglableWearable:\nGet wearable entity in slot (slot)\nreturn handle",
		"prefix":"GetTogglableWearable"
	},
	"CDOTA_BaseNPC_Hero_HasAnyAvailableInventorySpace":
	{
		"body":"HasAnyAvailableInventorySpace()",
		"description":"CDOTA_BaseNPC_Hero_HasAnyAvailableInventorySpace:\n\nreturn bool",
		"prefix":"HasAnyAvailableInventorySpace"
	},
	"CDOTA_BaseNPC_Hero_HasFlyingVision":
	{
		"body":"HasFlyingVision()",
		"description":"CDOTA_BaseNPC_Hero_HasFlyingVision:\n\nreturn bool",
		"prefix":"HasFlyingVision"
	},
	"CDOTA_BaseNPC_Hero_HasOwnerAbandoned":
	{
		"body":"HasOwnerAbandoned()",
		"description":"CDOTA_BaseNPC_Hero_HasOwnerAbandoned:\n\nreturn bool",
		"prefix":"HasOwnerAbandoned"
	},
	"CDOTA_BaseNPC_Hero_HasRoomForItem":
	{
		"body":"HasRoomForItem(${pItemName}, ${bIncludeStashCombines}, ${bAllowSelling})",
		"description":"CDOTA_BaseNPC_Hero_HasRoomForItem:\nArgs: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling\nreturn int",
		"prefix":"HasRoomForItem"
	},
	"CDOTA_BaseNPC_Hero_HeroLevelUp":
	{
		"body":"HeroLevelUp(${bPlayEffects})",
		"description":"CDOTA_BaseNPC_Hero_HeroLevelUp:\nLevels up the hero, true or false to play effects.\nreturn void",
		"prefix":"HeroLevelUp"
	},
	"CDOTA_BaseNPC_Hero_IncrementAssists":
	{
		"body":"IncrementAssists(${iKillerID})",
		"description":"CDOTA_BaseNPC_Hero_IncrementAssists:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementAssists"
	},
	"CDOTA_BaseNPC_Hero_IncrementDeaths":
	{
		"body":"IncrementDeaths(${iKillerID})",
		"description":"CDOTA_BaseNPC_Hero_IncrementDeaths:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementDeaths"
	},
	"CDOTA_BaseNPC_Hero_IncrementDenies":
	{
		"body":"IncrementDenies()",
		"description":"CDOTA_BaseNPC_Hero_IncrementDenies:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementDenies"
	},
	"CDOTA_BaseNPC_Hero_IncrementKills":
	{
		"body":"IncrementKills(${iVictimID})",
		"description":"CDOTA_BaseNPC_Hero_IncrementKills:\nPassed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementKills"
	},
	"CDOTA_BaseNPC_Hero_IncrementLastHitMultikill":
	{
		"body":"IncrementLastHitMultikill()",
		"description":"CDOTA_BaseNPC_Hero_IncrementLastHitMultikill:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementLastHitMultikill"
	},
	"CDOTA_BaseNPC_Hero_IncrementLastHitStreak":
	{
		"body":"IncrementLastHitStreak()",
		"description":"CDOTA_BaseNPC_Hero_IncrementLastHitStreak:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementLastHitStreak"
	},
	"CDOTA_BaseNPC_Hero_IncrementLastHits":
	{
		"body":"IncrementLastHits()",
		"description":"CDOTA_BaseNPC_Hero_IncrementLastHits:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementLastHits"
	},
	"CDOTA_BaseNPC_Hero_IncrementNearbyCreepDeaths":
	{
		"body":"IncrementNearbyCreepDeaths()",
		"description":"CDOTA_BaseNPC_Hero_IncrementNearbyCreepDeaths:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementNearbyCreepDeaths"
	},
	"CDOTA_BaseNPC_Hero_IncrementStreak":
	{
		"body":"IncrementStreak()",
		"description":"CDOTA_BaseNPC_Hero_IncrementStreak:\nValue is stored in PlayerResource.\nreturn void",
		"prefix":"IncrementStreak"
	},
	"CDOTA_BaseNPC_Hero_IsBuybackDisabledByReapersScythe":
	{
		"body":"IsBuybackDisabledByReapersScythe()",
		"description":"CDOTA_BaseNPC_Hero_IsBuybackDisabledByReapersScythe:\n\nreturn bool",
		"prefix":"IsBuybackDisabledByReapersScythe"
	},
	"CDOTA_BaseNPC_Hero_IsReincarnating":
	{
		"body":"IsReincarnating()",
		"description":"CDOTA_BaseNPC_Hero_IsReincarnating:\n\nreturn bool",
		"prefix":"IsReincarnating"
	},
	"CDOTA_BaseNPC_Hero_IsStashEnabled":
	{
		"body":"IsStashEnabled()",
		"description":"CDOTA_BaseNPC_Hero_IsStashEnabled:\n\nreturn bool",
		"prefix":"IsStashEnabled"
	},
	"CDOTA_BaseNPC_Hero_KilledHero":
	{
		"body":"KilledHero(${hHero}, ${hInflictor})",
		"description":"CDOTA_BaseNPC_Hero_KilledHero:\nArgs: Hero, Inflictor\nreturn void",
		"prefix":"KilledHero"
	},
	"CDOTA_BaseNPC_Hero_ModifyAgility":
	{
		"body":"ModifyAgility(${flNewAgility})",
		"description":"CDOTA_BaseNPC_Hero_ModifyAgility:\nAdds passed value to base attribute value, then calls CalculateStatBonus.\nreturn void",
		"prefix":"ModifyAgility"
	},
	"CDOTA_BaseNPC_Hero_ModifyGold":
	{
		"body":"ModifyGold(${iGoldChange}, ${bReliable}, ${iReason})",
		"description":"CDOTA_BaseNPC_Hero_ModifyGold:\nGives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason\nreturn int",
		"prefix":"ModifyGold"
	},
	"CDOTA_BaseNPC_Hero_ModifyIntellect":
	{
		"body":"ModifyIntellect(${flNewIntellect})",
		"description":"CDOTA_BaseNPC_Hero_ModifyIntellect:\nAdds passed value to base attribute value, then calls CalculateStatBonus.\nreturn void",
		"prefix":"ModifyIntellect"
	},
	"CDOTA_BaseNPC_Hero_ModifyStrength":
	{
		"body":"ModifyStrength(${flNewStrength})",
		"description":"CDOTA_BaseNPC_Hero_ModifyStrength:\nAdds passed value to base attribute value, then calls CalculateStatBonus.\nreturn void",
		"prefix":"ModifyStrength"
	},
	"CDOTA_BaseNPC_Hero_PerformTaunt":
	{
		"body":"PerformTaunt()",
		"description":"CDOTA_BaseNPC_Hero_PerformTaunt:\n\nreturn void",
		"prefix":"PerformTaunt"
	},
	"CDOTA_BaseNPC_Hero_RecordLastHit":
	{
		"body":"RecordLastHit()",
		"description":"CDOTA_BaseNPC_Hero_RecordLastHit:\n\nreturn void",
		"prefix":"RecordLastHit"
	},
	"CDOTA_BaseNPC_Hero_RespawnHero":
	{
		"body":"RespawnHero(${bBuyBack}, ${bRespawnPenalty})",
		"description":"CDOTA_BaseNPC_Hero_RespawnHero:\nRespawn this hero.\nreturn void",
		"prefix":"RespawnHero"
	},
	"CDOTA_BaseNPC_Hero_SetAbilityPoints":
	{
		"body":"SetAbilityPoints(${iPoints})",
		"description":"CDOTA_BaseNPC_Hero_SetAbilityPoints:\nSets the current unspent ability points.\nreturn void",
		"prefix":"SetAbilityPoints"
	},
	"CDOTA_BaseNPC_Hero_SetBaseAgility":
	{
		"body":"SetBaseAgility(${flAgility})",
		"description":"CDOTA_BaseNPC_Hero_SetBaseAgility:\n\nreturn void",
		"prefix":"SetBaseAgility"
	},
	"CDOTA_BaseNPC_Hero_SetBaseIntellect":
	{
		"body":"SetBaseIntellect(${flIntellect})",
		"description":"CDOTA_BaseNPC_Hero_SetBaseIntellect:\n\nreturn void",
		"prefix":"SetBaseIntellect"
	},
	"CDOTA_BaseNPC_Hero_SetBaseStrength":
	{
		"body":"SetBaseStrength(${flStrength})",
		"description":"CDOTA_BaseNPC_Hero_SetBaseStrength:\n\nreturn void",
		"prefix":"SetBaseStrength"
	},
	"CDOTA_BaseNPC_Hero_SetBotDifficulty":
	{
		"body":"SetBotDifficulty(${nDifficulty})",
		"description":"CDOTA_BaseNPC_Hero_SetBotDifficulty:\n\nreturn void",
		"prefix":"SetBotDifficulty"
	},
	"CDOTA_BaseNPC_Hero_SetBuyBackDisabledByReapersScythe":
	{
		"body":"SetBuyBackDisabledByReapersScythe(${bBuybackDisabled})",
		"description":"CDOTA_BaseNPC_Hero_SetBuyBackDisabledByReapersScythe:\n\nreturn void",
		"prefix":"SetBuyBackDisabledByReapersScythe"
	},
	"CDOTA_BaseNPC_Hero_SetBuybackCooldownTime":
	{
		"body":"SetBuybackCooldownTime(${flTime})",
		"description":"CDOTA_BaseNPC_Hero_SetBuybackCooldownTime:\nSets the buyback cooldown time.\nreturn void",
		"prefix":"SetBuybackCooldownTime"
	},
	"CDOTA_BaseNPC_Hero_SetBuybackGoldLimitTime":
	{
		"body":"SetBuybackGoldLimitTime(${flTime})",
		"description":"CDOTA_BaseNPC_Hero_SetBuybackGoldLimitTime:\nSet the amount of time gold gain is limited after buying back.\nreturn void",
		"prefix":"SetBuybackGoldLimitTime"
	},
	"CDOTA_BaseNPC_Hero_SetCustomDeathXP":
	{
		"body":"SetCustomDeathXP(${iValue})",
		"description":"CDOTA_BaseNPC_Hero_SetCustomDeathXP:\nSets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!\nreturn void",
		"prefix":"SetCustomDeathXP"
	},
	"CDOTA_BaseNPC_Hero_SetGold":
	{
		"body":"SetGold(${iGold}, ${bReliable})",
		"description":"CDOTA_BaseNPC_Hero_SetGold:\nSets the gold amount for the player owning this hero\nreturn void",
		"prefix":"SetGold"
	},
	"CDOTA_BaseNPC_Hero_SetPlayerID":
	{
		"body":"SetPlayerID(${iPlayerID})",
		"description":"CDOTA_BaseNPC_Hero_SetPlayerID:\n\nreturn void",
		"prefix":"SetPlayerID"
	},
	"CDOTA_BaseNPC_Hero_SetPrimaryAttribute":
	{
		"body":"SetPrimaryAttribute(${nPrimaryAttribute})",
		"description":"CDOTA_BaseNPC_Hero_SetPrimaryAttribute:\nSet this hero's primary attribute value.\nreturn void",
		"prefix":"SetPrimaryAttribute"
	},
	"CDOTA_BaseNPC_Hero_SetRespawnPosition":
	{
		"body":"SetRespawnPosition(${vOrigin})",
		"description":"CDOTA_BaseNPC_Hero_SetRespawnPosition:\n\nreturn void",
		"prefix":"SetRespawnPosition"
	},
	"CDOTA_BaseNPC_Hero_SetRespawnsDisabled":
	{
		"body":"SetRespawnsDisabled(${bDisableRespawns})",
		"description":"CDOTA_BaseNPC_Hero_SetRespawnsDisabled:\nPrevent this hero from respawning.\nreturn void",
		"prefix":"SetRespawnsDisabled"
	},
	"CDOTA_BaseNPC_Hero_SetStashEnabled":
	{
		"body":"SetStashEnabled(${bEnabled})",
		"description":"CDOTA_BaseNPC_Hero_SetStashEnabled:\n\nreturn void",
		"prefix":"SetStashEnabled"
	},
	"CDOTA_BaseNPC_Hero_SetTimeUntilRespawn":
	{
		"body":"SetTimeUntilRespawn(${time})",
		"description":"CDOTA_BaseNPC_Hero_SetTimeUntilRespawn:\n\nreturn void",
		"prefix":"SetTimeUntilRespawn"
	},
	"CDOTA_BaseNPC_Hero_ShouldDoFlyHeightVisual":
	{
		"body":"ShouldDoFlyHeightVisual()",
		"description":"CDOTA_BaseNPC_Hero_ShouldDoFlyHeightVisual:\n\nreturn bool",
		"prefix":"ShouldDoFlyHeightVisual"
	},
	"CDOTA_BaseNPC_Hero_SpendGold":
	{
		"body":"SpendGold(${iCost}, ${iReason})",
		"description":"CDOTA_BaseNPC_Hero_SpendGold:\nArgs: int nGold, int nReason\nreturn void",
		"prefix":"SpendGold"
	},
	"CDOTA_BaseNPC_Hero_UnitCanRespawn":
	{
		"body":"UnitCanRespawn()",
		"description":"CDOTA_BaseNPC_Hero_UnitCanRespawn:\n\nreturn bool",
		"prefix":"UnitCanRespawn"
	},
	"CDOTA_BaseNPC_Hero_UpgradeAbility":
	{
		"body":"UpgradeAbility(${hAbility})",
		"description":"CDOTA_BaseNPC_Hero_UpgradeAbility:\nThis upgrades the passed ability if it exists and the hero has enough ability points.\nreturn void",
		"prefix":"UpgradeAbility"
	},
	"CDOTA_BaseNPC_Hero_WillReincarnate":
	{
		"body":"WillReincarnate()",
		"description":"CDOTA_BaseNPC_Hero_WillReincarnate:\n\nreturn bool",
		"prefix":"WillReincarnate"
	},
	"CDOTA_BaseNPC_Shop_GetShopType":
	{
		"body":"GetShopType()",
		"description":"CDOTA_BaseNPC_Shop_GetShopType:\nGet the DOTA_SHOP_TYPE\nreturn int",
		"prefix":"GetShopType"
	},
	"CDOTA_BaseNPC_Shop_SetShopType":
	{
		"body":"SetShopType(${eShopType})",
		"description":"CDOTA_BaseNPC_Shop_SetShopType:\nSet the DOTA_SHOP_TYPE.\nreturn void",
		"prefix":"SetShopType"
	},
	"CDOTA_BaseNPC_Trap_Ward_GetTrapTarget":
	{
		"body":"GetTrapTarget()",
		"description":"CDOTA_BaseNPC_Trap_Ward_GetTrapTarget:\nGet the trap target for this entity.\nreturn Vector",
		"prefix":"GetTrapTarget"
	},
	"CDOTA_BaseNPC_Trap_Ward_SetAnimation":
	{
		"body":"SetAnimation(${pAnimation})",
		"description":"CDOTA_BaseNPC_Trap_Ward_SetAnimation:\nSet the animation sequence for this entity.\nreturn void",
		"prefix":"SetAnimation"
	},
	"CDOTA_Buff_AddParticle":
	{
		"body":"AddParticle(${i}, ${bDestroyImmediately}, ${bStatusEffect}, ${iPriority}, ${bHeroEffect}, ${bOverheadEffect})",
		"description":"CDOTA_Buff_AddParticle:\n(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect\nreturn void",
		"prefix":"AddParticle"
	},
	"CDOTA_Buff_DecrementStackCount":
	{
		"body":"DecrementStackCount()",
		"description":"CDOTA_Buff_DecrementStackCount:\nDecrease this modifier's stack count by 1.\nreturn void",
		"prefix":"DecrementStackCount"
	},
	"CDOTA_Buff_Destroy":
	{
		"body":"Destroy()",
		"description":"CDOTA_Buff_Destroy:\nRun all associated destroy functions, then remove the modifier.\nreturn void",
		"prefix":"Destroy"
	},
	"CDOTA_Buff_ForceRefresh":
	{
		"body":"ForceRefresh()",
		"description":"CDOTA_Buff_ForceRefresh:\nRun all associated refresh functions on this modifier as if it was re-applied.\nreturn void",
		"prefix":"ForceRefresh"
	},
	"CDOTA_Buff_GetAbility":
	{
		"body":"GetAbility()",
		"description":"CDOTA_Buff_GetAbility:\nGet the ability that generated the modifier.\nreturn handle",
		"prefix":"GetAbility"
	},
	"CDOTA_Buff_GetAuraDuration":
	{
		"body":"GetAuraDuration()",
		"description":"CDOTA_Buff_GetAuraDuration:\nReturns aura stickiness (default 0.5)\nreturn float",
		"prefix":"GetAuraDuration"
	},
	"CDOTA_Buff_GetCaster":
	{
		"body":"GetCaster()",
		"description":"CDOTA_Buff_GetCaster:\nGet the owner of the ability responsible for the modifier.\nreturn handle",
		"prefix":"GetCaster"
	},
	"CDOTA_Buff_GetClass":
	{
		"body":"GetClass()",
		"description":"CDOTA_Buff_GetClass:\n\nreturn string",
		"prefix":"GetClass"
	},
	"CDOTA_Buff_GetCreationTime":
	{
		"body":"GetCreationTime()",
		"description":"CDOTA_Buff_GetCreationTime:\n\nreturn float",
		"prefix":"GetCreationTime"
	},
	"CDOTA_Buff_GetDieTime":
	{
		"body":"GetDieTime()",
		"description":"CDOTA_Buff_GetDieTime:\n\nreturn float",
		"prefix":"GetDieTime"
	},
	"CDOTA_Buff_GetDuration":
	{
		"body":"GetDuration()",
		"description":"CDOTA_Buff_GetDuration:\n\nreturn float",
		"prefix":"GetDuration"
	},
	"CDOTA_Buff_GetElapsedTime":
	{
		"body":"GetElapsedTime()",
		"description":"CDOTA_Buff_GetElapsedTime:\n\nreturn float",
		"prefix":"GetElapsedTime"
	},
	"CDOTA_Buff_GetLastAppliedTime":
	{
		"body":"GetLastAppliedTime()",
		"description":"CDOTA_Buff_GetLastAppliedTime:\n\nreturn float",
		"prefix":"GetLastAppliedTime"
	},
	"CDOTA_Buff_GetName":
	{
		"body":"GetName()",
		"description":"CDOTA_Buff_GetName:\n\nreturn string",
		"prefix":"GetName"
	},
	"CDOTA_Buff_GetParent":
	{
		"body":"GetParent()",
		"description":"CDOTA_Buff_GetParent:\nGet the unit the modifier is parented to.\nreturn handle",
		"prefix":"GetParent"
	},
	"CDOTA_Buff_GetRemainingTime":
	{
		"body":"GetRemainingTime()",
		"description":"CDOTA_Buff_GetRemainingTime:\n\nreturn float",
		"prefix":"GetRemainingTime"
	},
	"CDOTA_Buff_GetStackCount":
	{
		"body":"GetStackCount()",
		"description":"CDOTA_Buff_GetStackCount:\n\nreturn int",
		"prefix":"GetStackCount"
	},
	"CDOTA_Buff_HasFunction":
	{
		"body":"HasFunction(${iFunction})",
		"description":"CDOTA_Buff_HasFunction:\n\nreturn bool",
		"prefix":"HasFunction"
	},
	"CDOTA_Buff_IncrementStackCount":
	{
		"body":"IncrementStackCount()",
		"description":"CDOTA_Buff_IncrementStackCount:\nIncrease this modifier's stack count by 1.\nreturn void",
		"prefix":"IncrementStackCount"
	},
	"CDOTA_Buff_IsStunDebuff":
	{
		"body":"IsStunDebuff()",
		"description":"CDOTA_Buff_IsStunDebuff:\n\nreturn bool",
		"prefix":"IsStunDebuff"
	},
	"CDOTA_Buff_SetDuration":
	{
		"body":"SetDuration(${flDuration}, ${bInformClient})",
		"description":"CDOTA_Buff_SetDuration:\n(flTime, bInformClients)\nreturn void",
		"prefix":"SetDuration"
	},
	"CDOTA_Buff_SetStackCount":
	{
		"body":"SetStackCount(${iCount})",
		"description":"CDOTA_Buff_SetStackCount:\n\nreturn void",
		"prefix":"SetStackCount"
	},
	"CDOTA_Buff_StartIntervalThink":
	{
		"body":"StartIntervalThink(${flInterval})",
		"description":"CDOTA_Buff_StartIntervalThink:\nStart this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1.\nreturn void",
		"prefix":"StartIntervalThink"
	},
	"CDOTA_CustomUIManager_DynamicHud_Create":
	{
		"body":"DynamicHud_Create(${s}, ${string_2}, ${string_3}, ${handle_4})",
		"description":"CDOTA_CustomUIManager_DynamicHud_Create:\nCreate a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )\nreturn void",
		"prefix":"DynamicHud_Create"
	},
	"CDOTA_CustomUIManager_DynamicHud_Destroy":
	{
		"body":"DynamicHud_Destroy(${intPlayerID/*-1meanseveryone*/}, ${stringElementID})",
		"description":"CDOTA_CustomUIManager_DynamicHud_Destroy:\nDestroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )\nreturn void",
		"prefix":"DynamicHud_Destroy"
	},
	"CDOTA_CustomUIManager_DynamicHud_SetDialogVariables":
	{
		"body":"DynamicHud_SetDialogVariables(${intPlayerID/*-1meanseveryone*/}, ${stringElementID}, ${tableDialogVariables})",
		"description":"CDOTA_CustomUIManager_DynamicHud_SetDialogVariables:\nAdd or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )\nreturn void",
		"prefix":"DynamicHud_SetDialogVariables"
	},
	"CDOTA_CustomUIManager_DynamicHud_SetVisible":
	{
		"body":"DynamicHud_SetVisible(${intPlayerID/*-1meanseveryone*/}, ${stringElementID}, ${boolVisible})",
		"description":"CDOTA_CustomUIManager_DynamicHud_SetVisible:\nToggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )\nreturn void",
		"prefix":"DynamicHud_SetVisible"
	},
	"CDOTA_Item_CanBeUsedOutOfInventory":
	{
		"body":"CanBeUsedOutOfInventory()",
		"description":"CDOTA_Item_CanBeUsedOutOfInventory:\n\nreturn bool",
		"prefix":"CanBeUsedOutOfInventory"
	},
	"CDOTA_Item_GetContainer":
	{
		"body":"GetContainer()",
		"description":"CDOTA_Item_GetContainer:\nGet the container for this item.\nreturn handle",
		"prefix":"GetContainer"
	},
	"CDOTA_Item_GetCost":
	{
		"body":"GetCost()",
		"description":"CDOTA_Item_GetCost:\n\nreturn int",
		"prefix":"GetCost"
	},
	"CDOTA_Item_GetCurrentCharges":
	{
		"body":"GetCurrentCharges()",
		"description":"CDOTA_Item_GetCurrentCharges:\nGet the number of charges this item currently has.\nreturn int",
		"prefix":"GetCurrentCharges"
	},
	"CDOTA_Item_GetInitialCharges":
	{
		"body":"GetInitialCharges()",
		"description":"CDOTA_Item_GetInitialCharges:\nGet the initial number of charges this item has.\nreturn int",
		"prefix":"GetInitialCharges"
	},
	"CDOTA_Item_GetItemState":
	{
		"body":"GetItemState()",
		"description":"CDOTA_Item_GetItemState:\nGets whether item is unequipped or ready.\nreturn int",
		"prefix":"GetItemState"
	},
	"CDOTA_Item_GetParent":
	{
		"body":"GetParent()",
		"description":"CDOTA_Item_GetParent:\nGet the parent for this item.\nreturn handle",
		"prefix":"GetParent"
	},
	"CDOTA_Item_GetPurchaseTime":
	{
		"body":"GetPurchaseTime()",
		"description":"CDOTA_Item_GetPurchaseTime:\nGet the purchase time of this item\nreturn float",
		"prefix":"GetPurchaseTime"
	},
	"CDOTA_Item_GetPurchaser":
	{
		"body":"GetPurchaser()",
		"description":"CDOTA_Item_GetPurchaser:\nGet the purchaser for this item.\nreturn handle",
		"prefix":"GetPurchaser"
	},
	"CDOTA_Item_GetShareability":
	{
		"body":"GetShareability()",
		"description":"CDOTA_Item_GetShareability:\n\nreturn int",
		"prefix":"GetShareability"
	},
	"CDOTA_Item_IsAlertableItem":
	{
		"body":"IsAlertableItem()",
		"description":"CDOTA_Item_IsAlertableItem:\n\nreturn bool",
		"prefix":"IsAlertableItem"
	},
	"CDOTA_Item_IsCastOnPickup":
	{
		"body":"IsCastOnPickup()",
		"description":"CDOTA_Item_IsCastOnPickup:\n\nreturn bool",
		"prefix":"IsCastOnPickup"
	},
	"CDOTA_Item_IsCombinable":
	{
		"body":"IsCombinable()",
		"description":"CDOTA_Item_IsCombinable:\n\nreturn bool",
		"prefix":"IsCombinable"
	},
	"CDOTA_Item_IsDisassemblable":
	{
		"body":"IsDisassemblable()",
		"description":"CDOTA_Item_IsDisassemblable:\n\nreturn bool",
		"prefix":"IsDisassemblable"
	},
	"CDOTA_Item_IsDroppable":
	{
		"body":"IsDroppable()",
		"description":"CDOTA_Item_IsDroppable:\n\nreturn bool",
		"prefix":"IsDroppable"
	},
	"CDOTA_Item_IsInBackpack":
	{
		"body":"IsInBackpack()",
		"description":"CDOTA_Item_IsInBackpack:\n\nreturn bool",
		"prefix":"IsInBackpack"
	},
	"CDOTA_Item_IsItem":
	{
		"body":"IsItem()",
		"description":"CDOTA_Item_IsItem:\n\nreturn bool",
		"prefix":"IsItem"
	},
	"CDOTA_Item_IsKillable":
	{
		"body":"IsKillable()",
		"description":"CDOTA_Item_IsKillable:\n\nreturn bool",
		"prefix":"IsKillable"
	},
	"CDOTA_Item_IsMuted":
	{
		"body":"IsMuted()",
		"description":"CDOTA_Item_IsMuted:\n\nreturn bool",
		"prefix":"IsMuted"
	},
	"CDOTA_Item_IsPermanent":
	{
		"body":"IsPermanent()",
		"description":"CDOTA_Item_IsPermanent:\n\nreturn bool",
		"prefix":"IsPermanent"
	},
	"CDOTA_Item_IsPurchasable":
	{
		"body":"IsPurchasable()",
		"description":"CDOTA_Item_IsPurchasable:\n\nreturn bool",
		"prefix":"IsPurchasable"
	},
	"CDOTA_Item_IsRecipe":
	{
		"body":"IsRecipe()",
		"description":"CDOTA_Item_IsRecipe:\n\nreturn bool",
		"prefix":"IsRecipe"
	},
	"CDOTA_Item_IsRecipeGenerated":
	{
		"body":"IsRecipeGenerated()",
		"description":"CDOTA_Item_IsRecipeGenerated:\n\nreturn bool",
		"prefix":"IsRecipeGenerated"
	},
	"CDOTA_Item_IsSellable":
	{
		"body":"IsSellable()",
		"description":"CDOTA_Item_IsSellable:\n\nreturn bool",
		"prefix":"IsSellable"
	},
	"CDOTA_Item_IsStackable":
	{
		"body":"IsStackable()",
		"description":"CDOTA_Item_IsStackable:\n\nreturn bool",
		"prefix":"IsStackable"
	},
	"CDOTA_Item_LaunchLoot":
	{
		"body":"LaunchLoot(${bAutoUse}, ${flHeight}, ${flDuration}, ${vEndPoint})",
		"description":"CDOTA_Item_LaunchLoot:\n\nreturn void",
		"prefix":"LaunchLoot"
	},
	"CDOTA_Item_LaunchLootInitialHeight":
	{
		"body":"LaunchLootInitialHeight(${bAutoUse}, ${flInitialHeight}, ${flLaunchHeight}, ${flDuration}, ${vEndPoint})",
		"description":"CDOTA_Item_LaunchLootInitialHeight:\n\nreturn void",
		"prefix":"LaunchLootInitialHeight"
	},
	"CDOTA_Item_OnEquip":
	{
		"body":"OnEquip()",
		"description":"CDOTA_Item_OnEquip:\n\nreturn void",
		"prefix":"OnEquip"
	},
	"CDOTA_Item_OnUnequip":
	{
		"body":"OnUnequip()",
		"description":"CDOTA_Item_OnUnequip:\n\nreturn void",
		"prefix":"OnUnequip"
	},
	"CDOTA_Item_RequiresCharges":
	{
		"body":"RequiresCharges()",
		"description":"CDOTA_Item_RequiresCharges:\n\nreturn bool",
		"prefix":"RequiresCharges"
	},
	"CDOTA_Item_SetCanBeUsedOutOfInventory":
	{
		"body":"SetCanBeUsedOutOfInventory(${bValue})",
		"description":"CDOTA_Item_SetCanBeUsedOutOfInventory:\n\nreturn void",
		"prefix":"SetCanBeUsedOutOfInventory"
	},
	"CDOTA_Item_SetCastOnPickup":
	{
		"body":"SetCastOnPickup(${bCastOnPickUp})",
		"description":"CDOTA_Item_SetCastOnPickup:\n\nreturn void",
		"prefix":"SetCastOnPickup"
	},
	"CDOTA_Item_SetCurrentCharges":
	{
		"body":"SetCurrentCharges(${iCharges})",
		"description":"CDOTA_Item_SetCurrentCharges:\nSet the number of charges on this item\nreturn void",
		"prefix":"SetCurrentCharges"
	},
	"CDOTA_Item_SetDroppable":
	{
		"body":"SetDroppable(${bDroppable})",
		"description":"CDOTA_Item_SetDroppable:\n\nreturn void",
		"prefix":"SetDroppable"
	},
	"CDOTA_Item_SetItemState":
	{
		"body":"SetItemState(${iState})",
		"description":"CDOTA_Item_SetItemState:\nSets whether item is unequipped or ready.\nreturn void",
		"prefix":"SetItemState"
	},
	"CDOTA_Item_SetPurchaseTime":
	{
		"body":"SetPurchaseTime(${flTime})",
		"description":"CDOTA_Item_SetPurchaseTime:\nSet the purchase time of this item\nreturn void",
		"prefix":"SetPurchaseTime"
	},
	"CDOTA_Item_SetPurchaser":
	{
		"body":"SetPurchaser(${hPurchaser})",
		"description":"CDOTA_Item_SetPurchaser:\nSet the purchaser of record for this item.\nreturn void",
		"prefix":"SetPurchaser"
	},
	"CDOTA_Item_SetSellable":
	{
		"body":"SetSellable(${bSellable})",
		"description":"CDOTA_Item_SetSellable:\n\nreturn void",
		"prefix":"SetSellable"
	},
	"CDOTA_Item_SetShareability":
	{
		"body":"SetShareability(${iShareability})",
		"description":"CDOTA_Item_SetShareability:\n\nreturn void",
		"prefix":"SetShareability"
	},
	"CDOTA_Item_SetStacksWithOtherOwners":
	{
		"body":"SetStacksWithOtherOwners(${bStacksWithOtherOwners})",
		"description":"CDOTA_Item_SetStacksWithOtherOwners:\n\nreturn void",
		"prefix":"SetStacksWithOtherOwners"
	},
	"CDOTA_Item_SpendCharge":
	{
		"body":"SpendCharge()",
		"description":"CDOTA_Item_SpendCharge:\n\nreturn void",
		"prefix":"SpendCharge"
	},
	"CDOTA_Item_StacksWithOtherOwners":
	{
		"body":"StacksWithOtherOwners()",
		"description":"CDOTA_Item_StacksWithOtherOwners:\n\nreturn bool",
		"prefix":"StacksWithOtherOwners"
	},
	"CDOTA_Item_Think":
	{
		"body":"Think()",
		"description":"CDOTA_Item_Think:\nThink this item\nreturn void",
		"prefix":"Think"
	},
	"CDOTA_ItemSpawner_GetItemName":
	{
		"body":"GetItemName()",
		"description":"CDOTA_ItemSpawner_GetItemName:\nReturns the item name\nreturn string",
		"prefix":"GetItemName"
	},
	"CDOTA_Item_DataDriven_ApplyDataDrivenModifier":
	{
		"body":"ApplyDataDrivenModifier(${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable})",
		"description":"CDOTA_Item_DataDriven_ApplyDataDrivenModifier:\nApplies a data driven modifier to the target\nreturn void",
		"prefix":"ApplyDataDrivenModifier"
	},
	"CDOTA_Item_DataDriven_ApplyDataDrivenThinker":
	{
		"body":"ApplyDataDrivenThinker(${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable})",
		"description":"CDOTA_Item_DataDriven_ApplyDataDrivenThinker:\nApplies a data driven thinker at the location\nreturn handle",
		"prefix":"ApplyDataDrivenThinker"
	},
	"CDOTA_Item_Lua_CastFilterResult":
	{
		"body":"CastFilterResult()",
		"description":"CDOTA_Item_Lua_CastFilterResult:\nDetermine whether an issued command with no target is valid.\nreturn int",
		"prefix":"CastFilterResult"
	},
	"CDOTA_Item_Lua_CastFilterResultLocation":
	{
		"body":"CastFilterResultLocation(${vLocation})",
		"description":"CDOTA_Item_Lua_CastFilterResultLocation:\n(Vector vLocation) Determine whether an issued command on a location is valid.\nreturn int",
		"prefix":"CastFilterResultLocation"
	},
	"CDOTA_Item_Lua_CastFilterResultTarget":
	{
		"body":"CastFilterResultTarget(${hTarget})",
		"description":"CDOTA_Item_Lua_CastFilterResultTarget:\n(HSCRIPT hTarget) Determine whether an issued command on a target is valid.\nreturn int",
		"prefix":"CastFilterResultTarget"
	},
	"CDOTA_Item_Lua_GetAssociatedPrimaryAbilities":
	{
		"body":"GetAssociatedPrimaryAbilities()",
		"description":"CDOTA_Item_Lua_GetAssociatedPrimaryAbilities:\nReturns abilities that are stolen simultaneously, or otherwise related in functionality.\nreturn string",
		"prefix":"GetAssociatedPrimaryAbilities"
	},
	"CDOTA_Item_Lua_GetAssociatedSecondaryAbilities":
	{
		"body":"GetAssociatedSecondaryAbilities()",
		"description":"CDOTA_Item_Lua_GetAssociatedSecondaryAbilities:\nReturns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.\nreturn string",
		"prefix":"GetAssociatedSecondaryAbilities"
	},
	"CDOTA_Item_Lua_GetBehavior":
	{
		"body":"GetBehavior()",
		"description":"CDOTA_Item_Lua_GetBehavior:\nReturn cast behavior type of this ability.\nreturn int",
		"prefix":"GetBehavior"
	},
	"CDOTA_Item_Lua_GetCastRange":
	{
		"body":"GetCastRange(${vLocation}, ${hTarget})",
		"description":"CDOTA_Item_Lua_GetCastRange:\nReturn cast range of this ability.\nreturn int",
		"prefix":"GetCastRange"
	},
	"CDOTA_Item_Lua_GetChannelTime":
	{
		"body":"GetChannelTime()",
		"description":"CDOTA_Item_Lua_GetChannelTime:\nReturn the channel time of this ability.\nreturn float",
		"prefix":"GetChannelTime"
	},
	"CDOTA_Item_Lua_GetChannelledManaCostPerSecond":
	{
		"body":"GetChannelledManaCostPerSecond(${iLevel})",
		"description":"CDOTA_Item_Lua_GetChannelledManaCostPerSecond:\nReturn mana cost at the given level per second while channeling (-1 is current).\nreturn int",
		"prefix":"GetChannelledManaCostPerSecond"
	},
	"CDOTA_Item_Lua_GetConceptRecipientType":
	{
		"body":"GetConceptRecipientType()",
		"description":"CDOTA_Item_Lua_GetConceptRecipientType:\nReturn who hears speech when this spell is cast.\nreturn int",
		"prefix":"GetConceptRecipientType"
	},
	"CDOTA_Item_Lua_GetCooldown":
	{
		"body":"GetCooldown(${iLevel})",
		"description":"CDOTA_Item_Lua_GetCooldown:\nReturn cooldown of this ability.\nreturn float",
		"prefix":"GetCooldown"
	},
	"CDOTA_Item_Lua_GetCustomCastError":
	{
		"body":"GetCustomCastError()",
		"description":"CDOTA_Item_Lua_GetCustomCastError:\nReturn the error string of a failed command with no target.\nreturn string",
		"prefix":"GetCustomCastError"
	},
	"CDOTA_Item_Lua_GetCustomCastErrorLocation":
	{
		"body":"GetCustomCastErrorLocation(${vLocation})",
		"description":"CDOTA_Item_Lua_GetCustomCastErrorLocation:\n(Vector vLocation) Return the error string of a failed command on a location.\nreturn string",
		"prefix":"GetCustomCastErrorLocation"
	},
	"CDOTA_Item_Lua_GetCustomCastErrorTarget":
	{
		"body":"GetCustomCastErrorTarget(${hTarget})",
		"description":"CDOTA_Item_Lua_GetCustomCastErrorTarget:\n(HSCRIPT hTarget) Return the error string of a failed command on a target.\nreturn string",
		"prefix":"GetCustomCastErrorTarget"
	},
	"CDOTA_Item_Lua_GetGoldCost":
	{
		"body":"GetGoldCost(${iLevel})",
		"description":"CDOTA_Item_Lua_GetGoldCost:\nReturn gold cost at the given level (-1 is current).\nreturn int",
		"prefix":"GetGoldCost"
	},
	"CDOTA_Item_Lua_GetIntrinsicModifierName":
	{
		"body":"GetIntrinsicModifierName()",
		"description":"CDOTA_Item_Lua_GetIntrinsicModifierName:\nReturns the name of the modifier applied passively by this ability.\nreturn string",
		"prefix":"GetIntrinsicModifierName"
	},
	"CDOTA_Item_Lua_GetManaCost":
	{
		"body":"GetManaCost(${iLevel})",
		"description":"CDOTA_Item_Lua_GetManaCost:\nReturn mana cost at the given level (-1 is current).\nreturn int",
		"prefix":"GetManaCost"
	},
	"CDOTA_Item_Lua_GetPlaybackRateOverride":
	{
		"body":"GetPlaybackRateOverride()",
		"description":"CDOTA_Item_Lua_GetPlaybackRateOverride:\nReturn the animation rate of the cast animation.\nreturn float",
		"prefix":"GetPlaybackRateOverride"
	},
	"CDOTA_Item_Lua_IsHiddenAbilityCastable":
	{
		"body":"IsHiddenAbilityCastable()",
		"description":"CDOTA_Item_Lua_IsHiddenAbilityCastable:\nReturns true if this ability can be used when not on the action panel.\nreturn bool",
		"prefix":"IsHiddenAbilityCastable"
	},
	"CDOTA_Item_Lua_IsHiddenWhenStolen":
	{
		"body":"IsHiddenWhenStolen()",
		"description":"CDOTA_Item_Lua_IsHiddenWhenStolen:\nReturns true if this ability is hidden when stolen by Spell Steal.\nreturn bool",
		"prefix":"IsHiddenWhenStolen"
	},
	"CDOTA_Item_Lua_IsMuted":
	{
		"body":"IsMuted()",
		"description":"CDOTA_Item_Lua_IsMuted:\nReturns whether this item is muted or not.\nreturn bool",
		"prefix":"IsMuted"
	},
	"CDOTA_Item_Lua_IsRefreshable":
	{
		"body":"IsRefreshable()",
		"description":"CDOTA_Item_Lua_IsRefreshable:\nReturns true if this ability is refreshed by Refresher Orb.\nreturn bool",
		"prefix":"IsRefreshable"
	},
	"CDOTA_Item_Lua_IsStealable":
	{
		"body":"IsStealable()",
		"description":"CDOTA_Item_Lua_IsStealable:\nReturns true if this ability can be stolen by Spell Steal.\nreturn bool",
		"prefix":"IsStealable"
	},
	"CDOTA_Item_Lua_OnAbilityPhaseInterrupted":
	{
		"body":"OnAbilityPhaseInterrupted()",
		"description":"CDOTA_Item_Lua_OnAbilityPhaseInterrupted:\nCast time did not complete successfully.\nreturn void",
		"prefix":"OnAbilityPhaseInterrupted"
	},
	"CDOTA_Item_Lua_OnAbilityPhaseStart":
	{
		"body":"OnAbilityPhaseStart()",
		"description":"CDOTA_Item_Lua_OnAbilityPhaseStart:\nCast time begins (return true for successful cast).\nreturn bool",
		"prefix":"OnAbilityPhaseStart"
	},
	"CDOTA_Item_Lua_OnChannelFinish":
	{
		"body":"OnChannelFinish(${bInterrupted})",
		"description":"CDOTA_Item_Lua_OnChannelFinish:\n(bool bInterrupted) Channel finished.\nreturn void",
		"prefix":"OnChannelFinish"
	},
	"CDOTA_Item_Lua_OnChannelThink":
	{
		"body":"OnChannelThink(${flInterval})",
		"description":"CDOTA_Item_Lua_OnChannelThink:\n(float flInterval) Channeling is taking place.\nreturn void",
		"prefix":"OnChannelThink"
	},
	"CDOTA_Item_Lua_OnHeroCalculateStatBonus":
	{
		"body":"OnHeroCalculateStatBonus()",
		"description":"CDOTA_Item_Lua_OnHeroCalculateStatBonus:\nCaster (hero only) gained a level, skilled an ability, or received a new stat bonus.\nreturn void",
		"prefix":"OnHeroCalculateStatBonus"
	},
	"CDOTA_Item_Lua_OnHeroDiedNearby":
	{
		"body":"OnHeroDiedNearby(${unit}, ${attacker}, ${table})",
		"description":"CDOTA_Item_Lua_OnHeroDiedNearby:\nA hero has died in the vicinity (ie Urn), takes table of params.\nreturn void",
		"prefix":"OnHeroDiedNearby"
	},
	"CDOTA_Item_Lua_OnHeroLevelUp":
	{
		"body":"OnHeroLevelUp()",
		"description":"CDOTA_Item_Lua_OnHeroLevelUp:\nCaster gained a level.\nreturn void",
		"prefix":"OnHeroLevelUp"
	},
	"CDOTA_Item_Lua_OnInventoryContentsChanged":
	{
		"body":"OnInventoryContentsChanged()",
		"description":"CDOTA_Item_Lua_OnInventoryContentsChanged:\nCaster inventory changed.\nreturn void",
		"prefix":"OnInventoryContentsChanged"
	},
	"CDOTA_Item_Lua_OnItemEquipped":
	{
		"body":"OnItemEquipped(${hItem})",
		"description":"CDOTA_Item_Lua_OnItemEquipped:\n( HSCRIPT hItem ) Caster equipped item.\nreturn void",
		"prefix":"OnItemEquipped"
	},
	"CDOTA_Item_Lua_OnOwnerDied":
	{
		"body":"OnOwnerDied()",
		"description":"CDOTA_Item_Lua_OnOwnerDied:\nCaster died.\nreturn void",
		"prefix":"OnOwnerDied"
	},
	"CDOTA_Item_Lua_OnOwnerSpawned":
	{
		"body":"OnOwnerSpawned()",
		"description":"CDOTA_Item_Lua_OnOwnerSpawned:\nCaster respawned or spawned for the first time.\nreturn void",
		"prefix":"OnOwnerSpawned"
	},
	"CDOTA_Item_Lua_OnProjectileHit":
	{
		"body":"OnProjectileHit(${hTarget}, ${vLocation})",
		"description":"CDOTA_Item_Lua_OnProjectileHit:\n(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).\nreturn bool",
		"prefix":"OnProjectileHit"
	},
	"CDOTA_Item_Lua_OnProjectileThink":
	{
		"body":"OnProjectileThink(${vLocation})",
		"description":"CDOTA_Item_Lua_OnProjectileThink:\n(Vector vLocation) Projectile is actively moving.\nreturn void",
		"prefix":"OnProjectileThink"
	},
	"CDOTA_Item_Lua_OnSpellStart":
	{
		"body":"OnSpellStart()",
		"description":"CDOTA_Item_Lua_OnSpellStart:\nCast time finished, spell effects begin.\nreturn void",
		"prefix":"OnSpellStart"
	},
	"CDOTA_Item_Lua_OnStolen":
	{
		"body":"OnStolen(${hSourceAbility})",
		"description":"CDOTA_Item_Lua_OnStolen:\n( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.\nreturn void",
		"prefix":"OnStolen"
	},
	"CDOTA_Item_Lua_OnToggle":
	{
		"body":"OnToggle()",
		"description":"CDOTA_Item_Lua_OnToggle:\nAbility is toggled on/off.\nreturn void",
		"prefix":"OnToggle"
	},
	"CDOTA_Item_Lua_OnUnStolen":
	{
		"body":"OnUnStolen()",
		"description":"CDOTA_Item_Lua_OnUnStolen:\nSpecial behavior when lost by Spell Steal.\nreturn void",
		"prefix":"OnUnStolen"
	},
	"CDOTA_Item_Lua_OnUpgrade":
	{
		"body":"OnUpgrade()",
		"description":"CDOTA_Item_Lua_OnUpgrade:\nAbility gained a level.\nreturn void",
		"prefix":"OnUpgrade"
	},
	"CDOTA_Item_Lua_ProcsMagicStick":
	{
		"body":"ProcsMagicStick()",
		"description":"CDOTA_Item_Lua_ProcsMagicStick:\nReturns true if this ability will generate magic stick charges for nearby enemies.\nreturn bool",
		"prefix":"ProcsMagicStick"
	},
	"CDOTA_Item_Lua_SpeakTrigger":
	{
		"body":"SpeakTrigger()",
		"description":"CDOTA_Item_Lua_SpeakTrigger:\nReturn the type of speech used.\nreturn int",
		"prefix":"SpeakTrigger"
	},
	"CDOTA_Item_Physical_GetContainedItem":
	{
		"body":"GetContainedItem()",
		"description":"CDOTA_Item_Physical_GetContainedItem:\nReturned the contained item.\nreturn handle",
		"prefix":"GetContainedItem"
	},
	"CDOTA_Item_Physical_GetCreationTime":
	{
		"body":"GetCreationTime()",
		"description":"CDOTA_Item_Physical_GetCreationTime:\nReturns the game time when this item was created in the world\nreturn float",
		"prefix":"GetCreationTime"
	},
	"CDOTA_Item_Physical_SetContainedItem":
	{
		"body":"SetContainedItem(${hItem})",
		"description":"CDOTA_Item_Physical_SetContainedItem:\nSet the contained item.\nreturn void",
		"prefix":"SetContainedItem"
	},
	"CDOTA_MapTree_CutDown":
	{
		"body":"CutDown(${nTeamNumberKnownTo})",
		"description":"CDOTA_MapTree_CutDown:\nCuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)\nreturn void",
		"prefix":"CutDown"
	},
	"CDOTA_MapTree_CutDownRegrowAfter":
	{
		"body":"CutDownRegrowAfter(${flRegrowAfter}, ${nTeamNumberKnownTo})",
		"description":"CDOTA_MapTree_CutDownRegrowAfter:\nCuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)\nreturn void",
		"prefix":"CutDownRegrowAfter"
	},
	"CDOTA_MapTree_GrowBack":
	{
		"body":"GrowBack()",
		"description":"CDOTA_MapTree_GrowBack:\nGrows back the tree if it was cut down.\nreturn void",
		"prefix":"GrowBack"
	},
	"CDOTA_MapTree_IsStanding":
	{
		"body":"IsStanding()",
		"description":"CDOTA_MapTree_IsStanding:\nReturns true if the tree is standing, false if it has been cut down\nreturn bool",
		"prefix":"IsStanding"
	},
	"CDOTA_Modifier_Lua_AllowIllusionDuplicate":
	{
		"body":"AllowIllusionDuplicate()",
		"description":"CDOTA_Modifier_Lua_AllowIllusionDuplicate:\nTrue/false if this modifier is active on illusions.\nreturn bool",
		"prefix":"AllowIllusionDuplicate"
	},
	"CDOTA_Modifier_Lua_CanParentBeAutoAttacked":
	{
		"body":"CanParentBeAutoAttacked()",
		"description":"CDOTA_Modifier_Lua_CanParentBeAutoAttacked:\n\nreturn bool",
		"prefix":"CanParentBeAutoAttacked"
	},
	"CDOTA_Modifier_Lua_DestroyOnExpire":
	{
		"body":"DestroyOnExpire()",
		"description":"CDOTA_Modifier_Lua_DestroyOnExpire:\nTrue/false if this buff is removed when the duration expires.\nreturn bool",
		"prefix":"DestroyOnExpire"
	},
	"CDOTA_Modifier_Lua_GetAttributes":
	{
		"body":"GetAttributes()",
		"description":"CDOTA_Modifier_Lua_GetAttributes:\nReturn the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t\nreturn int",
		"prefix":"GetAttributes"
	},
	"CDOTA_Modifier_Lua_GetAuraDuration":
	{
		"body":"GetAuraDuration()",
		"description":"CDOTA_Modifier_Lua_GetAuraDuration:\nReturns aura stickiness\nreturn float",
		"prefix":"GetAuraDuration"
	},
	"CDOTA_Modifier_Lua_GetAuraEntityReject":
	{
		"body":"GetAuraEntityReject(${hEntity})",
		"description":"CDOTA_Modifier_Lua_GetAuraEntityReject:\nReturn true/false if this entity should receive the aura under specific conditions\nreturn bool",
		"prefix":"GetAuraEntityReject"
	},
	"CDOTA_Modifier_Lua_GetAuraRadius":
	{
		"body":"GetAuraRadius()",
		"description":"CDOTA_Modifier_Lua_GetAuraRadius:\nReturn the range around the parent this aura tries to apply its buff.\nreturn int",
		"prefix":"GetAuraRadius"
	},
	"CDOTA_Modifier_Lua_GetAuraSearchFlags":
	{
		"body":"GetAuraSearchFlags()",
		"description":"CDOTA_Modifier_Lua_GetAuraSearchFlags:\nReturn the unit flags this aura respects when placing buffs.\nreturn int",
		"prefix":"GetAuraSearchFlags"
	},
	"CDOTA_Modifier_Lua_GetAuraSearchTeam":
	{
		"body":"GetAuraSearchTeam()",
		"description":"CDOTA_Modifier_Lua_GetAuraSearchTeam:\nReturn the teams this aura applies its buff to.\nreturn int",
		"prefix":"GetAuraSearchTeam"
	},
	"CDOTA_Modifier_Lua_GetAuraSearchType":
	{
		"body":"GetAuraSearchType()",
		"description":"CDOTA_Modifier_Lua_GetAuraSearchType:\nReturn the unit classifications this aura applies its buff to.\nreturn int",
		"prefix":"GetAuraSearchType"
	},
	"CDOTA_Modifier_Lua_GetEffectAttachType":
	{
		"body":"GetEffectAttachType()",
		"description":"CDOTA_Modifier_Lua_GetEffectAttachType:\nReturn the attach type of the particle system from GetEffectName.\nreturn int",
		"prefix":"GetEffectAttachType"
	},
	"CDOTA_Modifier_Lua_GetEffectName":
	{
		"body":"GetEffectName()",
		"description":"CDOTA_Modifier_Lua_GetEffectName:\nReturn the name of the particle system that is created while this modifier is active.\nreturn string",
		"prefix":"GetEffectName"
	},
	"CDOTA_Modifier_Lua_GetHeroEffectName":
	{
		"body":"GetHeroEffectName()",
		"description":"CDOTA_Modifier_Lua_GetHeroEffectName:\nReturn the name of the hero effect particle system that is created while this modifier is active.\nreturn string",
		"prefix":"GetHeroEffectName"
	},
	"CDOTA_Modifier_Lua_GetModifierAura":
	{
		"body":"GetModifierAura()",
		"description":"CDOTA_Modifier_Lua_GetModifierAura:\nThe name of the secondary modifier that will be applied by this modifier (if it is an aura).\nreturn string",
		"prefix":"GetModifierAura"
	},
	"CDOTA_Modifier_Lua_GetPriority":
	{
		"body":"GetPriority()",
		"description":"CDOTA_Modifier_Lua_GetPriority:\nReturn the priority order this modifier will be applied over others.\nreturn int",
		"prefix":"GetPriority"
	},
	"CDOTA_Modifier_Lua_GetStatusEffectName":
	{
		"body":"GetStatusEffectName()",
		"description":"CDOTA_Modifier_Lua_GetStatusEffectName:\nReturn the name of the status effect particle system that is created while this modifier is active.\nreturn string",
		"prefix":"GetStatusEffectName"
	},
	"CDOTA_Modifier_Lua_GetTexture":
	{
		"body":"GetTexture()",
		"description":"CDOTA_Modifier_Lua_GetTexture:\nReturn the name of the buff icon to be shown for this modifier.\nreturn string",
		"prefix":"GetTexture"
	},
	"CDOTA_Modifier_Lua_HeroEffectPriority":
	{
		"body":"HeroEffectPriority()",
		"description":"CDOTA_Modifier_Lua_HeroEffectPriority:\nRelationship of this hero effect with those from other buffs (higher is more likely to be shown).\nreturn int",
		"prefix":"HeroEffectPriority"
	},
	"CDOTA_Modifier_Lua_IsAura":
	{
		"body":"IsAura()",
		"description":"CDOTA_Modifier_Lua_IsAura:\nTrue/false if this modifier is an aura.\nreturn bool",
		"prefix":"IsAura"
	},
	"CDOTA_Modifier_Lua_IsAuraActiveOnDeath":
	{
		"body":"IsAuraActiveOnDeath()",
		"description":"CDOTA_Modifier_Lua_IsAuraActiveOnDeath:\nTrue/false if this aura provides buffs when the parent is dead.\nreturn bool",
		"prefix":"IsAuraActiveOnDeath"
	},
	"CDOTA_Modifier_Lua_IsDebuff":
	{
		"body":"IsDebuff()",
		"description":"CDOTA_Modifier_Lua_IsDebuff:\nTrue/false if this modifier should be displayed as a debuff.\nreturn bool",
		"prefix":"IsDebuff"
	},
	"CDOTA_Modifier_Lua_IsHidden":
	{
		"body":"IsHidden()",
		"description":"CDOTA_Modifier_Lua_IsHidden:\nTrue/false if this modifier should be displayed on the buff bar.\nreturn bool",
		"prefix":"IsHidden"
	},
	"CDOTA_Modifier_Lua_IsPermanent":
	{
		"body":"IsPermanent()",
		"description":"CDOTA_Modifier_Lua_IsPermanent:\n\nreturn bool",
		"prefix":"IsPermanent"
	},
	"CDOTA_Modifier_Lua_IsPurgable":
	{
		"body":"IsPurgable()",
		"description":"CDOTA_Modifier_Lua_IsPurgable:\nTrue/false if this modifier can be purged.\nreturn bool",
		"prefix":"IsPurgable"
	},
	"CDOTA_Modifier_Lua_IsPurgeException":
	{
		"body":"IsPurgeException()",
		"description":"CDOTA_Modifier_Lua_IsPurgeException:\nTrue/false if this modifier can be purged by strong dispels.\nreturn bool",
		"prefix":"IsPurgeException"
	},
	"CDOTA_Modifier_Lua_IsStunDebuff":
	{
		"body":"IsStunDebuff()",
		"description":"CDOTA_Modifier_Lua_IsStunDebuff:\nTrue/false if this modifier is considered a stun for purge reasons.\nreturn bool",
		"prefix":"IsStunDebuff"
	},
	"CDOTA_Modifier_Lua_OnCreated":
	{
		"body":"OnCreated(${table})",
		"description":"CDOTA_Modifier_Lua_OnCreated:\nRuns when the modifier is created.\nreturn void",
		"prefix":"OnCreated"
	},
	"CDOTA_Modifier_Lua_OnDestroy":
	{
		"body":"OnDestroy()",
		"description":"CDOTA_Modifier_Lua_OnDestroy:\nRuns when the modifier is destroyed (after unit loses modifier).\nreturn void",
		"prefix":"OnDestroy"
	},
	"CDOTA_Modifier_Lua_OnIntervalThink":
	{
		"body":"OnIntervalThink()",
		"description":"CDOTA_Modifier_Lua_OnIntervalThink:\nRuns when the think interval occurs.\nreturn void",
		"prefix":"OnIntervalThink"
	},
	"CDOTA_Modifier_Lua_OnRefresh":
	{
		"body":"OnRefresh(${table})",
		"description":"CDOTA_Modifier_Lua_OnRefresh:\nRuns when the modifier is refreshed.\nreturn void",
		"prefix":"OnRefresh"
	},
	"CDOTA_Modifier_Lua_OnRemoved":
	{
		"body":"OnRemoved()",
		"description":"CDOTA_Modifier_Lua_OnRemoved:\nRuns when the modifier is destroyed (before unit loses modifier).\nreturn void",
		"prefix":"OnRemoved"
	},
	"CDOTA_Modifier_Lua_OnStackCountChanged":
	{
		"body":"OnStackCountChanged(${iStackCount})",
		"description":"CDOTA_Modifier_Lua_OnStackCountChanged:\nRuns when stack count changes (param is old count).\nreturn void",
		"prefix":"OnStackCountChanged"
	},
	"CDOTA_Modifier_Lua_RemoveOnDeath":
	{
		"body":"RemoveOnDeath()",
		"description":"CDOTA_Modifier_Lua_RemoveOnDeath:\nTrue/false if this modifier is removed when the parent dies.\nreturn bool",
		"prefix":"RemoveOnDeath"
	},
	"CDOTA_Modifier_Lua_ShouldUseOverheadOffset":
	{
		"body":"ShouldUseOverheadOffset()",
		"description":"CDOTA_Modifier_Lua_ShouldUseOverheadOffset:\nApply the overhead offset to the attached effect.\nreturn bool",
		"prefix":"ShouldUseOverheadOffset"
	},
	"CDOTA_Modifier_Lua_StatusEffectPriority":
	{
		"body":"StatusEffectPriority()",
		"description":"CDOTA_Modifier_Lua_StatusEffectPriority:\nRelationship of this status effect with those from other buffs (higher is more likely to be shown).\nreturn int",
		"prefix":"StatusEffectPriority"
	},
	"CDOTA_Modifier_Lua_Horizontal_Motion_ApplyHorizontalMotionController":
	{
		"body":"ApplyHorizontalMotionController()",
		"description":"CDOTA_Modifier_Lua_Horizontal_Motion_ApplyHorizontalMotionController:\nStarts the horizontal motion controller effects for this buff.  Returns true if successful.\nreturn bool",
		"prefix":"ApplyHorizontalMotionController"
	},
	"CDOTA_Modifier_Lua_Horizontal_Motion_GetPriority":
	{
		"body":"GetPriority()",
		"description":"CDOTA_Modifier_Lua_Horizontal_Motion_GetPriority:\nGet the priority\nreturn int",
		"prefix":"GetPriority"
	},
	"CDOTA_Modifier_Lua_Horizontal_Motion_OnHorizontalMotionInterrupted":
	{
		"body":"OnHorizontalMotionInterrupted()",
		"description":"CDOTA_Modifier_Lua_Horizontal_Motion_OnHorizontalMotionInterrupted:\nCalled when the motion gets interrupted.\nreturn void",
		"prefix":"OnHorizontalMotionInterrupted"
	},
	"CDOTA_Modifier_Lua_Horizontal_Motion_SetPriority":
	{
		"body":"SetPriority(${nMotionPriority})",
		"description":"CDOTA_Modifier_Lua_Horizontal_Motion_SetPriority:\nSet the priority\nreturn void",
		"prefix":"SetPriority"
	},
	"CDOTA_Modifier_Lua_Horizontal_Motion_UpdateHorizontalMotion":
	{
		"body":"UpdateHorizontalMotion(${me}, ${dt})",
		"description":"CDOTA_Modifier_Lua_Horizontal_Motion_UpdateHorizontalMotion:\nPerform any motion from the given interval on the NPC.\nreturn void",
		"prefix":"UpdateHorizontalMotion"
	},
	"CDOTA_Modifier_Lua_Motion_Both_ApplyHorizontalMotionController":
	{
		"body":"ApplyHorizontalMotionController()",
		"description":"CDOTA_Modifier_Lua_Motion_Both_ApplyHorizontalMotionController:\nStarts the horizontal motion controller effects for this buff.  Returns true if successful.\nreturn bool",
		"prefix":"ApplyHorizontalMotionController"
	},
	"CDOTA_Modifier_Lua_Motion_Both_ApplyVerticalMotionController":
	{
		"body":"ApplyVerticalMotionController()",
		"description":"CDOTA_Modifier_Lua_Motion_Both_ApplyVerticalMotionController:\nStarts the vertical motion controller effects for this buff.  Returns true if successful.\nreturn bool",
		"prefix":"ApplyVerticalMotionController"
	},
	"CDOTA_Modifier_Lua_Motion_Both_GetPriority":
	{
		"body":"GetPriority()",
		"description":"CDOTA_Modifier_Lua_Motion_Both_GetPriority:\nGet the priority\nreturn int",
		"prefix":"GetPriority"
	},
	"CDOTA_Modifier_Lua_Motion_Both_OnHorizontalMotionInterrupted":
	{
		"body":"OnHorizontalMotionInterrupted()",
		"description":"CDOTA_Modifier_Lua_Motion_Both_OnHorizontalMotionInterrupted:\nCalled when the motion gets interrupted.\nreturn void",
		"prefix":"OnHorizontalMotionInterrupted"
	},
	"CDOTA_Modifier_Lua_Motion_Both_OnVerticalMotionInterrupted":
	{
		"body":"OnVerticalMotionInterrupted()",
		"description":"CDOTA_Modifier_Lua_Motion_Both_OnVerticalMotionInterrupted:\nCalled when the motion gets interrupted.\nreturn void",
		"prefix":"OnVerticalMotionInterrupted"
	},
	"CDOTA_Modifier_Lua_Motion_Both_SetPriority":
	{
		"body":"SetPriority(${nMotionPriority})",
		"description":"CDOTA_Modifier_Lua_Motion_Both_SetPriority:\nSet the priority\nreturn void",
		"prefix":"SetPriority"
	},
	"CDOTA_Modifier_Lua_Motion_Both_UpdateHorizontalMotion":
	{
		"body":"UpdateHorizontalMotion(${me}, ${dt})",
		"description":"CDOTA_Modifier_Lua_Motion_Both_UpdateHorizontalMotion:\nPerform any motion from the given interval on the NPC.\nreturn void",
		"prefix":"UpdateHorizontalMotion"
	},
	"CDOTA_Modifier_Lua_Motion_Both_UpdateVerticalMotion":
	{
		"body":"UpdateVerticalMotion(${me}, ${dt})",
		"description":"CDOTA_Modifier_Lua_Motion_Both_UpdateVerticalMotion:\nPerform any motion from the given interval on the NPC.\nreturn void",
		"prefix":"UpdateVerticalMotion"
	},
	"CDOTA_Modifier_Lua_Vertical_Motion_ApplyVerticalMotionController":
	{
		"body":"ApplyVerticalMotionController()",
		"description":"CDOTA_Modifier_Lua_Vertical_Motion_ApplyVerticalMotionController:\nStarts the vertical motion controller effects for this buff.  Returns true if successful.\nreturn bool",
		"prefix":"ApplyVerticalMotionController"
	},
	"CDOTA_Modifier_Lua_Vertical_Motion_GetMotionPriority":
	{
		"body":"GetMotionPriority()",
		"description":"CDOTA_Modifier_Lua_Vertical_Motion_GetMotionPriority:\nGet the priority\nreturn int",
		"prefix":"GetMotionPriority"
	},
	"CDOTA_Modifier_Lua_Vertical_Motion_OnVerticalMotionInterrupted":
	{
		"body":"OnVerticalMotionInterrupted()",
		"description":"CDOTA_Modifier_Lua_Vertical_Motion_OnVerticalMotionInterrupted:\nCalled when the motion gets interrupted.\nreturn void",
		"prefix":"OnVerticalMotionInterrupted"
	},
	"CDOTA_Modifier_Lua_Vertical_Motion_SetMotionPriority":
	{
		"body":"SetMotionPriority(${nMotionPriority})",
		"description":"CDOTA_Modifier_Lua_Vertical_Motion_SetMotionPriority:\nSet the priority\nreturn void",
		"prefix":"SetMotionPriority"
	},
	"CDOTA_Modifier_Lua_Vertical_Motion_UpdateVerticalMotion":
	{
		"body":"UpdateVerticalMotion(${me}, ${dt})",
		"description":"CDOTA_Modifier_Lua_Vertical_Motion_UpdateVerticalMotion:\nPerform any motion from the given interval on the NPC.\nreturn void",
		"prefix":"UpdateVerticalMotion"
	},
	"CDOTA_PlayerResource_AddAegisPickup":
	{
		"body":"AddAegisPickup(${iPlayerID})",
		"description":"CDOTA_PlayerResource_AddAegisPickup:\n\nreturn void",
		"prefix":"AddAegisPickup"
	},
	"CDOTA_PlayerResource_AddClaimedFarm":
	{
		"body":"AddClaimedFarm(${iPlayerID}, ${flFarmValue}, ${bEarnedValue})",
		"description":"CDOTA_PlayerResource_AddClaimedFarm:\n\nreturn void",
		"prefix":"AddClaimedFarm"
	},
	"CDOTA_PlayerResource_AddGoldSpentOnSupport":
	{
		"body":"AddGoldSpentOnSupport(${iPlayerID}, ${iCost})",
		"description":"CDOTA_PlayerResource_AddGoldSpentOnSupport:\n\nreturn void",
		"prefix":"AddGoldSpentOnSupport"
	},
	"CDOTA_PlayerResource_AddRunePickup":
	{
		"body":"AddRunePickup(${iPlayerID})",
		"description":"CDOTA_PlayerResource_AddRunePickup:\n\nreturn void",
		"prefix":"AddRunePickup"
	},
	"CDOTA_PlayerResource_AreUnitsSharedWithPlayerID":
	{
		"body":"AreUnitsSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})",
		"description":"CDOTA_PlayerResource_AreUnitsSharedWithPlayerID:\n\nreturn bool",
		"prefix":"AreUnitsSharedWithPlayerID"
	},
	"CDOTA_PlayerResource_CanRepick":
	{
		"body":"CanRepick(${iPlayerID})",
		"description":"CDOTA_PlayerResource_CanRepick:\n\nreturn bool",
		"prefix":"CanRepick"
	},
	"CDOTA_PlayerResource_ClearKillsMatrix":
	{
		"body":"ClearKillsMatrix(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ClearKillsMatrix:\n\nreturn void",
		"prefix":"ClearKillsMatrix"
	},
	"CDOTA_PlayerResource_ClearLastHitMultikill":
	{
		"body":"ClearLastHitMultikill(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ClearLastHitMultikill:\n\nreturn void",
		"prefix":"ClearLastHitMultikill"
	},
	"CDOTA_PlayerResource_ClearLastHitStreak":
	{
		"body":"ClearLastHitStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ClearLastHitStreak:\n\nreturn void",
		"prefix":"ClearLastHitStreak"
	},
	"CDOTA_PlayerResource_ClearRawPlayerDamageMatrix":
	{
		"body":"ClearRawPlayerDamageMatrix(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ClearRawPlayerDamageMatrix:\n\nreturn void",
		"prefix":"ClearRawPlayerDamageMatrix"
	},
	"CDOTA_PlayerResource_ClearStreak":
	{
		"body":"ClearStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ClearStreak:\n\nreturn void",
		"prefix":"ClearStreak"
	},
	"CDOTA_PlayerResource_GetAegisPickups":
	{
		"body":"GetAegisPickups(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetAegisPickups:\n\nreturn int",
		"prefix":"GetAegisPickups"
	},
	"CDOTA_PlayerResource_GetAssists":
	{
		"body":"GetAssists(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetAssists:\n\nreturn int",
		"prefix":"GetAssists"
	},
	"CDOTA_PlayerResource_GetBroadcasterChannel":
	{
		"body":"GetBroadcasterChannel(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetBroadcasterChannel:\n\nreturn unsigned",
		"prefix":"GetBroadcasterChannel"
	},
	"CDOTA_PlayerResource_GetBroadcasterChannelSlot":
	{
		"body":"GetBroadcasterChannelSlot(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetBroadcasterChannelSlot:\n\nreturn unsigned",
		"prefix":"GetBroadcasterChannelSlot"
	},
	"CDOTA_PlayerResource_GetClaimedDenies":
	{
		"body":"GetClaimedDenies(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetClaimedDenies:\n\nreturn int",
		"prefix":"GetClaimedDenies"
	},
	"CDOTA_PlayerResource_GetClaimedFarm":
	{
		"body":"GetClaimedFarm(${iPlayerID}, ${bOnlyEarned})",
		"description":"CDOTA_PlayerResource_GetClaimedFarm:\n\nreturn float",
		"prefix":"GetClaimedFarm"
	},
	"CDOTA_PlayerResource_GetClaimedMisses":
	{
		"body":"GetClaimedMisses(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetClaimedMisses:\n\nreturn int",
		"prefix":"GetClaimedMisses"
	},
	"CDOTA_PlayerResource_GetConnectionState":
	{
		"body":"GetConnectionState(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetConnectionState:\n\nreturn <unknown>",
		"prefix":"GetConnectionState"
	},
	"CDOTA_PlayerResource_GetCreepDamageTaken":
	{
		"body":"GetCreepDamageTaken(${iPlayerID}, ${bTotal})",
		"description":"CDOTA_PlayerResource_GetCreepDamageTaken:\n\nreturn int",
		"prefix":"GetCreepDamageTaken"
	},
	"CDOTA_PlayerResource_GetCustomBuybackCooldown":
	{
		"body":"GetCustomBuybackCooldown(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetCustomBuybackCooldown:\n\nreturn float",
		"prefix":"GetCustomBuybackCooldown"
	},
	"CDOTA_PlayerResource_GetCustomBuybackCost":
	{
		"body":"GetCustomBuybackCost(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetCustomBuybackCost:\n\nreturn int",
		"prefix":"GetCustomBuybackCost"
	},
	"CDOTA_PlayerResource_GetCustomTeamAssignment":
	{
		"body":"GetCustomTeamAssignment(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetCustomTeamAssignment:\nGet the current custom team assignment for this player.\nreturn int",
		"prefix":"GetCustomTeamAssignment"
	},
	"CDOTA_PlayerResource_GetDamageDoneToHero":
	{
		"body":"GetDamageDoneToHero(${iPlayerID}, ${iVictimID})",
		"description":"CDOTA_PlayerResource_GetDamageDoneToHero:\n\nreturn int",
		"prefix":"GetDamageDoneToHero"
	},
	"CDOTA_PlayerResource_GetDeaths":
	{
		"body":"GetDeaths(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetDeaths:\n\nreturn int",
		"prefix":"GetDeaths"
	},
	"CDOTA_PlayerResource_GetDenies":
	{
		"body":"GetDenies(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetDenies:\n\nreturn int",
		"prefix":"GetDenies"
	},
	"CDOTA_PlayerResource_GetEventPointsForPlayerID":
	{
		"body":"GetEventPointsForPlayerID(${nPlayerID})",
		"description":"CDOTA_PlayerResource_GetEventPointsForPlayerID:\n\nreturn unsigned",
		"prefix":"GetEventPointsForPlayerID"
	},
	"CDOTA_PlayerResource_GetEventPremiumPoints":
	{
		"body":"GetEventPremiumPoints(${nPlayerID})",
		"description":"CDOTA_PlayerResource_GetEventPremiumPoints:\n\nreturn unsigned",
		"prefix":"GetEventPremiumPoints"
	},
	"CDOTA_PlayerResource_GetEventRanks":
	{
		"body":"GetEventRanks(${nPlayerID})",
		"description":"CDOTA_PlayerResource_GetEventRanks:\n\nreturn <unknown>",
		"prefix":"GetEventRanks"
	},
	"CDOTA_PlayerResource_GetGold":
	{
		"body":"GetGold(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGold:\n\nreturn int",
		"prefix":"GetGold"
	},
	"CDOTA_PlayerResource_GetGoldLostToDeath":
	{
		"body":"GetGoldLostToDeath(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldLostToDeath:\n\nreturn int",
		"prefix":"GetGoldLostToDeath"
	},
	"CDOTA_PlayerResource_GetGoldPerMin":
	{
		"body":"GetGoldPerMin(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldPerMin:\n\nreturn float",
		"prefix":"GetGoldPerMin"
	},
	"CDOTA_PlayerResource_GetGoldSpentOnBuybacks":
	{
		"body":"GetGoldSpentOnBuybacks(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldSpentOnBuybacks:\n\nreturn int",
		"prefix":"GetGoldSpentOnBuybacks"
	},
	"CDOTA_PlayerResource_GetGoldSpentOnConsumables":
	{
		"body":"GetGoldSpentOnConsumables(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldSpentOnConsumables:\n\nreturn int",
		"prefix":"GetGoldSpentOnConsumables"
	},
	"CDOTA_PlayerResource_GetGoldSpentOnItems":
	{
		"body":"GetGoldSpentOnItems(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldSpentOnItems:\n\nreturn int",
		"prefix":"GetGoldSpentOnItems"
	},
	"CDOTA_PlayerResource_GetGoldSpentOnSupport":
	{
		"body":"GetGoldSpentOnSupport(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetGoldSpentOnSupport:\n\nreturn int",
		"prefix":"GetGoldSpentOnSupport"
	},
	"CDOTA_PlayerResource_GetHealing":
	{
		"body":"GetHealing(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetHealing:\n\nreturn float",
		"prefix":"GetHealing"
	},
	"CDOTA_PlayerResource_GetHeroDamageTaken":
	{
		"body":"GetHeroDamageTaken(${iPlayerID}, ${bTotal})",
		"description":"CDOTA_PlayerResource_GetHeroDamageTaken:\n\nreturn int",
		"prefix":"GetHeroDamageTaken"
	},
	"CDOTA_PlayerResource_GetKills":
	{
		"body":"GetKills(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetKills:\n\nreturn int",
		"prefix":"GetKills"
	},
	"CDOTA_PlayerResource_GetKillsDoneToHero":
	{
		"body":"GetKillsDoneToHero(${iPlayerID}, ${iVictimID})",
		"description":"CDOTA_PlayerResource_GetKillsDoneToHero:\n\nreturn int",
		"prefix":"GetKillsDoneToHero"
	},
	"CDOTA_PlayerResource_GetLastHitMultikill":
	{
		"body":"GetLastHitMultikill(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetLastHitMultikill:\n\nreturn int",
		"prefix":"GetLastHitMultikill"
	},
	"CDOTA_PlayerResource_GetLastHitStreak":
	{
		"body":"GetLastHitStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetLastHitStreak:\n\nreturn int",
		"prefix":"GetLastHitStreak"
	},
	"CDOTA_PlayerResource_GetLastHits":
	{
		"body":"GetLastHits(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetLastHits:\n\nreturn int",
		"prefix":"GetLastHits"
	},
	"CDOTA_PlayerResource_GetLevel":
	{
		"body":"GetLevel(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetLevel:\n\nreturn int",
		"prefix":"GetLevel"
	},
	"CDOTA_PlayerResource_GetMisses":
	{
		"body":"GetMisses(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetMisses:\n\nreturn int",
		"prefix":"GetMisses"
	},
	"CDOTA_PlayerResource_GetNearbyCreepDeaths":
	{
		"body":"GetNearbyCreepDeaths(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetNearbyCreepDeaths:\n\nreturn int",
		"prefix":"GetNearbyCreepDeaths"
	},
	"CDOTA_PlayerResource_GetNetWorth":
	{
		"body":"GetNetWorth(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetNetWorth:\n\nreturn int",
		"prefix":"GetNetWorth"
	},
	"CDOTA_PlayerResource_GetNthCourierForTeam":
	{
		"body":"GetNthCourierForTeam(${nCourierIndex}, ${nTeamNumber})",
		"description":"CDOTA_PlayerResource_GetNthCourierForTeam:\n\nreturn handle",
		"prefix":"GetNthCourierForTeam"
	},
	"CDOTA_PlayerResource_GetNthPlayerIDOnTeam":
	{
		"body":"GetNthPlayerIDOnTeam(${iTeamNumber}, ${iNthPlayer})",
		"description":"CDOTA_PlayerResource_GetNthPlayerIDOnTeam:\n\nreturn int",
		"prefix":"GetNthPlayerIDOnTeam"
	},
	"CDOTA_PlayerResource_GetNumConsumablesPurchased":
	{
		"body":"GetNumConsumablesPurchased(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetNumConsumablesPurchased:\n\nreturn int",
		"prefix":"GetNumConsumablesPurchased"
	},
	"CDOTA_PlayerResource_GetNumCouriersForTeam":
	{
		"body":"GetNumCouriersForTeam(${nTeamNumber})",
		"description":"CDOTA_PlayerResource_GetNumCouriersForTeam:\n\nreturn int",
		"prefix":"GetNumCouriersForTeam"
	},
	"CDOTA_PlayerResource_GetNumItemsPurchased":
	{
		"body":"GetNumItemsPurchased(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetNumItemsPurchased:\n\nreturn int",
		"prefix":"GetNumItemsPurchased"
	},
	"CDOTA_PlayerResource_GetPartyID":
	{
		"body":"GetPartyID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetPartyID:\n\nreturn uint64",
		"prefix":"GetPartyID"
	},
	"CDOTA_PlayerResource_GetPlayer":
	{
		"body":"GetPlayer(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetPlayer:\n\nreturn handle",
		"prefix":"GetPlayer"
	},
	"CDOTA_PlayerResource_GetPlayerCount":
	{
		"body":"GetPlayerCount()",
		"description":"CDOTA_PlayerResource_GetPlayerCount:\nIncludes spectators and players not assigned to a team\nreturn int",
		"prefix":"GetPlayerCount"
	},
	"CDOTA_PlayerResource_GetPlayerCountForTeam":
	{
		"body":"GetPlayerCountForTeam(${iTeam})",
		"description":"CDOTA_PlayerResource_GetPlayerCountForTeam:\n\nreturn int",
		"prefix":"GetPlayerCountForTeam"
	},
	"CDOTA_PlayerResource_GetPlayerLoadedCompletely":
	{
		"body":"GetPlayerLoadedCompletely(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetPlayerLoadedCompletely:\n\nreturn bool",
		"prefix":"GetPlayerLoadedCompletely"
	},
	"CDOTA_PlayerResource_GetPlayerName":
	{
		"body":"GetPlayerName(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetPlayerName:\n\nreturn string",
		"prefix":"GetPlayerName"
	},
	"CDOTA_PlayerResource_GetRawPlayerDamage":
	{
		"body":"GetRawPlayerDamage(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetRawPlayerDamage:\n\nreturn int",
		"prefix":"GetRawPlayerDamage"
	},
	"CDOTA_PlayerResource_GetReliableGold":
	{
		"body":"GetReliableGold(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetReliableGold:\n\nreturn int",
		"prefix":"GetReliableGold"
	},
	"CDOTA_PlayerResource_GetRespawnSeconds":
	{
		"body":"GetRespawnSeconds(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetRespawnSeconds:\n\nreturn int",
		"prefix":"GetRespawnSeconds"
	},
	"CDOTA_PlayerResource_GetRoshanKills":
	{
		"body":"GetRoshanKills(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetRoshanKills:\n\nreturn int",
		"prefix":"GetRoshanKills"
	},
	"CDOTA_PlayerResource_GetRunePickups":
	{
		"body":"GetRunePickups(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetRunePickups:\n\nreturn int",
		"prefix":"GetRunePickups"
	},
	"CDOTA_PlayerResource_GetSelectedHeroEntity":
	{
		"body":"GetSelectedHeroEntity(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetSelectedHeroEntity:\n\nreturn handle",
		"prefix":"GetSelectedHeroEntity"
	},
	"CDOTA_PlayerResource_GetSelectedHeroID":
	{
		"body":"GetSelectedHeroID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetSelectedHeroID:\n\nreturn int",
		"prefix":"GetSelectedHeroID"
	},
	"CDOTA_PlayerResource_GetSelectedHeroName":
	{
		"body":"GetSelectedHeroName(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetSelectedHeroName:\n\nreturn string",
		"prefix":"GetSelectedHeroName"
	},
	"CDOTA_PlayerResource_GetSteamAccountID":
	{
		"body":"GetSteamAccountID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetSteamAccountID:\n\nreturn unsigned",
		"prefix":"GetSteamAccountID"
	},
	"CDOTA_PlayerResource_GetSteamID":
	{
		"body":"GetSteamID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetSteamID:\nGet the 64 bit steam ID for a given player.\nreturn uint64",
		"prefix":"GetSteamID"
	},
	"CDOTA_PlayerResource_GetStreak":
	{
		"body":"GetStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetStreak:\n\nreturn int",
		"prefix":"GetStreak"
	},
	"CDOTA_PlayerResource_GetStuns":
	{
		"body":"GetStuns(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetStuns:\n\nreturn float",
		"prefix":"GetStuns"
	},
	"CDOTA_PlayerResource_GetTeam":
	{
		"body":"GetTeam(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTeam:\n\nreturn int",
		"prefix":"GetTeam"
	},
	"CDOTA_PlayerResource_GetTeamKills":
	{
		"body":"GetTeamKills(${iTeam})",
		"description":"CDOTA_PlayerResource_GetTeamKills:\n\nreturn int",
		"prefix":"GetTeamKills"
	},
	"CDOTA_PlayerResource_GetTeamPlayerCount":
	{
		"body":"GetTeamPlayerCount()",
		"description":"CDOTA_PlayerResource_GetTeamPlayerCount:\nPlayers on a valid team (radiant, dire, or custom*) who haven't abandoned the game\nreturn int",
		"prefix":"GetTeamPlayerCount"
	},
	"CDOTA_PlayerResource_GetTimeOfLastConsumablePurchase":
	{
		"body":"GetTimeOfLastConsumablePurchase(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTimeOfLastConsumablePurchase:\n\nreturn float",
		"prefix":"GetTimeOfLastConsumablePurchase"
	},
	"CDOTA_PlayerResource_GetTimeOfLastDeath":
	{
		"body":"GetTimeOfLastDeath(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTimeOfLastDeath:\n\nreturn float",
		"prefix":"GetTimeOfLastDeath"
	},
	"CDOTA_PlayerResource_GetTimeOfLastItemPurchase":
	{
		"body":"GetTimeOfLastItemPurchase(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTimeOfLastItemPurchase:\n\nreturn float",
		"prefix":"GetTimeOfLastItemPurchase"
	},
	"CDOTA_PlayerResource_GetTotalEarnedGold":
	{
		"body":"GetTotalEarnedGold(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTotalEarnedGold:\n\nreturn int",
		"prefix":"GetTotalEarnedGold"
	},
	"CDOTA_PlayerResource_GetTotalEarnedXP":
	{
		"body":"GetTotalEarnedXP(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTotalEarnedXP:\n\nreturn int",
		"prefix":"GetTotalEarnedXP"
	},
	"CDOTA_PlayerResource_GetTotalGoldSpent":
	{
		"body":"GetTotalGoldSpent(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTotalGoldSpent:\n\nreturn int",
		"prefix":"GetTotalGoldSpent"
	},
	"CDOTA_PlayerResource_GetTowerDamageTaken":
	{
		"body":"GetTowerDamageTaken(${iPlayerID}, ${bTotal})",
		"description":"CDOTA_PlayerResource_GetTowerDamageTaken:\n\nreturn int",
		"prefix":"GetTowerDamageTaken"
	},
	"CDOTA_PlayerResource_GetTowerKills":
	{
		"body":"GetTowerKills(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetTowerKills:\n\nreturn int",
		"prefix":"GetTowerKills"
	},
	"CDOTA_PlayerResource_GetUnitShareMaskForPlayer":
	{
		"body":"GetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID})",
		"description":"CDOTA_PlayerResource_GetUnitShareMaskForPlayer:\n\nreturn int",
		"prefix":"GetUnitShareMaskForPlayer"
	},
	"CDOTA_PlayerResource_GetUnreliableGold":
	{
		"body":"GetUnreliableGold(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetUnreliableGold:\n\nreturn int",
		"prefix":"GetUnreliableGold"
	},
	"CDOTA_PlayerResource_GetXPPerMin":
	{
		"body":"GetXPPerMin(${iPlayerID})",
		"description":"CDOTA_PlayerResource_GetXPPerMin:\n\nreturn float",
		"prefix":"GetXPPerMin"
	},
	"CDOTA_PlayerResource_HasCustomGameTicketForPlayerID":
	{
		"body":"HasCustomGameTicketForPlayerID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_HasCustomGameTicketForPlayerID:\nDoes this player have a custom game ticket for this game?\nreturn bool",
		"prefix":"HasCustomGameTicketForPlayerID"
	},
	"CDOTA_PlayerResource_HasRandomed":
	{
		"body":"HasRandomed(${iPlayerID})",
		"description":"CDOTA_PlayerResource_HasRandomed:\n\nreturn bool",
		"prefix":"HasRandomed"
	},
	"CDOTA_PlayerResource_HasSelectedHero":
	{
		"body":"HasSelectedHero(${iPlayerID})",
		"description":"CDOTA_PlayerResource_HasSelectedHero:\n\nreturn bool",
		"prefix":"HasSelectedHero"
	},
	"CDOTA_PlayerResource_HaveAllPlayersJoined":
	{
		"body":"HaveAllPlayersJoined()",
		"description":"CDOTA_PlayerResource_HaveAllPlayersJoined:\n\nreturn bool",
		"prefix":"HaveAllPlayersJoined"
	},
	"CDOTA_PlayerResource_IncrementAssists":
	{
		"body":"IncrementAssists(${iPlayerID}, ${iVictimID})",
		"description":"CDOTA_PlayerResource_IncrementAssists:\n\nreturn void",
		"prefix":"IncrementAssists"
	},
	"CDOTA_PlayerResource_IncrementClaimedDenies":
	{
		"body":"IncrementClaimedDenies(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementClaimedDenies:\n\nreturn void",
		"prefix":"IncrementClaimedDenies"
	},
	"CDOTA_PlayerResource_IncrementClaimedMisses":
	{
		"body":"IncrementClaimedMisses(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementClaimedMisses:\n\nreturn void",
		"prefix":"IncrementClaimedMisses"
	},
	"CDOTA_PlayerResource_IncrementDeaths":
	{
		"body":"IncrementDeaths(${iPlayerID}, ${iKillerID})",
		"description":"CDOTA_PlayerResource_IncrementDeaths:\n\nreturn void",
		"prefix":"IncrementDeaths"
	},
	"CDOTA_PlayerResource_IncrementDenies":
	{
		"body":"IncrementDenies(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementDenies:\n\nreturn void",
		"prefix":"IncrementDenies"
	},
	"CDOTA_PlayerResource_IncrementKills":
	{
		"body":"IncrementKills(${iPlayerID}, ${iVictimID})",
		"description":"CDOTA_PlayerResource_IncrementKills:\n\nreturn void",
		"prefix":"IncrementKills"
	},
	"CDOTA_PlayerResource_IncrementLastHitMultikill":
	{
		"body":"IncrementLastHitMultikill(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementLastHitMultikill:\n\nreturn void",
		"prefix":"IncrementLastHitMultikill"
	},
	"CDOTA_PlayerResource_IncrementLastHitStreak":
	{
		"body":"IncrementLastHitStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementLastHitStreak:\n\nreturn void",
		"prefix":"IncrementLastHitStreak"
	},
	"CDOTA_PlayerResource_IncrementLastHits":
	{
		"body":"IncrementLastHits(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementLastHits:\n\nreturn void",
		"prefix":"IncrementLastHits"
	},
	"CDOTA_PlayerResource_IncrementMisses":
	{
		"body":"IncrementMisses(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementMisses:\n\nreturn void",
		"prefix":"IncrementMisses"
	},
	"CDOTA_PlayerResource_IncrementNearbyCreepDeaths":
	{
		"body":"IncrementNearbyCreepDeaths(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementNearbyCreepDeaths:\n\nreturn void",
		"prefix":"IncrementNearbyCreepDeaths"
	},
	"CDOTA_PlayerResource_IncrementStreak":
	{
		"body":"IncrementStreak(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IncrementStreak:\n\nreturn void",
		"prefix":"IncrementStreak"
	},
	"CDOTA_PlayerResource_IncrementTotalEarnedXP":
	{
		"body":"IncrementTotalEarnedXP(${iPlayerID}, ${iXP}, ${nReason})",
		"description":"CDOTA_PlayerResource_IncrementTotalEarnedXP:\n\nreturn void",
		"prefix":"IncrementTotalEarnedXP"
	},
	"CDOTA_PlayerResource_IsBroadcaster":
	{
		"body":"IsBroadcaster(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsBroadcaster:\n\nreturn bool",
		"prefix":"IsBroadcaster"
	},
	"CDOTA_PlayerResource_IsDisableHelpSetForPlayerID":
	{
		"body":"IsDisableHelpSetForPlayerID(${nPlayerID}, ${nOtherPlayerID})",
		"description":"CDOTA_PlayerResource_IsDisableHelpSetForPlayerID:\n\nreturn bool",
		"prefix":"IsDisableHelpSetForPlayerID"
	},
	"CDOTA_PlayerResource_IsFakeClient":
	{
		"body":"IsFakeClient(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsFakeClient:\n\nreturn bool",
		"prefix":"IsFakeClient"
	},
	"CDOTA_PlayerResource_IsHeroSelected":
	{
		"body":"IsHeroSelected(${pHeroname})",
		"description":"CDOTA_PlayerResource_IsHeroSelected:\n\nreturn bool",
		"prefix":"IsHeroSelected"
	},
	"CDOTA_PlayerResource_IsHeroSharedWithPlayerID":
	{
		"body":"IsHeroSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})",
		"description":"CDOTA_PlayerResource_IsHeroSharedWithPlayerID:\n\nreturn bool",
		"prefix":"IsHeroSharedWithPlayerID"
	},
	"CDOTA_PlayerResource_IsValidPlayer":
	{
		"body":"IsValidPlayer(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsValidPlayer:\n\nreturn bool",
		"prefix":"IsValidPlayer"
	},
	"CDOTA_PlayerResource_IsValidPlayerID":
	{
		"body":"IsValidPlayerID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsValidPlayerID:\n\nreturn bool",
		"prefix":"IsValidPlayerID"
	},
	"CDOTA_PlayerResource_IsValidTeamPlayer":
	{
		"body":"IsValidTeamPlayer(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsValidTeamPlayer:\n\nreturn bool",
		"prefix":"IsValidTeamPlayer"
	},
	"CDOTA_PlayerResource_IsValidTeamPlayerID":
	{
		"body":"IsValidTeamPlayerID(${iPlayerID})",
		"description":"CDOTA_PlayerResource_IsValidTeamPlayerID:\n\nreturn bool",
		"prefix":"IsValidTeamPlayerID"
	},
	"CDOTA_PlayerResource_ModifyGold":
	{
		"body":"ModifyGold(${iPlayerID}, ${iGoldChange}, ${bReliable}, ${nReason})",
		"description":"CDOTA_PlayerResource_ModifyGold:\n\nreturn int",
		"prefix":"ModifyGold"
	},
	"CDOTA_PlayerResource_NumPlayers":
	{
		"body":"NumPlayers()",
		"description":"CDOTA_PlayerResource_NumPlayers:\n\nreturn int",
		"prefix":"NumPlayers"
	},
	"CDOTA_PlayerResource_NumTeamPlayers":
	{
		"body":"NumTeamPlayers()",
		"description":"CDOTA_PlayerResource_NumTeamPlayers:\n\nreturn int",
		"prefix":"NumTeamPlayers"
	},
	"CDOTA_PlayerResource_RecordConsumableAbilityChargeChange":
	{
		"body":"RecordConsumableAbilityChargeChange(${iPlayerID}, ${item_definition_index}, ${nChargeIncrementOrDecrement})",
		"description":"CDOTA_PlayerResource_RecordConsumableAbilityChargeChange:\nIncrement or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)\nreturn void",
		"prefix":"RecordConsumableAbilityChargeChange"
	},
	"CDOTA_PlayerResource_ReplaceHeroWith":
	{
		"body":"ReplaceHeroWith(${iPlayerID}, ${pszHeroClass}, ${nGold}, ${nXP})",
		"description":"CDOTA_PlayerResource_ReplaceHeroWith:\n(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP\nreturn handle",
		"prefix":"ReplaceHeroWith"
	},
	"CDOTA_PlayerResource_ResetBuybackCostTime":
	{
		"body":"ResetBuybackCostTime(${nPlayerID})",
		"description":"CDOTA_PlayerResource_ResetBuybackCostTime:\n\nreturn void",
		"prefix":"ResetBuybackCostTime"
	},
	"CDOTA_PlayerResource_ResetTotalEarnedGold":
	{
		"body":"ResetTotalEarnedGold(${iPlayerID})",
		"description":"CDOTA_PlayerResource_ResetTotalEarnedGold:\n\nreturn void",
		"prefix":"ResetTotalEarnedGold"
	},
	"CDOTA_PlayerResource_SetBuybackCooldownTime":
	{
		"body":"SetBuybackCooldownTime(${nPlayerID}, ${flBuybackCooldown})",
		"description":"CDOTA_PlayerResource_SetBuybackCooldownTime:\n\nreturn void",
		"prefix":"SetBuybackCooldownTime"
	},
	"CDOTA_PlayerResource_SetBuybackGoldLimitTime":
	{
		"body":"SetBuybackGoldLimitTime(${nPlayerID}, ${flBuybackCooldown})",
		"description":"CDOTA_PlayerResource_SetBuybackGoldLimitTime:\n\nreturn void",
		"prefix":"SetBuybackGoldLimitTime"
	},
	"CDOTA_PlayerResource_SetCameraTarget":
	{
		"body":"SetCameraTarget(${nPlayerID}, ${hTarget})",
		"description":"CDOTA_PlayerResource_SetCameraTarget:\n(playerID, entity) - force the given player's camera to follow the given entity\nreturn void",
		"prefix":"SetCameraTarget"
	},
	"CDOTA_PlayerResource_SetCanRepick":
	{
		"body":"SetCanRepick(${iPlayerID}, ${bCanRepick})",
		"description":"CDOTA_PlayerResource_SetCanRepick:\n\nreturn void",
		"prefix":"SetCanRepick"
	},
	"CDOTA_PlayerResource_SetCustomBuybackCooldown":
	{
		"body":"SetCustomBuybackCooldown(${iPlayerID}, ${flCooldownTime})",
		"description":"CDOTA_PlayerResource_SetCustomBuybackCooldown:\nSet the buyback cooldown for this player.\nreturn void",
		"prefix":"SetCustomBuybackCooldown"
	},
	"CDOTA_PlayerResource_SetCustomBuybackCost":
	{
		"body":"SetCustomBuybackCost(${iPlayerID}, ${iGoldCost})",
		"description":"CDOTA_PlayerResource_SetCustomBuybackCost:\nSet the buyback cost for this player.\nreturn void",
		"prefix":"SetCustomBuybackCost"
	},
	"CDOTA_PlayerResource_SetCustomPlayerColor":
	{
		"body":"SetCustomPlayerColor(${iPlayerID}, ${r}, ${g}, ${b})",
		"description":"CDOTA_PlayerResource_SetCustomPlayerColor:\nSet custom color for player (minimap, scoreboard, etc)\nreturn void",
		"prefix":"SetCustomPlayerColor"
	},
	"CDOTA_PlayerResource_SetCustomTeamAssignment":
	{
		"body":"SetCustomTeamAssignment(${iPlayerID}, ${iTeamAssignment})",
		"description":"CDOTA_PlayerResource_SetCustomTeamAssignment:\nSet custom team assignment for this player.\nreturn void",
		"prefix":"SetCustomTeamAssignment"
	},
	"CDOTA_PlayerResource_SetGold":
	{
		"body":"SetGold(${iPlayerID}, ${iGold}, ${bReliable})",
		"description":"CDOTA_PlayerResource_SetGold:\n\nreturn void",
		"prefix":"SetGold"
	},
	"CDOTA_PlayerResource_SetHasRandomed":
	{
		"body":"SetHasRandomed(${iPlayerID})",
		"description":"CDOTA_PlayerResource_SetHasRandomed:\n\nreturn void",
		"prefix":"SetHasRandomed"
	},
	"CDOTA_PlayerResource_SetLastBuybackTime":
	{
		"body":"SetLastBuybackTime(${iPlayerID}, ${iLastBuybackTime})",
		"description":"CDOTA_PlayerResource_SetLastBuybackTime:\n\nreturn void",
		"prefix":"SetLastBuybackTime"
	},
	"CDOTA_PlayerResource_SetOverrideSelectionEntity":
	{
		"body":"SetOverrideSelectionEntity(${nPlayerID}, ${hEntity})",
		"description":"CDOTA_PlayerResource_SetOverrideSelectionEntity:\nSet the forced selection entity for a player.\nreturn void",
		"prefix":"SetOverrideSelectionEntity"
	},
	"CDOTA_PlayerResource_SetUnitShareMaskForPlayer":
	{
		"body":"SetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID}, ${nFlag}, ${bState})",
		"description":"CDOTA_PlayerResource_SetUnitShareMaskForPlayer:\n\nreturn void",
		"prefix":"SetUnitShareMaskForPlayer"
	},
	"CDOTA_PlayerResource_SpendGold":
	{
		"body":"SpendGold(${iPlayerID}, ${iCost}, ${iReason})",
		"description":"CDOTA_PlayerResource_SpendGold:\n\nreturn void",
		"prefix":"SpendGold"
	},
	"CDOTA_PlayerResource_UpdateTeamSlot":
	{
		"body":"UpdateTeamSlot(${iPlayerID}, ${iTeamNumber}, ${desiredSlot})",
		"description":"CDOTA_PlayerResource_UpdateTeamSlot:\n\nreturn void",
		"prefix":"UpdateTeamSlot"
	},
	"CDOTA_PlayerResource_WhoSelectedHero":
	{
		"body":"WhoSelectedHero(${pHeroFilename})",
		"description":"CDOTA_PlayerResource_WhoSelectedHero:\n\nreturn int",
		"prefix":"WhoSelectedHero"
	},
	"CDOTA_ShopTrigger_GetShopType":
	{
		"body":"GetShopType()",
		"description":"CDOTA_ShopTrigger_GetShopType:\nGet the DOTA_SHOP_TYPE\nreturn int",
		"prefix":"GetShopType"
	},
	"CDOTA_ShopTrigger_SetShopType":
	{
		"body":"SetShopType(${eShopType})",
		"description":"CDOTA_ShopTrigger_SetShopType:\nSet the DOTA_SHOP_TYPE.\nreturn void",
		"prefix":"SetShopType"
	},
	"CDOTA_SimpleObstruction_IsEnabled":
	{
		"body":"IsEnabled()",
		"description":"CDOTA_SimpleObstruction_IsEnabled:\nReturns whether the obstruction is currently active\nreturn bool",
		"prefix":"IsEnabled"
	},
	"CDOTA_SimpleObstruction_SetEnabled":
	{
		"body":"SetEnabled(${bEnabled}, ${bForce})",
		"description":"CDOTA_SimpleObstruction_SetEnabled:\nEnable or disable the obstruction\nreturn void",
		"prefix":"SetEnabled"
	},
	"CDOTA_Unit_Courier_UpgradeToFlyingCourier":
	{
		"body":"UpgradeToFlyingCourier()",
		"description":"CDOTA_Unit_Courier_UpgradeToFlyingCourier:\nUpgrade to a flying courier\nreturn bool",
		"prefix":"UpgradeToFlyingCourier"
	},
	"CDOTA_Unit_Nian_GetHorn":
	{
		"body":"GetHorn()",
		"description":"CDOTA_Unit_Nian_GetHorn:\nIs the Nian horn?\nreturn handle",
		"prefix":"GetHorn"
	},
	"CDOTA_Unit_Nian_GetTail":
	{
		"body":"GetTail()",
		"description":"CDOTA_Unit_Nian_GetTail:\nIs the Nian's tail broken?\nreturn handle",
		"prefix":"GetTail"
	},
	"CDOTA_Unit_Nian_IsHornAlive":
	{
		"body":"IsHornAlive()",
		"description":"CDOTA_Unit_Nian_IsHornAlive:\nIs the Nian's horn broken?\nreturn bool",
		"prefix":"IsHornAlive"
	},
	"CDOTA_Unit_Nian_IsTailAlive":
	{
		"body":"IsTailAlive()",
		"description":"CDOTA_Unit_Nian_IsTailAlive:\nIs the Nian's tail broken?\nreturn bool",
		"prefix":"IsTailAlive"
	},
	"CDebugOverlayScriptHelper_Axis":
	{
		"body":"Axis(${Vector_1}, ${Quaternion_2}, ${float_3}, ${bool_4}, ${float_5})",
		"description":"CDebugOverlayScriptHelper_Axis:\nDraws an axis. Specify origin + orientation in world space.\nreturn void",
		"prefix":"Axis"
	},
	"CDebugOverlayScriptHelper_Box":
	{
		"body":"Box(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_Box:\nDraws a world-space axis-aligned box. Specify bounds in world space.\nreturn void",
		"prefix":"Box"
	},
	"CDebugOverlayScriptHelper_BoxAngles":
	{
		"body":"BoxAngles(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Quaternion_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_BoxAngles:\nDraws an oriented box at the origin. Specify bounds in local space.\nreturn void",
		"prefix":"BoxAngles"
	},
	"CDebugOverlayScriptHelper_Capsule":
	{
		"body":"Capsule(${Vector_1}, ${Quaternion_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_Capsule:\nDraws a capsule. Specify base in world space.\nreturn void",
		"prefix":"Capsule"
	},
	"CDebugOverlayScriptHelper_Circle":
	{
		"body":"Circle(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_Circle:\nDraws a circle. Specify center in world space.\nreturn void",
		"prefix":"Circle"
	},
	"CDebugOverlayScriptHelper_CircleScreenOriented":
	{
		"body":"CircleScreenOriented(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_CircleScreenOriented:\nDraws a circle oriented to the screen. Specify center in world space.\nreturn void",
		"prefix":"CircleScreenOriented"
	},
	"CDebugOverlayScriptHelper_Cone":
	{
		"body":"Cone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_Cone:\nDraws a wireframe cone. Specify endpoint and direction in world space.\nreturn void",
		"prefix":"Cone"
	},
	"CDebugOverlayScriptHelper_Cross":
	{
		"body":"Cross(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_Cross:\nDraws a screen-aligned cross. Specify origin in world space.\nreturn void",
		"prefix":"Cross"
	},
	"CDebugOverlayScriptHelper_Cross3D":
	{
		"body":"Cross3D(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_Cross3D:\nDraws a world-aligned cross. Specify origin in world space.\nreturn void",
		"prefix":"Cross3D"
	},
	"CDebugOverlayScriptHelper_Cross3DOriented":
	{
		"body":"Cross3DOriented(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_Cross3DOriented:\nDraws an oriented cross. Specify origin in world space.\nreturn void",
		"prefix":"Cross3DOriented"
	},
	"CDebugOverlayScriptHelper_DrawTickMarkedLine":
	{
		"body":"DrawTickMarkedLine(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_DrawTickMarkedLine:\nDraws a dashed line. Specify endpoints in world space.\nreturn void",
		"prefix":"DrawTickMarkedLine"
	},
	"CDebugOverlayScriptHelper_EntityAttachments":
	{
		"body":"EntityAttachments(${ehandle_1}, ${float_2}, ${float_3})",
		"description":"CDebugOverlayScriptHelper_EntityAttachments:\nDraws the attachments of the entity\nreturn void",
		"prefix":"EntityAttachments"
	},
	"CDebugOverlayScriptHelper_EntityAxis":
	{
		"body":"EntityAxis(${ehandle_1}, ${float_2}, ${bool_3}, ${float_4})",
		"description":"CDebugOverlayScriptHelper_EntityAxis:\nDraws the axis of the entity origin\nreturn void",
		"prefix":"EntityAxis"
	},
	"CDebugOverlayScriptHelper_EntityBounds":
	{
		"body":"EntityBounds(${ehandle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7})",
		"description":"CDebugOverlayScriptHelper_EntityBounds:\nDraws bounds of an entity\nreturn void",
		"prefix":"EntityBounds"
	},
	"CDebugOverlayScriptHelper_EntitySkeleton":
	{
		"body":"EntitySkeleton(${ehandle_1}, ${float_2})",
		"description":"CDebugOverlayScriptHelper_EntitySkeleton:\nDraws the skeleton of the entity\nreturn void",
		"prefix":"EntitySkeleton"
	},
	"CDebugOverlayScriptHelper_EntityText":
	{
		"body":"EntityText(${ehandle_1}, ${int_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_EntityText:\nDraws text on an entity\nreturn void",
		"prefix":"EntityText"
	},
	"CDebugOverlayScriptHelper_FilledRect2D":
	{
		"body":"FilledRect2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})",
		"description":"CDebugOverlayScriptHelper_FilledRect2D:\nDraws a screen-space filled 2D rectangle. Coordinates are in pixels.\nreturn void",
		"prefix":"FilledRect2D"
	},
	"CDebugOverlayScriptHelper_HorzArrow":
	{
		"body":"HorzArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_HorzArrow:\nDraws a horizontal arrow. Specify endpoints in world space.\nreturn void",
		"prefix":"HorzArrow"
	},
	"CDebugOverlayScriptHelper_Line":
	{
		"body":"Line(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_Line:\nDraws a line between two points\nreturn void",
		"prefix":"Line"
	},
	"CDebugOverlayScriptHelper_Line2D":
	{
		"body":"Line2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})",
		"description":"CDebugOverlayScriptHelper_Line2D:\nDraws a line between two points in screenspace\nreturn void",
		"prefix":"Line2D"
	},
	"CDebugOverlayScriptHelper_PopDebugOverlayScope":
	{
		"body":"PopDebugOverlayScope()",
		"description":"CDebugOverlayScriptHelper_PopDebugOverlayScope:\nPops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.\nreturn void",
		"prefix":"PopDebugOverlayScope"
	},
	"CDebugOverlayScriptHelper_PushAndClearDebugOverlayScope":
	{
		"body":"PushAndClearDebugOverlayScope(${utlstringtoken_1})",
		"description":"CDebugOverlayScriptHelper_PushAndClearDebugOverlayScope:\nPushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.\nreturn void",
		"prefix":"PushAndClearDebugOverlayScope"
	},
	"CDebugOverlayScriptHelper_PushDebugOverlayScope":
	{
		"body":"PushDebugOverlayScope(${utlstringtoken_1})",
		"description":"CDebugOverlayScriptHelper_PushDebugOverlayScope:\nPushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.\nreturn void",
		"prefix":"PushDebugOverlayScope"
	},
	"CDebugOverlayScriptHelper_RemoveAllInScope":
	{
		"body":"RemoveAllInScope(${utlstringtoken_1})",
		"description":"CDebugOverlayScriptHelper_RemoveAllInScope:\nRemoves all overlays marked with a specific identifier, regardless of their lifetime.\nreturn void",
		"prefix":"RemoveAllInScope"
	},
	"CDebugOverlayScriptHelper_SolidCone":
	{
		"body":"SolidCone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_SolidCone:\nDraws a solid cone. Specify endpoint and direction in world space.\nreturn void",
		"prefix":"SolidCone"
	},
	"CDebugOverlayScriptHelper_Sphere":
	{
		"body":"Sphere(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})",
		"description":"CDebugOverlayScriptHelper_Sphere:\nDraws a wireframe sphere. Specify center in world space.\nreturn void",
		"prefix":"Sphere"
	},
	"CDebugOverlayScriptHelper_SweptBox":
	{
		"body":"SweptBox(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Quaternion_5}, ${int_6}, ${int_7}, ${int_8}, ${int_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_SweptBox:\nDraws a swept box. Specify endpoints in world space and the bounds in local space.\nreturn void",
		"prefix":"SweptBox"
	},
	"CDebugOverlayScriptHelper_Text":
	{
		"body":"Text(${Vector_1}, ${int_2}, ${string_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_Text:\nDraws 2D text. Specify origin in world space.\nreturn void",
		"prefix":"Text"
	},
	"CDebugOverlayScriptHelper_Texture":
	{
		"body":"Texture(${string_1}, ${Vector2D_2}, ${Vector2D_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${Vector2D_8}, ${Vector2D_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_Texture:\nDraws a screen-space texture. Coordinates are in pixels.\nreturn void",
		"prefix":"Texture"
	},
	"CDebugOverlayScriptHelper_Triangle":
	{
		"body":"Triangle(${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_Triangle:\nDraws a filled triangle. Specify vertices in world space.\nreturn void",
		"prefix":"Triangle"
	},
	"CDebugOverlayScriptHelper_UnitTestCycleOverlayRenderType":
	{
		"body":"UnitTestCycleOverlayRenderType()",
		"description":"CDebugOverlayScriptHelper_UnitTestCycleOverlayRenderType:\nToggles the overlay render type, for unit tests\nreturn void",
		"prefix":"UnitTestCycleOverlayRenderType"
	},
	"CDebugOverlayScriptHelper_VectorText3D":
	{
		"body":"VectorText3D(${Vector_1}, ${Quaternion_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_VectorText3D:\nDraws 3D text. Specify origin + orientation in world space.\nreturn void",
		"prefix":"VectorText3D"
	},
	"CDebugOverlayScriptHelper_VertArrow":
	{
		"body":"VertArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})",
		"description":"CDebugOverlayScriptHelper_VertArrow:\nDraws a vertical arrow. Specify endpoints in world space.\nreturn void",
		"prefix":"VertArrow"
	},
	"CDebugOverlayScriptHelper_YawArrow":
	{
		"body":"YawArrow(${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})",
		"description":"CDebugOverlayScriptHelper_YawArrow:\nDraws a arrow associated with a specific yaw. Specify endpoints in world space.\nreturn void",
		"prefix":"YawArrow"
	},
	"CDotaQuest_AddSubquest":
	{
		"body":"AddSubquest(${hSubquest})",
		"description":"CDotaQuest_AddSubquest:\nAdd a subquest to this quest\nreturn void",
		"prefix":"AddSubquest"
	},
	"CDotaQuest_CompleteQuest":
	{
		"body":"CompleteQuest()",
		"description":"CDotaQuest_CompleteQuest:\nMark this quest complete\nreturn void",
		"prefix":"CompleteQuest"
	},
	"CDotaQuest_GetSubquest":
	{
		"body":"GetSubquest(${nIndex})",
		"description":"CDotaQuest_GetSubquest:\nFinds a subquest from this quest by index\nreturn handle",
		"prefix":"GetSubquest"
	},
	"CDotaQuest_GetSubquestByName":
	{
		"body":"GetSubquestByName(${pszName})",
		"description":"CDotaQuest_GetSubquestByName:\nFinds a subquest from this quest by name\nreturn handle",
		"prefix":"GetSubquestByName"
	},
	"CDotaQuest_RemoveSubquest":
	{
		"body":"RemoveSubquest(${hSubquest})",
		"description":"CDotaQuest_RemoveSubquest:\nRemove a subquest from this quest\nreturn void",
		"prefix":"RemoveSubquest"
	},
	"CDotaQuest_SetTextReplaceString":
	{
		"body":"SetTextReplaceString(${pszString})",
		"description":"CDotaQuest_SetTextReplaceString:\nSet the text replace string for this quest\nreturn void",
		"prefix":"SetTextReplaceString"
	},
	"CDotaQuest_SetTextReplaceValue":
	{
		"body":"SetTextReplaceValue(${valueSlot}, ${value})",
		"description":"CDotaQuest_SetTextReplaceValue:\nSet a quest value\nreturn void",
		"prefix":"SetTextReplaceValue"
	},
	"CDotaSubquestBase_CompleteSubquest":
	{
		"body":"CompleteSubquest()",
		"description":"CDotaSubquestBase_CompleteSubquest:\nMark this subquest complete\nreturn void",
		"prefix":"CompleteSubquest"
	},
	"CDotaSubquestBase_SetTextReplaceString":
	{
		"body":"SetTextReplaceString(${pszString})",
		"description":"CDotaSubquestBase_SetTextReplaceString:\nSet the text replace string for this subquest\nreturn void",
		"prefix":"SetTextReplaceString"
	},
	"CDotaSubquestBase_SetTextReplaceValue":
	{
		"body":"SetTextReplaceValue(${valueSlot}, ${value})",
		"description":"CDotaSubquestBase_SetTextReplaceValue:\nSet a subquest value\nreturn void",
		"prefix":"SetTextReplaceValue"
	},
	"CEntities_CreateByClassname":
	{
		"body":"CreateByClassname(${string_1})",
		"description":"CEntities_CreateByClassname:\nCreates an entity by classname\nreturn handle",
		"prefix":"CreateByClassname"
	},
	"CEntities_FindAllByClassname":
	{
		"body":"FindAllByClassname(${string_1})",
		"description":"CEntities_FindAllByClassname:\nFinds all entities by class name. Returns an array containing all the found entities.\nreturn table",
		"prefix":"FindAllByClassname"
	},
	"CEntities_FindAllByClassnameWithin":
	{
		"body":"FindAllByClassnameWithin(${string_1}, ${Vector_2}, ${float_3})",
		"description":"CEntities_FindAllByClassnameWithin:\nFind entities by class name within a radius.\nreturn table",
		"prefix":"FindAllByClassnameWithin"
	},
	"CEntities_FindAllByModel":
	{
		"body":"FindAllByModel(${string_1})",
		"description":"CEntities_FindAllByModel:\nFind entities by model name.\nreturn table",
		"prefix":"FindAllByModel"
	},
	"CEntities_FindAllByName":
	{
		"body":"FindAllByName(${string_1})",
		"description":"CEntities_FindAllByName:\nFind all entities by name. Returns an array containing all the found entities in it.\nreturn table",
		"prefix":"FindAllByName"
	},
	"CEntities_FindAllByNameWithin":
	{
		"body":"FindAllByNameWithin(${string_1}, ${Vector_2}, ${float_3})",
		"description":"CEntities_FindAllByNameWithin:\nFind entities by name within a radius.\nreturn table",
		"prefix":"FindAllByNameWithin"
	},
	"CEntities_FindAllByTarget":
	{
		"body":"FindAllByTarget(${string_1})",
		"description":"CEntities_FindAllByTarget:\nFind entities by targetname.\nreturn table",
		"prefix":"FindAllByTarget"
	},
	"CEntities_FindAllInSphere":
	{
		"body":"FindAllInSphere(${Vector_1}, ${float_2})",
		"description":"CEntities_FindAllInSphere:\nFind entities within a radius.\nreturn table",
		"prefix":"FindAllInSphere"
	},
	"CEntities_FindByClassname":
	{
		"body":"FindByClassname(${handle_1}, ${string_2})",
		"description":"CEntities_FindByClassname:\nFind entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByClassname"
	},
	"CEntities_FindByClassnameNearest":
	{
		"body":"FindByClassnameNearest(${string_1}, ${Vector_2}, ${float_3})",
		"description":"CEntities_FindByClassnameNearest:\nFind entities by class name nearest to a point.\nreturn handle",
		"prefix":"FindByClassnameNearest"
	},
	"CEntities_FindByClassnameWithin":
	{
		"body":"FindByClassnameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})",
		"description":"CEntities_FindByClassnameWithin:\nFind entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByClassnameWithin"
	},
	"CEntities_FindByModel":
	{
		"body":"FindByModel(${handle_1}, ${string_2})",
		"description":"CEntities_FindByModel:\nFind entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByModel"
	},
	"CEntities_FindByModelWithin":
	{
		"body":"FindByModelWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})",
		"description":"CEntities_FindByModelWithin:\nFind entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByModelWithin"
	},
	"CEntities_FindByName":
	{
		"body":"FindByName(${handle_1}, ${string_2})",
		"description":"CEntities_FindByName:\nFind entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByName"
	},
	"CEntities_FindByNameNearest":
	{
		"body":"FindByNameNearest(${string_1}, ${Vector_2}, ${float_3})",
		"description":"CEntities_FindByNameNearest:\nFind entities by name nearest to a point.\nreturn handle",
		"prefix":"FindByNameNearest"
	},
	"CEntities_FindByNameWithin":
	{
		"body":"FindByNameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})",
		"description":"CEntities_FindByNameWithin:\nFind entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByNameWithin"
	},
	"CEntities_FindByTarget":
	{
		"body":"FindByTarget(${handle_1}, ${string_2})",
		"description":"CEntities_FindByTarget:\nFind entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindByTarget"
	},
	"CEntities_FindInSphere":
	{
		"body":"FindInSphere(${handle_1}, ${Vector_2}, ${float_3})",
		"description":"CEntities_FindInSphere:\nFind entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search\nreturn handle",
		"prefix":"FindInSphere"
	},
	"CEntities_First":
	{
		"body":"First()",
		"description":"CEntities_First:\nBegin an iteration over the list of entities\nreturn handle",
		"prefix":"First"
	},
	"CEntities_GetLocalPlayer":
	{
		"body":"GetLocalPlayer()",
		"description":"CEntities_GetLocalPlayer:\nGet the local player.\nreturn handle",
		"prefix":"GetLocalPlayer"
	},
	"CEntities_Next":
	{
		"body":"Next(${handle_1})",
		"description":"CEntities_Next:\nContinue an iteration over the list of entities, providing reference to a previously found entity\nreturn handle",
		"prefix":"Next"
	},
	"CEntityInstance_ConnectOutput":
	{
		"body":"ConnectOutput(${string_1}, ${string_2})",
		"description":"CEntityInstance_ConnectOutput:\nAdds an I/O connection that will call the named function on this entity when the specified output fires.\nreturn void",
		"prefix":"ConnectOutput"
	},
	"CEntityInstance_Destroy":
	{
		"body":"Destroy()",
		"description":"CEntityInstance_Destroy:\n\nreturn void",
		"prefix":"Destroy"
	},
	"CEntityInstance_DisconnectOutput":
	{
		"body":"DisconnectOutput(${string_1}, ${string_2})",
		"description":"CEntityInstance_DisconnectOutput:\nRemoves a connected script function from an I/O event on this entity.\nreturn void",
		"prefix":"DisconnectOutput"
	},
	"CEntityInstance_DisconnectRedirectedOutput":
	{
		"body":"DisconnectRedirectedOutput(${string_1}, ${string_2}, ${handle_3})",
		"description":"CEntityInstance_DisconnectRedirectedOutput:\nRemoves a connected script function from an I/O event on the passed entity.\nreturn void",
		"prefix":"DisconnectRedirectedOutput"
	},
	"CEntityInstance_FireOutput":
	{
		"body":"FireOutput(${string_1}, ${handle_2}, ${handle_3}, ${table_4}, ${float_5})",
		"description":"CEntityInstance_FireOutput:\nFire an entity output\nreturn void",
		"prefix":"FireOutput"
	},
	"CEntityInstance_GetClassname":
	{
		"body":"GetClassname()",
		"description":"CEntityInstance_GetClassname:\n\nreturn string",
		"prefix":"GetClassname"
	},
	"CEntityInstance_GetDebugName":
	{
		"body":"GetDebugName()",
		"description":"CEntityInstance_GetDebugName:\nGet the entity name w/help if not defined (i.e. classname/etc)\nreturn string",
		"prefix":"GetDebugName"
	},
	"CEntityInstance_GetEntityHandle":
	{
		"body":"GetEntityHandle()",
		"description":"CEntityInstance_GetEntityHandle:\nGet the entity as an EHANDLE\nreturn ehandle",
		"prefix":"GetEntityHandle"
	},
	"CEntityInstance_GetEntityIndex":
	{
		"body":"GetEntityIndex()",
		"description":"CEntityInstance_GetEntityIndex:\n\nreturn int",
		"prefix":"GetEntityIndex"
	},
	"CEntityInstance_GetIntAttr":
	{
		"body":"GetIntAttr(${string_1})",
		"description":"CEntityInstance_GetIntAttr:\nGet Integer Attribute\nreturn int",
		"prefix":"GetIntAttr"
	},
	"CEntityInstance_GetName":
	{
		"body":"GetName()",
		"description":"CEntityInstance_GetName:\n\nreturn string",
		"prefix":"GetName"
	},
	"CEntityInstance_GetOrCreatePrivateScriptScope":
	{
		"body":"GetOrCreatePrivateScriptScope()",
		"description":"CEntityInstance_GetOrCreatePrivateScriptScope:\nRetrieve, creating if necessary, the private per-instance script-side data associated with an entity\nreturn handle",
		"prefix":"GetOrCreatePrivateScriptScope"
	},
	"CEntityInstance_GetOrCreatePublicScriptScope":
	{
		"body":"GetOrCreatePublicScriptScope()",
		"description":"CEntityInstance_GetOrCreatePublicScriptScope:\nRetrieve, creating if necessary, the public script-side data associated with an entity\nreturn handle",
		"prefix":"GetOrCreatePublicScriptScope"
	},
	"CEntityInstance_GetPrivateScriptScope":
	{
		"body":"GetPrivateScriptScope()",
		"description":"CEntityInstance_GetPrivateScriptScope:\nRetrieve the private per-instance script-side data associated with an entity\nreturn handle",
		"prefix":"GetPrivateScriptScope"
	},
	"CEntityInstance_GetPublicScriptScope":
	{
		"body":"GetPublicScriptScope()",
		"description":"CEntityInstance_GetPublicScriptScope:\nRetrieve the public script-side data associated with an entity\nreturn handle",
		"prefix":"GetPublicScriptScope"
	},
	"CEntityInstance_RedirectOutput":
	{
		"body":"RedirectOutput(${string_1}, ${string_2}, ${handle_3})",
		"description":"CEntityInstance_RedirectOutput:\nAdds an I/O connection that will call the named function on the passed entity when the specified output fires.\nreturn void",
		"prefix":"RedirectOutput"
	},
	"CEntityInstance_RemoveSelf":
	{
		"body":"RemoveSelf()",
		"description":"CEntityInstance_RemoveSelf:\nDelete this entity\nreturn void",
		"prefix":"RemoveSelf"
	},
	"CEntityInstance_SetIntAttr":
	{
		"body":"SetIntAttr(${string_1}, ${int_2})",
		"description":"CEntityInstance_SetIntAttr:\nSet Integer Attribute\nreturn void",
		"prefix":"SetIntAttr"
	},
	"CEntityInstance_entindex":
	{
		"body":"entindex()",
		"description":"CEntityInstance_entindex:\n\nreturn int",
		"prefix":"entindex"
	},
	"CEnvEntityMaker_SpawnEntity":
	{
		"body":"SpawnEntity()",
		"description":"CEnvEntityMaker_SpawnEntity:\nCreate an entity at the location of the maker\nreturn void",
		"prefix":"SpawnEntity"
	},
	"CEnvEntityMaker_SpawnEntityAtEntityOrigin":
	{
		"body":"SpawnEntityAtEntityOrigin(${hEntity})",
		"description":"CEnvEntityMaker_SpawnEntityAtEntityOrigin:\nCreate an entity at the location of a specified entity instance\nreturn void",
		"prefix":"SpawnEntityAtEntityOrigin"
	},
	"CEnvEntityMaker_SpawnEntityAtLocation":
	{
		"body":"SpawnEntityAtLocation(${vecAlternateOrigin}, ${vecAlternateAngles})",
		"description":"CEnvEntityMaker_SpawnEntityAtLocation:\nCreate an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)\nreturn void",
		"prefix":"SpawnEntityAtLocation"
	},
	"CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin":
	{
		"body":"SpawnEntityAtNamedEntityOrigin(${pszName})",
		"description":"CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin:\nCreate an entity at the location of a named entity\nreturn void",
		"prefix":"SpawnEntityAtNamedEntityOrigin"
	},
	"CEnvProjectedTexture_SetFarRange":
	{
		"body":"SetFarRange(${flRange})",
		"description":"CEnvProjectedTexture_SetFarRange:\nSet light maximum range\nreturn void",
		"prefix":"SetFarRange"
	},
	"CEnvProjectedTexture_SetLinearAttenuation":
	{
		"body":"SetLinearAttenuation(${flAtten})",
		"description":"CEnvProjectedTexture_SetLinearAttenuation:\nSet light linear attenuation value\nreturn void",
		"prefix":"SetLinearAttenuation"
	},
	"CEnvProjectedTexture_SetNearRange":
	{
		"body":"SetNearRange(${flRange})",
		"description":"CEnvProjectedTexture_SetNearRange:\nSet light minimum range\nreturn void",
		"prefix":"SetNearRange"
	},
	"CEnvProjectedTexture_SetQuadraticAttenuation":
	{
		"body":"SetQuadraticAttenuation(${flAtten})",
		"description":"CEnvProjectedTexture_SetQuadraticAttenuation:\nSet light quadratic attenuation value\nreturn void",
		"prefix":"SetQuadraticAttenuation"
	},
	"CEnvProjectedTexture_SetVolumetrics":
	{
		"body":"SetVolumetrics(${bOn}, ${flIntensity}, ${flNoise}, ${nPlanes}, ${flPlaneOffset})",
		"description":"CEnvProjectedTexture_SetVolumetrics:\nTurn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset\nreturn void",
		"prefix":"SetVolumetrics"
	},
	"CInfoData_QueryColor":
	{
		"body":"QueryColor(${tok}, ${vDefault})",
		"description":"CInfoData_QueryColor:\nQuery color data for this key\nreturn Vector",
		"prefix":"QueryColor"
	},
	"CInfoData_QueryFloat":
	{
		"body":"QueryFloat(${tok}, ${flDefault})",
		"description":"CInfoData_QueryFloat:\nQuery float data for this key\nreturn float",
		"prefix":"QueryFloat"
	},
	"CInfoData_QueryInt":
	{
		"body":"QueryInt(${tok}, ${nDefault})",
		"description":"CInfoData_QueryInt:\nQuery int data for this key\nreturn int",
		"prefix":"QueryInt"
	},
	"CInfoData_QueryNumber":
	{
		"body":"QueryNumber(${tok}, ${flDefault})",
		"description":"CInfoData_QueryNumber:\nQuery number data for this key\nreturn float",
		"prefix":"QueryNumber"
	},
	"CInfoData_QueryString":
	{
		"body":"QueryString(${tok}, ${pDefault})",
		"description":"CInfoData_QueryString:\nQuery string data for this key\nreturn string",
		"prefix":"QueryString"
	},
	"CInfoData_QueryVector":
	{
		"body":"QueryVector(${tok}, ${vDefault})",
		"description":"CInfoData_QueryVector:\nQuery vector data for this key\nreturn Vector",
		"prefix":"QueryVector"
	},
	"CInfoWorldLayer_HideWorldLayer":
	{
		"body":"HideWorldLayer()",
		"description":"CInfoWorldLayer_HideWorldLayer:\nHides this layer\nreturn void",
		"prefix":"HideWorldLayer"
	},
	"CInfoWorldLayer_ShowWorldLayer":
	{
		"body":"ShowWorldLayer()",
		"description":"CInfoWorldLayer_ShowWorldLayer:\nShows this layer\nreturn void",
		"prefix":"ShowWorldLayer"
	},
	"CMarkupVolumeTagged_HasTag":
	{
		"body":"HasTag(${pszTagName})",
		"description":"CMarkupVolumeTagged_HasTag:\nDoes this volume have the given tag.\nreturn bool",
		"prefix":"HasTag"
	},
	"CNativeOutputs_AddOutput":
	{
		"body":"AddOutput(${string_1}, ${string_2})",
		"description":"CNativeOutputs_AddOutput:\nAdd an output\nreturn void",
		"prefix":"AddOutput"
	},
	"CNativeOutputs_Init":
	{
		"body":"Init(${int_1})",
		"description":"CNativeOutputs_Init:\nInitialize with number of outputs\nreturn void",
		"prefix":"Init"
	},
	"CPhysicsProp_DisableMotion":
	{
		"body":"DisableMotion()",
		"description":"CPhysicsProp_DisableMotion:\nDisable motion for the prop\nreturn void",
		"prefix":"DisableMotion"
	},
	"CPhysicsProp_EnableMotion":
	{
		"body":"EnableMotion()",
		"description":"CPhysicsProp_EnableMotion:\nEnable motion for the prop\nreturn void",
		"prefix":"EnableMotion"
	},
	"CPhysicsProp_SetDynamicVsDynamicContinuous":
	{
		"body":"SetDynamicVsDynamicContinuous(${bIsDynamicVsDynamicContinuousEnabled})",
		"description":"CPhysicsProp_SetDynamicVsDynamicContinuous:\nEnable/disable dynamic vs dynamic continuous collision traces\nreturn void",
		"prefix":"SetDynamicVsDynamicContinuous"
	},
	"CPointClientUIWorldPanel_AcceptUserInput":
	{
		"body":"AcceptUserInput()",
		"description":"CPointClientUIWorldPanel_AcceptUserInput:\nTells the panel to accept user input.\nreturn void",
		"prefix":"AcceptUserInput"
	},
	"CPointClientUIWorldPanel_AddCSSClasses":
	{
		"body":"AddCSSClasses(${pszClasses})",
		"description":"CPointClientUIWorldPanel_AddCSSClasses:\nAdds CSS class(es) to the panel\nreturn void",
		"prefix":"AddCSSClasses"
	},
	"CPointClientUIWorldPanel_IgnoreUserInput":
	{
		"body":"IgnoreUserInput()",
		"description":"CPointClientUIWorldPanel_IgnoreUserInput:\nTells the panel to ignore user input.\nreturn void",
		"prefix":"IgnoreUserInput"
	},
	"CPointClientUIWorldPanel_IsGrabbable":
	{
		"body":"IsGrabbable()",
		"description":"CPointClientUIWorldPanel_IsGrabbable:\nReturns whether this entity is grabbable.\nreturn bool",
		"prefix":"IsGrabbable"
	},
	"CPointClientUIWorldPanel_RemoveCSSClasses":
	{
		"body":"RemoveCSSClasses(${pszClasses})",
		"description":"CPointClientUIWorldPanel_RemoveCSSClasses:\nRemove CSS class(es) from the panel\nreturn void",
		"prefix":"RemoveCSSClasses"
	},
	"CPointTemplate_DeleteCreatedSpawnGroups":
	{
		"body":"DeleteCreatedSpawnGroups()",
		"description":"CPointTemplate_DeleteCreatedSpawnGroups:\nDeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.\nreturn void",
		"prefix":"DeleteCreatedSpawnGroups"
	},
	"CPointTemplate_ForceSpawn":
	{
		"body":"ForceSpawn()",
		"description":"CPointTemplate_ForceSpawn:\nForceSpawn() : Spawns all of the entities the point_template is pointing at.\nreturn void",
		"prefix":"ForceSpawn"
	},
	"CPointTemplate_GetSpawnedEntities":
	{
		"body":"GetSpawnedEntities()",
		"description":"CPointTemplate_GetSpawnedEntities:\nGetSpawnedEntities() : Get the list of the most recent spawned entities\nreturn handle",
		"prefix":"GetSpawnedEntities"
	},
	"CPointTemplate_SetSpawnCallback":
	{
		"body":"SetSpawnCallback(${hCallbackFunc}, ${hCallbackScope})",
		"description":"CPointTemplate_SetSpawnCallback:\nSetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.\nreturn void",
		"prefix":"SetSpawnCallback"
	},
	"CPointWorldText_SetMessage":
	{
		"body":"SetMessage(${pMessage})",
		"description":"CPointWorldText_SetMessage:\nSet the message on this entity.\nreturn void",
		"prefix":"SetMessage"
	},
	"CPropHMDAvatar_GetVRHand":
	{
		"body":"GetVRHand(${nHandID})",
		"description":"CPropHMDAvatar_GetVRHand:\nGet VR hand by ID\nreturn handle",
		"prefix":"GetVRHand"
	},
	"CPropVRHand_AddHandAttachment":
	{
		"body":"AddHandAttachment(${hAttachment})",
		"description":"CPropVRHand_AddHandAttachment:\nAdd the attachment to this hand\nreturn void",
		"prefix":"AddHandAttachment"
	},
	"CPropVRHand_AddHandModelOverride":
	{
		"body":"AddHandModelOverride(${pModelName})",
		"description":"CPropVRHand_AddHandModelOverride:\nAdd a model override for this hand\nreturn handle",
		"prefix":"AddHandModelOverride"
	},
	"CPropVRHand_FindHandModelOverride":
	{
		"body":"FindHandModelOverride(${pModelName})",
		"description":"CPropVRHand_FindHandModelOverride:\nFind a specific model override for this hand\nreturn handle",
		"prefix":"FindHandModelOverride"
	},
	"CPropVRHand_FireHapticPulse":
	{
		"body":"FireHapticPulse(${nStrength})",
		"description":"CPropVRHand_FireHapticPulse:\nFire a haptic pulse on this hand. [0,2] for strength.\nreturn void",
		"prefix":"FireHapticPulse"
	},
	"CPropVRHand_FireHapticPulsePrecise":
	{
		"body":"FireHapticPulsePrecise(${nPulseDuration})",
		"description":"CPropVRHand_FireHapticPulsePrecise:\nFire a haptic pulse on this hand. Specify the duration in micro seconds.\nreturn void",
		"prefix":"FireHapticPulsePrecise"
	},
	"CPropVRHand_GetHandAttachment":
	{
		"body":"GetHandAttachment()",
		"description":"CPropVRHand_GetHandAttachment:\nGet the attachment on this hand\nreturn handle",
		"prefix":"GetHandAttachment"
	},
	"CPropVRHand_GetHandID":
	{
		"body":"GetHandID()",
		"description":"CPropVRHand_GetHandID:\nGet hand ID\nreturn int",
		"prefix":"GetHandID"
	},
	"CPropVRHand_GetLiteralHandType":
	{
		"body":"GetLiteralHandType()",
		"description":"CPropVRHand_GetLiteralHandType:\nGet literal type for this hand\nreturn int",
		"prefix":"GetLiteralHandType"
	},
	"CPropVRHand_GetPlayer":
	{
		"body":"GetPlayer()",
		"description":"CPropVRHand_GetPlayer:\nGet the player for this hand\nreturn handle",
		"prefix":"GetPlayer"
	},
	"CPropVRHand_GetVelocity":
	{
		"body":"GetVelocity()",
		"description":"CPropVRHand_GetVelocity:\nGet the filtered controller velocity.\nreturn Vector",
		"prefix":"GetVelocity"
	},
	"CPropVRHand_RemoveAllHandModelOverrides":
	{
		"body":"RemoveAllHandModelOverrides()",
		"description":"CPropVRHand_RemoveAllHandModelOverrides:\nRemove all model overrides for this hand\nreturn void",
		"prefix":"RemoveAllHandModelOverrides"
	},
	"CPropVRHand_RemoveHandAttachmentByHandle":
	{
		"body":"RemoveHandAttachmentByHandle(${hAttachment})",
		"description":"CPropVRHand_RemoveHandAttachmentByHandle:\nRemove hand attachment by handle\nreturn void",
		"prefix":"RemoveHandAttachmentByHandle"
	},
	"CPropVRHand_RemoveHandModelOverride":
	{
		"body":"RemoveHandModelOverride(${pModelName})",
		"description":"CPropVRHand_RemoveHandModelOverride:\nRemove a model override for this hand\nreturn void",
		"prefix":"RemoveHandModelOverride"
	},
	"CPropVRHand_SetHandAttachment":
	{
		"body":"SetHandAttachment(${hAttachment})",
		"description":"CPropVRHand_SetHandAttachment:\nSet the attachment for this hand\nreturn void",
		"prefix":"SetHandAttachment"
	},
	"CSceneEntity_AddBroadcastTeamTarget":
	{
		"body":"AddBroadcastTeamTarget(${byindex})",
		"description":"CSceneEntity_AddBroadcastTeamTarget:\nAdds a team (by index) to the broadcast list\nreturn void",
		"prefix":"AddBroadcastTeamTarget"
	},
	"CSceneEntity_Cancel":
	{
		"body":"Cancel()",
		"description":"CSceneEntity_Cancel:\nCancel scene playback\nreturn void",
		"prefix":"Cancel"
	},
	"CSceneEntity_EstimateLength":
	{
		"body":"EstimateLength()",
		"description":"CSceneEntity_EstimateLength:\nReturns length of this scene in seconds.\nreturn float",
		"prefix":"EstimateLength"
	},
	"CSceneEntity_FindCamera":
	{
		"body":"FindCamera()",
		"description":"CSceneEntity_FindCamera:\nGet the camera\nreturn handle",
		"prefix":"FindCamera"
	},
	"CSceneEntity_FindNamedEntity":
	{
		"body":"FindNamedEntity(${string_1})",
		"description":"CSceneEntity_FindNamedEntity:\ngiven an entity reference, such as !target, get actual entity from scene object\nreturn handle",
		"prefix":"FindNamedEntity"
	},
	"CSceneEntity_IsPaused":
	{
		"body":"IsPaused()",
		"description":"CSceneEntity_IsPaused:\nIf this scene is currently paused.\nreturn bool",
		"prefix":"IsPaused"
	},
	"CSceneEntity_IsPlayingBack":
	{
		"body":"IsPlayingBack()",
		"description":"CSceneEntity_IsPlayingBack:\nIf this scene is currently playing.\nreturn bool",
		"prefix":"IsPlayingBack"
	},
	"CSceneEntity_LoadSceneFromString":
	{
		"body":"LoadSceneFromString(${string_1}, ${string_2})",
		"description":"CSceneEntity_LoadSceneFromString:\ngiven a dummy scene name and a vcd string, load the scene\nreturn bool",
		"prefix":"LoadSceneFromString"
	},
	"CSceneEntity_RemoveBroadcastTeamTarget":
	{
		"body":"RemoveBroadcastTeamTarget(${byindex})",
		"description":"CSceneEntity_RemoveBroadcastTeamTarget:\nRemoves a team (by index) from the broadcast list\nreturn void",
		"prefix":"RemoveBroadcastTeamTarget"
	},
	"CSceneEntity_Start":
	{
		"body":"Start(${handle_1})",
		"description":"CSceneEntity_Start:\nStart scene playback, takes activatorEntity as param\nreturn void",
		"prefix":"Start"
	},
	"CScriptHTTPRequest_Send":
	{
		"body":"Send(${handle_1})",
		"description":"CScriptHTTPRequest_Send:\nSend a HTTP request.\nreturn bool",
		"prefix":"Send"
	},
	"CScriptHTTPRequest_SetHTTPRequestAbsoluteTimeoutMS":
	{
		"body":"SetHTTPRequestAbsoluteTimeoutMS(${unsigned_1})",
		"description":"CScriptHTTPRequest_SetHTTPRequestAbsoluteTimeoutMS:\nSet the total timeout on the request.\nreturn bool",
		"prefix":"SetHTTPRequestAbsoluteTimeoutMS"
	},
	"CScriptHTTPRequest_SetHTTPRequestGetOrPostParameter":
	{
		"body":"SetHTTPRequestGetOrPostParameter(${string_1}, ${string_2})",
		"description":"CScriptHTTPRequest_SetHTTPRequestGetOrPostParameter:\nSet a POST or GET parameter on the request.\nreturn bool",
		"prefix":"SetHTTPRequestGetOrPostParameter"
	},
	"CScriptHTTPRequest_SetHTTPRequestHeaderValue":
	{
		"body":"SetHTTPRequestHeaderValue(${string_1}, ${string_2})",
		"description":"CScriptHTTPRequest_SetHTTPRequestHeaderValue:\nSet a header value on the request.\nreturn bool",
		"prefix":"SetHTTPRequestHeaderValue"
	},
	"CScriptHTTPRequest_SetHTTPRequestNetworkActivityTimeout":
	{
		"body":"SetHTTPRequestNetworkActivityTimeout(${unsigned_1})",
		"description":"CScriptHTTPRequest_SetHTTPRequestNetworkActivityTimeout:\nSet the network timeout on the request - this timer is reset when any data is received.\nreturn bool",
		"prefix":"SetHTTPRequestNetworkActivityTimeout"
	},
	"CScriptHTTPRequest_SetHTTPRequestRawPostBody":
	{
		"body":"SetHTTPRequestRawPostBody(${string_1}, ${string_2})",
		"description":"CScriptHTTPRequest_SetHTTPRequestRawPostBody:\nSet the literal body of a post - invalid after setting a post parameter.\nreturn bool",
		"prefix":"SetHTTPRequestRawPostBody"
	},
	"CScriptHeroList_GetAllHeroes":
	{
		"body":"GetAllHeroes()",
		"description":"CScriptHeroList_GetAllHeroes:\nReturns all the heroes in the world\nreturn table",
		"prefix":"GetAllHeroes"
	},
	"CScriptHeroList_GetHero":
	{
		"body":"GetHero(${int_1})",
		"description":"CScriptHeroList_GetHero:\nGet the Nth hero in the Hero List\nreturn handle",
		"prefix":"GetHero"
	},
	"CScriptHeroList_GetHeroCount":
	{
		"body":"GetHeroCount()",
		"description":"CScriptHeroList_GetHeroCount:\nReturns the number of heroes in the world\nreturn int",
		"prefix":"GetHeroCount"
	},
	"CScriptKeyValues_GetValue":
	{
		"body":"GetValue(${string_1})",
		"description":"CScriptKeyValues_GetValue:\nReads a spawn key\nreturn table",
		"prefix":"GetValue"
	},
	"CScriptParticleManager_CreateParticle":
	{
		"body":"CreateParticle(${string_1}, ${int_2}, ${handle_3})",
		"description":"CScriptParticleManager_CreateParticle:\nCreates a new particle effect\nreturn int",
		"prefix":"CreateParticle"
	},
	"CScriptParticleManager_CreateParticleForPlayer":
	{
		"body":"CreateParticleForPlayer(${string_1}, ${int_2}, ${handle_3}, ${handle_4})",
		"description":"CScriptParticleManager_CreateParticleForPlayer:\nCreates a new particle effect that only plays for the specified player\nreturn int",
		"prefix":"CreateParticleForPlayer"
	},
	"CScriptParticleManager_CreateParticleForTeam":
	{
		"body":"CreateParticleForTeam(${string_1}, ${int_2}, ${handle_3}, ${int_4})",
		"description":"CScriptParticleManager_CreateParticleForTeam:\nCreates a new particle effect that only plays for the specified team\nreturn int",
		"prefix":"CreateParticleForTeam"
	},
	"CScriptParticleManager_DestroyParticle":
	{
		"body":"DestroyParticle(${intindex}, ${boolbDestroyImmediately})",
		"description":"CScriptParticleManager_DestroyParticle:\n(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.\nreturn void",
		"prefix":"DestroyParticle"
	},
	"CScriptParticleManager_GetParticleReplacement":
	{
		"body":"GetParticleReplacement(${string_1}, ${handle_2})",
		"description":"CScriptParticleManager_GetParticleReplacement:\n\nreturn string",
		"prefix":"GetParticleReplacement"
	},
	"CScriptParticleManager_ReleaseParticleIndex":
	{
		"body":"ReleaseParticleIndex(${int_1})",
		"description":"CScriptParticleManager_ReleaseParticleIndex:\nFrees the specified particle index\nreturn void",
		"prefix":"ReleaseParticleIndex"
	},
	"CScriptParticleManager_SetParticleAlwaysSimulate":
	{
		"body":"SetParticleAlwaysSimulate(${int_1})",
		"description":"CScriptParticleManager_SetParticleAlwaysSimulate:\n\nreturn void",
		"prefix":"SetParticleAlwaysSimulate"
	},
	"CScriptParticleManager_SetParticleControl":
	{
		"body":"SetParticleControl(${int_1}, ${int_2}, ${Vector_3})",
		"description":"CScriptParticleManager_SetParticleControl:\nSet the control point data for a control on a particle effect\nreturn void",
		"prefix":"SetParticleControl"
	},
	"CScriptParticleManager_SetParticleControlEnt":
	{
		"body":"SetParticleControlEnt(${int_1}, ${int_2}, ${handle_3}, ${int_4}, ${string_5}, ${Vector_6}, ${bool_7})",
		"description":"CScriptParticleManager_SetParticleControlEnt:\n\nreturn void",
		"prefix":"SetParticleControlEnt"
	},
	"CScriptParticleManager_SetParticleControlFallback":
	{
		"body":"SetParticleControlFallback(${intiIndex}, ${intiPoint}, ${VectorvecPosition})",
		"description":"CScriptParticleManager_SetParticleControlFallback:\n(int iIndex, int iPoint, Vector vecPosition)\nreturn void",
		"prefix":"SetParticleControlFallback"
	},
	"CScriptParticleManager_SetParticleControlForward":
	{
		"body":"SetParticleControlForward(${intnFXIndex}, ${intnPoint}, ${vForward})",
		"description":"CScriptParticleManager_SetParticleControlForward:\n(int nFXIndex, int nPoint, vForward)\nreturn void",
		"prefix":"SetParticleControlForward"
	},
	"CScriptParticleManager_SetParticleControlOrientation":
	{
		"body":"SetParticleControlOrientation(${intnFXIndex}, ${intnPoint}, ${vForward}, ${vRight}, ${vUp})",
		"description":"CScriptParticleManager_SetParticleControlOrientation:\n(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)\nreturn void",
		"prefix":"SetParticleControlOrientation"
	},
	"CScriptParticleManager_SetParticleControlOrientationFLU":
	{
		"body":"SetParticleControlOrientationFLU(${intnFXIndex}, ${intnPoint}, ${VectorvecForward}, ${VectorvecLeft}, ${VectorvecUp})",
		"description":"CScriptParticleManager_SetParticleControlOrientationFLU:\n(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect\nreturn void",
		"prefix":"SetParticleControlOrientationFLU"
	},
	"CScriptParticleManager_SetParticleFoWProperties":
	{
		"body":"SetParticleFoWProperties(${int_1}, ${int_2}, ${int_3}, ${float_4})",
		"description":"CScriptParticleManager_SetParticleFoWProperties:\nint nfxindex, int nPoint, int nPoint2, float flRadius\nreturn void",
		"prefix":"SetParticleFoWProperties"
	},
	"CScriptParticleManager_SetParticleShouldCheckFoW":
	{
		"body":"SetParticleShouldCheckFoW(${int_1}, ${bool_2})",
		"description":"CScriptParticleManager_SetParticleShouldCheckFoW:\nint nfxindex, bool bCheckFoW\nreturn bool",
		"prefix":"SetParticleShouldCheckFoW"
	},
	"CScriptPrecacheContext_AddResource":
	{
		"body":"AddResource(${string_1})",
		"description":"CScriptPrecacheContext_AddResource:\nPrecaches a specific resource\nreturn void",
		"prefix":"AddResource"
	},
	"CScriptPrecacheContext_GetValue":
	{
		"body":"GetValue(${string_1})",
		"description":"CScriptPrecacheContext_GetValue:\nReads a spawn key\nreturn table",
		"prefix":"GetValue"
	},
	"Convars_GetBool":
	{
		"body":"GetBool(${name})",
		"description":"Convars_GetBool:\nGetBool(name) : returns the convar as a boolean flag.\nreturn table",
		"prefix":"GetBool"
	},
	"Convars_GetCommandClient":
	{
		"body":"GetCommandClient()",
		"description":"Convars_GetCommandClient:\nGetCommandClient() : returns the player who issued this console command.\nreturn handle",
		"prefix":"GetCommandClient"
	},
	"Convars_GetDOTACommandClient":
	{
		"body":"GetDOTACommandClient()",
		"description":"Convars_GetDOTACommandClient:\nGetDOTACommandClient() : returns the DOTA player who issued this console command.\nreturn handle",
		"prefix":"GetDOTACommandClient"
	},
	"Convars_GetFloat":
	{
		"body":"GetFloat(${name})",
		"description":"Convars_GetFloat:\nGetFloat(name) : returns the convar as a float. May return null if no such convar.\nreturn table",
		"prefix":"GetFloat"
	},
	"Convars_GetInt":
	{
		"body":"GetInt(${name})",
		"description":"Convars_GetInt:\nGetInt(name) : returns the convar as an int. May return null if no such convar.\nreturn table",
		"prefix":"GetInt"
	},
	"Convars_GetStr":
	{
		"body":"GetStr(${name})",
		"description":"Convars_GetStr:\nGetStr(name) : returns the convar as a string. May return null if no such convar.\nreturn table",
		"prefix":"GetStr"
	},
	"Convars_RegisterCommand":
	{
		"body":"RegisterCommand(${name}, ${fn}, ${helpString}, ${flags})",
		"description":"Convars_RegisterCommand:\nRegisterCommand(name, fn, helpString, flags) : register a console command.\nreturn void",
		"prefix":"RegisterCommand"
	},
	"Convars_RegisterConvar":
	{
		"body":"RegisterConvar(${name}, ${defaultValue}, ${helpString}, ${flags})",
		"description":"Convars_RegisterConvar:\nRegisterConvar(name, defaultValue, helpString, flags): register a new console variable.\nreturn void",
		"prefix":"RegisterConvar"
	},
	"Convars_SetBool":
	{
		"body":"SetBool(${name}, ${val})",
		"description":"Convars_SetBool:\nSetBool(name, val) : sets the value of the convar to the bool.\nreturn void",
		"prefix":"SetBool"
	},
	"Convars_SetFloat":
	{
		"body":"SetFloat(${name}, ${val})",
		"description":"Convars_SetFloat:\nSetFloat(name, val) : sets the value of the convar to the float.\nreturn void",
		"prefix":"SetFloat"
	},
	"Convars_SetInt":
	{
		"body":"SetInt(${name}, ${val})",
		"description":"Convars_SetInt:\nSetInt(name, val) : sets the value of the convar to the int.\nreturn void",
		"prefix":"SetInt"
	},
	"Convars_SetStr":
	{
		"body":"SetStr(${name}, ${val})",
		"description":"Convars_SetStr:\nSetStr(name, val) : sets the value of the convar to the string.\nreturn void",
		"prefix":"SetStr"
	},
	"GlobalSys_CommandLineCheck":
	{
		"body":"CommandLineCheck(${name})",
		"description":"GlobalSys_CommandLineCheck:\nCommandLineCheck(name) : returns true if the command line param was used, otherwise false.\nreturn table",
		"prefix":"CommandLineCheck"
	},
	"GlobalSys_CommandLineFloat":
	{
		"body":"CommandLineFloat(${name}, ${float_2})",
		"description":"GlobalSys_CommandLineFloat:\nCommandLineFloat(name) : returns the command line param as a float.\nreturn table",
		"prefix":"CommandLineFloat"
	},
	"GlobalSys_CommandLineInt":
	{
		"body":"CommandLineInt(${name}, ${int_2})",
		"description":"GlobalSys_CommandLineInt:\nCommandLineInt(name) : returns the command line param as an int.\nreturn table",
		"prefix":"CommandLineInt"
	},
	"GlobalSys_CommandLineStr":
	{
		"body":"CommandLineStr(${name}, ${string_2})",
		"description":"GlobalSys_CommandLineStr:\nCommandLineStr(name) : returns the command line param as a string.\nreturn table",
		"prefix":"CommandLineStr"
	},
	"GridNav_CanFindPath":
	{
		"body":"CanFindPath(${vStart}, ${vEnd})",
		"description":"GridNav_CanFindPath:\nDetermine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)\nreturn bool",
		"prefix":"CanFindPath"
	},
	"GridNav_DestroyTreesAroundPoint":
	{
		"body":"DestroyTreesAroundPoint(${Vector_1}, ${float_2}, ${bool_3})",
		"description":"GridNav_DestroyTreesAroundPoint:\nDestroy all trees in the area(vPosition, flRadius, bFullCollision\nreturn void",
		"prefix":"DestroyTreesAroundPoint"
	},
	"GridNav_FindPathLength":
	{
		"body":"FindPathLength(${vStart}, ${vEnd})",
		"description":"GridNav_FindPathLength:\nFind a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )\nreturn float",
		"prefix":"FindPathLength"
	},
	"GridNav_GetAllTreesAroundPoint":
	{
		"body":"GetAllTreesAroundPoint(${vPosition}, ${flRadius}, ${bFullCollision})",
		"description":"GridNav_GetAllTreesAroundPoint:\nReturns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision).\nreturn table",
		"prefix":"GetAllTreesAroundPoint"
	},
	"GridNav_GridPosToWorldCenterX":
	{
		"body":"GridPosToWorldCenterX(${int_1})",
		"description":"GridNav_GridPosToWorldCenterX:\nGet the X position of the center of a given X index\nreturn float",
		"prefix":"GridPosToWorldCenterX"
	},
	"GridNav_GridPosToWorldCenterY":
	{
		"body":"GridPosToWorldCenterY(${int_1})",
		"description":"GridNav_GridPosToWorldCenterY:\nGet the Y position of the center of a given Y index\nreturn float",
		"prefix":"GridPosToWorldCenterY"
	},
	"GridNav_IsBlocked":
	{
		"body":"IsBlocked(${Vector_1})",
		"description":"GridNav_IsBlocked:\nChecks whether the given position is blocked\nreturn bool",
		"prefix":"IsBlocked"
	},
	"GridNav_IsNearbyTree":
	{
		"body":"IsNearbyTree(${position}, ${radius}, ${checkFullTreeRadius?})",
		"description":"GridNav_IsNearbyTree:\n(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point\nreturn bool",
		"prefix":"IsNearbyTree"
	},
	"GridNav_IsTraversable":
	{
		"body":"IsTraversable(${Vector_1})",
		"description":"GridNav_IsTraversable:\nChecks whether the given position is traversable\nreturn bool",
		"prefix":"IsTraversable"
	},
	"GridNav_RegrowAllTrees":
	{
		"body":"RegrowAllTrees()",
		"description":"GridNav_RegrowAllTrees:\nCauses all trees in the map to regrow\nreturn void",
		"prefix":"RegrowAllTrees"
	},
	"GridNav_WorldToGridPosX":
	{
		"body":"WorldToGridPosX(${float_1})",
		"description":"GridNav_WorldToGridPosX:\nGet the X index of a given world X position\nreturn int",
		"prefix":"WorldToGridPosX"
	},
	"GridNav_WorldToGridPosY":
	{
		"body":"WorldToGridPosY(${float_1})",
		"description":"GridNav_WorldToGridPosY:\nGet the Y index of a given world Y position\nreturn int",
		"prefix":"WorldToGridPosY"
	},
	"ProjectileManager_ChangeTrackingProjectileSpeed":
	{
		"body":"ChangeTrackingProjectileSpeed(${handle_1}, ${int_2})",
		"description":"ProjectileManager_ChangeTrackingProjectileSpeed:\nUpdate speed\nreturn void",
		"prefix":"ChangeTrackingProjectileSpeed"
	},
	"ProjectileManager_CreateLinearProjectile":
	{
		"body":"CreateLinearProjectile(${handle_1})",
		"description":"ProjectileManager_CreateLinearProjectile:\nCreates a linear projectile and returns the projectile ID\nreturn int",
		"prefix":"CreateLinearProjectile"
	},
	"ProjectileManager_CreateTrackingProjectile":
	{
		"body":"CreateTrackingProjectile(${handle_1})",
		"description":"ProjectileManager_CreateTrackingProjectile:\nCreates a tracking projectile\nreturn void",
		"prefix":"CreateTrackingProjectile"
	},
	"ProjectileManager_DestroyLinearProjectile":
	{
		"body":"DestroyLinearProjectile(${int_1})",
		"description":"ProjectileManager_DestroyLinearProjectile:\nDestroys the linear projectile matching the argument ID\nreturn void",
		"prefix":"DestroyLinearProjectile"
	},
	"ProjectileManager_GetLinearProjectileLocation":
	{
		"body":"GetLinearProjectileLocation(${int_1})",
		"description":"ProjectileManager_GetLinearProjectileLocation:\nReturns current location of projectile\nreturn Vector",
		"prefix":"GetLinearProjectileLocation"
	},
	"ProjectileManager_GetLinearProjectileRadius":
	{
		"body":"GetLinearProjectileRadius(${int_1})",
		"description":"ProjectileManager_GetLinearProjectileRadius:\nReturns current radius of projectile\nreturn float",
		"prefix":"GetLinearProjectileRadius"
	},
	"ProjectileManager_GetLinearProjectileVelocity":
	{
		"body":"GetLinearProjectileVelocity(${int_1})",
		"description":"ProjectileManager_GetLinearProjectileVelocity:\nReturns a vector representing the current velocity of the projectile.\nreturn Vector",
		"prefix":"GetLinearProjectileVelocity"
	},
	"ProjectileManager_ProjectileDodge":
	{
		"body":"ProjectileDodge(${handle_1})",
		"description":"ProjectileManager_ProjectileDodge:\nMakes the specified unit dodge projectiles\nreturn void",
		"prefix":"ProjectileDodge"
	},
	"ProjectileManager_UpdateLinearProjectileDirection":
	{
		"body":"UpdateLinearProjectileDirection(${int_1}, ${Vector_2}, ${float_3})",
		"description":"ProjectileManager_UpdateLinearProjectileDirection:\nUpdate velocity\nreturn void",
		"prefix":"UpdateLinearProjectileDirection"
	},
	"SteamInfo_IsPublicUniverse":
	{
		"body":"IsPublicUniverse()",
		"description":"SteamInfo_IsPublicUniverse:\nIs the script connected to the public Steam universe\nreturn bool",
		"prefix":"IsPublicUniverse"
	}
}